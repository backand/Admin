//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Durados.Web.Mvc.Specifics.Projects.Gadir {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("GadirDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class GadirDataSet : global::System.Data.DataSet {
        
        private ALARM_LISTDataTable tableALARM_LIST;
        
        private USERSDataTable tableUSERS;
        
        private ALARM_STATUSDataTable tableALARM_STATUS;
        
        private ALARM_TYPEDataTable tableALARM_TYPE;
        
        private COMUNICATION_TYPEDataTable tableCOMUNICATION_TYPE;
        
        private CONCENTRATORSDataTable tableCONCENTRATORS;
        
        private HOLIDAYSDataTable tableHOLIDAYS;
        
        private ISRAEL_ELECTRICDataTable tableISRAEL_ELECTRIC;
        
        private METER_TYPEDataTable tableMETER_TYPE;
        
        private METERSDataTable tableMETERS;
        
        private PARAMETERSDataTable tablePARAMETERS;
        
        private TREEDataTable tableTREE;
        
        private ISRAEL_READINGDataTable tableISRAEL_READING;
        
        private global::System.Data.DataRelation relationFK_ISRAEL_ELECTRIC_METERS;
        
        private global::System.Data.DataRelation relationFK_METERS_COMUNICATION_TYPE;
        
        private global::System.Data.DataRelation relationFK_METERS_CONCENTRATORS;
        
        private global::System.Data.DataRelation relationFK_METERS_METER_TYPE;
        
        private global::System.Data.DataRelation relationFK_METERS_PARAMETERS;
        
        private global::System.Data.DataRelation relationFK_METERS_TREE;
        
        private global::System.Data.DataRelation relationFK_TREE_TREE;
        
        private global::System.Data.DataRelation relationFK_ISRAEL_READING_METERS;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public GadirDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected GadirDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ALARM_LIST"] != null)) {
                    base.Tables.Add(new ALARM_LISTDataTable(ds.Tables["ALARM_LIST"]));
                }
                if ((ds.Tables["USERS"] != null)) {
                    base.Tables.Add(new USERSDataTable(ds.Tables["USERS"]));
                }
                if ((ds.Tables["ALARM_STATUS"] != null)) {
                    base.Tables.Add(new ALARM_STATUSDataTable(ds.Tables["ALARM_STATUS"]));
                }
                if ((ds.Tables["ALARM_TYPE"] != null)) {
                    base.Tables.Add(new ALARM_TYPEDataTable(ds.Tables["ALARM_TYPE"]));
                }
                if ((ds.Tables["COMUNICATION_TYPE"] != null)) {
                    base.Tables.Add(new COMUNICATION_TYPEDataTable(ds.Tables["COMUNICATION_TYPE"]));
                }
                if ((ds.Tables["CONCENTRATORS"] != null)) {
                    base.Tables.Add(new CONCENTRATORSDataTable(ds.Tables["CONCENTRATORS"]));
                }
                if ((ds.Tables["HOLIDAYS"] != null)) {
                    base.Tables.Add(new HOLIDAYSDataTable(ds.Tables["HOLIDAYS"]));
                }
                if ((ds.Tables["ISRAEL_ELECTRIC"] != null)) {
                    base.Tables.Add(new ISRAEL_ELECTRICDataTable(ds.Tables["ISRAEL_ELECTRIC"]));
                }
                if ((ds.Tables["METER_TYPE"] != null)) {
                    base.Tables.Add(new METER_TYPEDataTable(ds.Tables["METER_TYPE"]));
                }
                if ((ds.Tables["METERS"] != null)) {
                    base.Tables.Add(new METERSDataTable(ds.Tables["METERS"]));
                }
                if ((ds.Tables["PARAMETERS"] != null)) {
                    base.Tables.Add(new PARAMETERSDataTable(ds.Tables["PARAMETERS"]));
                }
                if ((ds.Tables["TREE"] != null)) {
                    base.Tables.Add(new TREEDataTable(ds.Tables["TREE"]));
                }
                if ((ds.Tables["ISRAEL_READING"] != null)) {
                    base.Tables.Add(new ISRAEL_READINGDataTable(ds.Tables["ISRAEL_READING"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ALARM_LISTDataTable ALARM_LIST {
            get {
                return this.tableALARM_LIST;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public USERSDataTable USERS {
            get {
                return this.tableUSERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ALARM_STATUSDataTable ALARM_STATUS {
            get {
                return this.tableALARM_STATUS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ALARM_TYPEDataTable ALARM_TYPE {
            get {
                return this.tableALARM_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COMUNICATION_TYPEDataTable COMUNICATION_TYPE {
            get {
                return this.tableCOMUNICATION_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CONCENTRATORSDataTable CONCENTRATORS {
            get {
                return this.tableCONCENTRATORS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HOLIDAYSDataTable HOLIDAYS {
            get {
                return this.tableHOLIDAYS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ISRAEL_ELECTRICDataTable ISRAEL_ELECTRIC {
            get {
                return this.tableISRAEL_ELECTRIC;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public METER_TYPEDataTable METER_TYPE {
            get {
                return this.tableMETER_TYPE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public METERSDataTable METERS {
            get {
                return this.tableMETERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PARAMETERSDataTable PARAMETERS {
            get {
                return this.tablePARAMETERS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TREEDataTable TREE {
            get {
                return this.tableTREE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ISRAEL_READINGDataTable ISRAEL_READING {
            get {
                return this.tableISRAEL_READING;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            GadirDataSet cln = ((GadirDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ALARM_LIST"] != null)) {
                    base.Tables.Add(new ALARM_LISTDataTable(ds.Tables["ALARM_LIST"]));
                }
                if ((ds.Tables["USERS"] != null)) {
                    base.Tables.Add(new USERSDataTable(ds.Tables["USERS"]));
                }
                if ((ds.Tables["ALARM_STATUS"] != null)) {
                    base.Tables.Add(new ALARM_STATUSDataTable(ds.Tables["ALARM_STATUS"]));
                }
                if ((ds.Tables["ALARM_TYPE"] != null)) {
                    base.Tables.Add(new ALARM_TYPEDataTable(ds.Tables["ALARM_TYPE"]));
                }
                if ((ds.Tables["COMUNICATION_TYPE"] != null)) {
                    base.Tables.Add(new COMUNICATION_TYPEDataTable(ds.Tables["COMUNICATION_TYPE"]));
                }
                if ((ds.Tables["CONCENTRATORS"] != null)) {
                    base.Tables.Add(new CONCENTRATORSDataTable(ds.Tables["CONCENTRATORS"]));
                }
                if ((ds.Tables["HOLIDAYS"] != null)) {
                    base.Tables.Add(new HOLIDAYSDataTable(ds.Tables["HOLIDAYS"]));
                }
                if ((ds.Tables["ISRAEL_ELECTRIC"] != null)) {
                    base.Tables.Add(new ISRAEL_ELECTRICDataTable(ds.Tables["ISRAEL_ELECTRIC"]));
                }
                if ((ds.Tables["METER_TYPE"] != null)) {
                    base.Tables.Add(new METER_TYPEDataTable(ds.Tables["METER_TYPE"]));
                }
                if ((ds.Tables["METERS"] != null)) {
                    base.Tables.Add(new METERSDataTable(ds.Tables["METERS"]));
                }
                if ((ds.Tables["PARAMETERS"] != null)) {
                    base.Tables.Add(new PARAMETERSDataTable(ds.Tables["PARAMETERS"]));
                }
                if ((ds.Tables["TREE"] != null)) {
                    base.Tables.Add(new TREEDataTable(ds.Tables["TREE"]));
                }
                if ((ds.Tables["ISRAEL_READING"] != null)) {
                    base.Tables.Add(new ISRAEL_READINGDataTable(ds.Tables["ISRAEL_READING"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableALARM_LIST = ((ALARM_LISTDataTable)(base.Tables["ALARM_LIST"]));
            if ((initTable == true)) {
                if ((this.tableALARM_LIST != null)) {
                    this.tableALARM_LIST.InitVars();
                }
            }
            this.tableUSERS = ((USERSDataTable)(base.Tables["USERS"]));
            if ((initTable == true)) {
                if ((this.tableUSERS != null)) {
                    this.tableUSERS.InitVars();
                }
            }
            this.tableALARM_STATUS = ((ALARM_STATUSDataTable)(base.Tables["ALARM_STATUS"]));
            if ((initTable == true)) {
                if ((this.tableALARM_STATUS != null)) {
                    this.tableALARM_STATUS.InitVars();
                }
            }
            this.tableALARM_TYPE = ((ALARM_TYPEDataTable)(base.Tables["ALARM_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableALARM_TYPE != null)) {
                    this.tableALARM_TYPE.InitVars();
                }
            }
            this.tableCOMUNICATION_TYPE = ((COMUNICATION_TYPEDataTable)(base.Tables["COMUNICATION_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableCOMUNICATION_TYPE != null)) {
                    this.tableCOMUNICATION_TYPE.InitVars();
                }
            }
            this.tableCONCENTRATORS = ((CONCENTRATORSDataTable)(base.Tables["CONCENTRATORS"]));
            if ((initTable == true)) {
                if ((this.tableCONCENTRATORS != null)) {
                    this.tableCONCENTRATORS.InitVars();
                }
            }
            this.tableHOLIDAYS = ((HOLIDAYSDataTable)(base.Tables["HOLIDAYS"]));
            if ((initTable == true)) {
                if ((this.tableHOLIDAYS != null)) {
                    this.tableHOLIDAYS.InitVars();
                }
            }
            this.tableISRAEL_ELECTRIC = ((ISRAEL_ELECTRICDataTable)(base.Tables["ISRAEL_ELECTRIC"]));
            if ((initTable == true)) {
                if ((this.tableISRAEL_ELECTRIC != null)) {
                    this.tableISRAEL_ELECTRIC.InitVars();
                }
            }
            this.tableMETER_TYPE = ((METER_TYPEDataTable)(base.Tables["METER_TYPE"]));
            if ((initTable == true)) {
                if ((this.tableMETER_TYPE != null)) {
                    this.tableMETER_TYPE.InitVars();
                }
            }
            this.tableMETERS = ((METERSDataTable)(base.Tables["METERS"]));
            if ((initTable == true)) {
                if ((this.tableMETERS != null)) {
                    this.tableMETERS.InitVars();
                }
            }
            this.tablePARAMETERS = ((PARAMETERSDataTable)(base.Tables["PARAMETERS"]));
            if ((initTable == true)) {
                if ((this.tablePARAMETERS != null)) {
                    this.tablePARAMETERS.InitVars();
                }
            }
            this.tableTREE = ((TREEDataTable)(base.Tables["TREE"]));
            if ((initTable == true)) {
                if ((this.tableTREE != null)) {
                    this.tableTREE.InitVars();
                }
            }
            this.tableISRAEL_READING = ((ISRAEL_READINGDataTable)(base.Tables["ISRAEL_READING"]));
            if ((initTable == true)) {
                if ((this.tableISRAEL_READING != null)) {
                    this.tableISRAEL_READING.InitVars();
                }
            }
            this.relationFK_ISRAEL_ELECTRIC_METERS = this.Relations["FK_ISRAEL_ELECTRIC_METERS"];
            this.relationFK_METERS_COMUNICATION_TYPE = this.Relations["FK_METERS_COMUNICATION_TYPE"];
            this.relationFK_METERS_CONCENTRATORS = this.Relations["FK_METERS_CONCENTRATORS"];
            this.relationFK_METERS_METER_TYPE = this.Relations["FK_METERS_METER_TYPE"];
            this.relationFK_METERS_PARAMETERS = this.Relations["FK_METERS_PARAMETERS"];
            this.relationFK_METERS_TREE = this.Relations["FK_METERS_TREE"];
            this.relationFK_TREE_TREE = this.Relations["FK_TREE_TREE"];
            this.relationFK_ISRAEL_READING_METERS = this.Relations["FK_ISRAEL_READING_METERS"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "GadirDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/GadirDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableALARM_LIST = new ALARM_LISTDataTable();
            base.Tables.Add(this.tableALARM_LIST);
            this.tableUSERS = new USERSDataTable();
            base.Tables.Add(this.tableUSERS);
            this.tableALARM_STATUS = new ALARM_STATUSDataTable();
            base.Tables.Add(this.tableALARM_STATUS);
            this.tableALARM_TYPE = new ALARM_TYPEDataTable();
            base.Tables.Add(this.tableALARM_TYPE);
            this.tableCOMUNICATION_TYPE = new COMUNICATION_TYPEDataTable();
            base.Tables.Add(this.tableCOMUNICATION_TYPE);
            this.tableCONCENTRATORS = new CONCENTRATORSDataTable();
            base.Tables.Add(this.tableCONCENTRATORS);
            this.tableHOLIDAYS = new HOLIDAYSDataTable();
            base.Tables.Add(this.tableHOLIDAYS);
            this.tableISRAEL_ELECTRIC = new ISRAEL_ELECTRICDataTable();
            base.Tables.Add(this.tableISRAEL_ELECTRIC);
            this.tableMETER_TYPE = new METER_TYPEDataTable();
            base.Tables.Add(this.tableMETER_TYPE);
            this.tableMETERS = new METERSDataTable();
            base.Tables.Add(this.tableMETERS);
            this.tablePARAMETERS = new PARAMETERSDataTable();
            base.Tables.Add(this.tablePARAMETERS);
            this.tableTREE = new TREEDataTable();
            base.Tables.Add(this.tableTREE);
            this.tableISRAEL_READING = new ISRAEL_READINGDataTable();
            base.Tables.Add(this.tableISRAEL_READING);
            this.relationFK_ISRAEL_ELECTRIC_METERS = new global::System.Data.DataRelation("FK_ISRAEL_ELECTRIC_METERS", new global::System.Data.DataColumn[] {
                        this.tableMETERS.DB_UNIQUE_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableISRAEL_ELECTRIC.METERColumn}, false);
            this.Relations.Add(this.relationFK_ISRAEL_ELECTRIC_METERS);
            this.relationFK_METERS_COMUNICATION_TYPE = new global::System.Data.DataRelation("FK_METERS_COMUNICATION_TYPE", new global::System.Data.DataColumn[] {
                        this.tableCOMUNICATION_TYPE.CODEColumn}, new global::System.Data.DataColumn[] {
                        this.tableMETERS.COMMUNICATIONColumn}, false);
            this.Relations.Add(this.relationFK_METERS_COMUNICATION_TYPE);
            this.relationFK_METERS_CONCENTRATORS = new global::System.Data.DataRelation("FK_METERS_CONCENTRATORS", new global::System.Data.DataColumn[] {
                        this.tableCONCENTRATORS.CONCENTRATOR_NOColumn}, new global::System.Data.DataColumn[] {
                        this.tableMETERS.CONCENTRATORColumn}, false);
            this.Relations.Add(this.relationFK_METERS_CONCENTRATORS);
            this.relationFK_METERS_METER_TYPE = new global::System.Data.DataRelation("FK_METERS_METER_TYPE", new global::System.Data.DataColumn[] {
                        this.tableMETER_TYPE.CODE_METER_TYPEColumn}, new global::System.Data.DataColumn[] {
                        this.tableMETERS.METER_TYPEColumn}, false);
            this.Relations.Add(this.relationFK_METERS_METER_TYPE);
            this.relationFK_METERS_PARAMETERS = new global::System.Data.DataRelation("FK_METERS_PARAMETERS", new global::System.Data.DataColumn[] {
                        this.tablePARAMETERS.CODEColumn}, new global::System.Data.DataColumn[] {
                        this.tableMETERS.PARAMETERColumn}, false);
            this.Relations.Add(this.relationFK_METERS_PARAMETERS);
            this.relationFK_METERS_TREE = new global::System.Data.DataRelation("FK_METERS_TREE", new global::System.Data.DataColumn[] {
                        this.tableTREE.TREE_NOColumn}, new global::System.Data.DataColumn[] {
                        this.tableMETERS.TREE_NOColumn}, false);
            this.Relations.Add(this.relationFK_METERS_TREE);
            this.relationFK_TREE_TREE = new global::System.Data.DataRelation("FK_TREE_TREE", new global::System.Data.DataColumn[] {
                        this.tableTREE.TREE_NOColumn}, new global::System.Data.DataColumn[] {
                        this.tableTREE.PARENTColumn}, false);
            this.Relations.Add(this.relationFK_TREE_TREE);
            this.relationFK_ISRAEL_READING_METERS = new global::System.Data.DataRelation("FK_ISRAEL_READING_METERS", new global::System.Data.DataColumn[] {
                        this.tableMETERS.DB_UNIQUE_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableISRAEL_READING.METERColumn}, false);
            this.Relations.Add(this.relationFK_ISRAEL_READING_METERS);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeALARM_LIST() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUSERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeALARM_STATUS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeALARM_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOMUNICATION_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCONCENTRATORS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeHOLIDAYS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeISRAEL_ELECTRIC() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMETER_TYPE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMETERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePARAMETERS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTREE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeISRAEL_READING() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            GadirDataSet ds = new GadirDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ALARM_LISTRowChangeEventHandler(object sender, ALARM_LISTRowChangeEvent e);
        
        public delegate void USERSRowChangeEventHandler(object sender, USERSRowChangeEvent e);
        
        public delegate void ALARM_STATUSRowChangeEventHandler(object sender, ALARM_STATUSRowChangeEvent e);
        
        public delegate void ALARM_TYPERowChangeEventHandler(object sender, ALARM_TYPERowChangeEvent e);
        
        public delegate void COMUNICATION_TYPERowChangeEventHandler(object sender, COMUNICATION_TYPERowChangeEvent e);
        
        public delegate void CONCENTRATORSRowChangeEventHandler(object sender, CONCENTRATORSRowChangeEvent e);
        
        public delegate void HOLIDAYSRowChangeEventHandler(object sender, HOLIDAYSRowChangeEvent e);
        
        public delegate void ISRAEL_ELECTRICRowChangeEventHandler(object sender, ISRAEL_ELECTRICRowChangeEvent e);
        
        public delegate void METER_TYPERowChangeEventHandler(object sender, METER_TYPERowChangeEvent e);
        
        public delegate void METERSRowChangeEventHandler(object sender, METERSRowChangeEvent e);
        
        public delegate void PARAMETERSRowChangeEventHandler(object sender, PARAMETERSRowChangeEvent e);
        
        public delegate void TREERowChangeEventHandler(object sender, TREERowChangeEvent e);
        
        public delegate void ISRAEL_READINGRowChangeEventHandler(object sender, ISRAEL_READINGRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ALARM_LISTDataTable : global::System.Data.TypedTableBase<ALARM_LISTRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnMeterID;
            
            private global::System.Data.DataColumn columnConcentratorID;
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTDataTable() {
                this.TableName = "ALARM_LIST";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ALARM_LISTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ALARM_LISTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MeterIDColumn {
                get {
                    return this.columnMeterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConcentratorIDColumn {
                get {
                    return this.columnConcentratorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTRow this[int index] {
                get {
                    return ((ALARM_LISTRow)(this.Rows[index]));
                }
            }
            
            public event ALARM_LISTRowChangeEventHandler ALARM_LISTRowChanging;
            
            public event ALARM_LISTRowChangeEventHandler ALARM_LISTRowChanged;
            
            public event ALARM_LISTRowChangeEventHandler ALARM_LISTRowDeleting;
            
            public event ALARM_LISTRowChangeEventHandler ALARM_LISTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddALARM_LISTRow(ALARM_LISTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTRow AddALARM_LISTRow(int MeterID, string ConcentratorID, byte Code, System.DateTime Time, byte Status) {
                ALARM_LISTRow rowALARM_LISTRow = ((ALARM_LISTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MeterID,
                        ConcentratorID,
                        Code,
                        Time,
                        Status};
                rowALARM_LISTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowALARM_LISTRow);
                return rowALARM_LISTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTRow FindByID(int ID) {
                return ((ALARM_LISTRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ALARM_LISTDataTable cln = ((ALARM_LISTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ALARM_LISTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMeterID = base.Columns["MeterID"];
                this.columnConcentratorID = base.Columns["ConcentratorID"];
                this.columnCode = base.Columns["Code"];
                this.columnTime = base.Columns["Time"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMeterID = new global::System.Data.DataColumn("MeterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterID);
                this.columnConcentratorID = new global::System.Data.DataColumn("ConcentratorID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConcentratorID);
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnMeterID.AllowDBNull = false;
                this.columnConcentratorID.AllowDBNull = false;
                this.columnConcentratorID.MaxLength = 50;
                this.columnCode.AllowDBNull = false;
                this.columnTime.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTRow NewALARM_LISTRow() {
                return ((ALARM_LISTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ALARM_LISTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ALARM_LISTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ALARM_LISTRowChanged != null)) {
                    this.ALARM_LISTRowChanged(this, new ALARM_LISTRowChangeEvent(((ALARM_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ALARM_LISTRowChanging != null)) {
                    this.ALARM_LISTRowChanging(this, new ALARM_LISTRowChangeEvent(((ALARM_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ALARM_LISTRowDeleted != null)) {
                    this.ALARM_LISTRowDeleted(this, new ALARM_LISTRowChangeEvent(((ALARM_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ALARM_LISTRowDeleting != null)) {
                    this.ALARM_LISTRowDeleting(this, new ALARM_LISTRowChangeEvent(((ALARM_LISTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveALARM_LISTRow(ALARM_LISTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ALARM_LISTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class USERSDataTable : global::System.Data.TypedTableBase<USERSRow> {
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnUSER_NAME;
            
            private global::System.Data.DataColumn columnPASSWORD;
            
            private global::System.Data.DataColumn columnMETER_NO;
            
            private global::System.Data.DataColumn columnTREE_NO;
            
            private global::System.Data.DataColumn columnAUTORIZ;
            
            private global::System.Data.DataColumn columnLANG;
            
            private global::System.Data.DataColumn columnCLIENT_SUG;
            
            private global::System.Data.DataColumn columnLOG_PATH;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSDataTable() {
                this.TableName = "USERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected USERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NAMEColumn {
                get {
                    return this.columnUSER_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PASSWORDColumn {
                get {
                    return this.columnPASSWORD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn METER_NOColumn {
                get {
                    return this.columnMETER_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREE_NOColumn {
                get {
                    return this.columnTREE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AUTORIZColumn {
                get {
                    return this.columnAUTORIZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LANGColumn {
                get {
                    return this.columnLANG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CLIENT_SUGColumn {
                get {
                    return this.columnCLIENT_SUG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOG_PATHColumn {
                get {
                    return this.columnLOG_PATH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSRow this[int index] {
                get {
                    return ((USERSRow)(this.Rows[index]));
                }
            }
            
            public event USERSRowChangeEventHandler USERSRowChanging;
            
            public event USERSRowChangeEventHandler USERSRowChanged;
            
            public event USERSRowChangeEventHandler USERSRowDeleting;
            
            public event USERSRowChangeEventHandler USERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUSERSRow(USERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSRow AddUSERSRow(int CODE, string USER_NAME, string PASSWORD, string METER_NO, int TREE_NO, string AUTORIZ, short LANG, string CLIENT_SUG, string LOG_PATH) {
                USERSRow rowUSERSRow = ((USERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CODE,
                        USER_NAME,
                        PASSWORD,
                        METER_NO,
                        TREE_NO,
                        AUTORIZ,
                        LANG,
                        CLIENT_SUG,
                        LOG_PATH};
                rowUSERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUSERSRow);
                return rowUSERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSRow FindByCODE(int CODE) {
                return ((USERSRow)(this.Rows.Find(new object[] {
                            CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                USERSDataTable cln = ((USERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new USERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE = base.Columns["CODE"];
                this.columnUSER_NAME = base.Columns["USER_NAME"];
                this.columnPASSWORD = base.Columns["PASSWORD"];
                this.columnMETER_NO = base.Columns["METER_NO"];
                this.columnTREE_NO = base.Columns["TREE_NO"];
                this.columnAUTORIZ = base.Columns["AUTORIZ"];
                this.columnLANG = base.Columns["LANG"];
                this.columnCLIENT_SUG = base.Columns["CLIENT_SUG"];
                this.columnLOG_PATH = base.Columns["LOG_PATH"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnUSER_NAME = new global::System.Data.DataColumn("USER_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NAME);
                this.columnPASSWORD = new global::System.Data.DataColumn("PASSWORD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPASSWORD);
                this.columnMETER_NO = new global::System.Data.DataColumn("METER_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMETER_NO);
                this.columnTREE_NO = new global::System.Data.DataColumn("TREE_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREE_NO);
                this.columnAUTORIZ = new global::System.Data.DataColumn("AUTORIZ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAUTORIZ);
                this.columnLANG = new global::System.Data.DataColumn("LANG", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLANG);
                this.columnCLIENT_SUG = new global::System.Data.DataColumn("CLIENT_SUG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCLIENT_SUG);
                this.columnLOG_PATH = new global::System.Data.DataColumn("LOG_PATH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOG_PATH);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCODE}, true));
                this.columnCODE.AllowDBNull = false;
                this.columnCODE.Unique = true;
                this.columnUSER_NAME.AllowDBNull = false;
                this.columnUSER_NAME.MaxLength = 50;
                this.columnPASSWORD.AllowDBNull = false;
                this.columnPASSWORD.MaxLength = 50;
                this.columnMETER_NO.MaxLength = 50;
                this.columnTREE_NO.AllowDBNull = false;
                this.columnAUTORIZ.MaxLength = 50;
                this.columnLANG.AllowDBNull = false;
                this.columnCLIENT_SUG.MaxLength = 50;
                this.columnLOG_PATH.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSRow NewUSERSRow() {
                return ((USERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new USERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(USERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.USERSRowChanged != null)) {
                    this.USERSRowChanged(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.USERSRowChanging != null)) {
                    this.USERSRowChanging(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.USERSRowDeleted != null)) {
                    this.USERSRowDeleted(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.USERSRowDeleting != null)) {
                    this.USERSRowDeleting(this, new USERSRowChangeEvent(((USERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUSERSRow(USERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "USERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ALARM_STATUSDataTable : global::System.Data.TypedTableBase<ALARM_STATUSRow> {
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columntext;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSDataTable() {
                this.TableName = "ALARM_STATUS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ALARM_STATUSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ALARM_STATUSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn textColumn {
                get {
                    return this.columntext;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSRow this[int index] {
                get {
                    return ((ALARM_STATUSRow)(this.Rows[index]));
                }
            }
            
            public event ALARM_STATUSRowChangeEventHandler ALARM_STATUSRowChanging;
            
            public event ALARM_STATUSRowChangeEventHandler ALARM_STATUSRowChanged;
            
            public event ALARM_STATUSRowChangeEventHandler ALARM_STATUSRowDeleting;
            
            public event ALARM_STATUSRowChangeEventHandler ALARM_STATUSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddALARM_STATUSRow(ALARM_STATUSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSRow AddALARM_STATUSRow(byte Code, string text) {
                ALARM_STATUSRow rowALARM_STATUSRow = ((ALARM_STATUSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Code,
                        text};
                rowALARM_STATUSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowALARM_STATUSRow);
                return rowALARM_STATUSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSRow FindByCode(byte Code) {
                return ((ALARM_STATUSRow)(this.Rows.Find(new object[] {
                            Code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ALARM_STATUSDataTable cln = ((ALARM_STATUSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ALARM_STATUSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCode = base.Columns["Code"];
                this.columntext = base.Columns["text"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columntext = new global::System.Data.DataColumn("text", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntext);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCode}, true));
                this.columnCode.AllowDBNull = false;
                this.columnCode.Unique = true;
                this.columntext.AllowDBNull = false;
                this.columntext.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSRow NewALARM_STATUSRow() {
                return ((ALARM_STATUSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ALARM_STATUSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ALARM_STATUSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ALARM_STATUSRowChanged != null)) {
                    this.ALARM_STATUSRowChanged(this, new ALARM_STATUSRowChangeEvent(((ALARM_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ALARM_STATUSRowChanging != null)) {
                    this.ALARM_STATUSRowChanging(this, new ALARM_STATUSRowChangeEvent(((ALARM_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ALARM_STATUSRowDeleted != null)) {
                    this.ALARM_STATUSRowDeleted(this, new ALARM_STATUSRowChangeEvent(((ALARM_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ALARM_STATUSRowDeleting != null)) {
                    this.ALARM_STATUSRowDeleting(this, new ALARM_STATUSRowChangeEvent(((ALARM_STATUSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveALARM_STATUSRow(ALARM_STATUSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ALARM_STATUSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ALARM_TYPEDataTable : global::System.Data.TypedTableBase<ALARM_TYPERow> {
            
            private global::System.Data.DataColumn columnCode;
            
            private global::System.Data.DataColumn columnAlarm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPEDataTable() {
                this.TableName = "ALARM_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ALARM_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ALARM_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlarmColumn {
                get {
                    return this.columnAlarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPERow this[int index] {
                get {
                    return ((ALARM_TYPERow)(this.Rows[index]));
                }
            }
            
            public event ALARM_TYPERowChangeEventHandler ALARM_TYPERowChanging;
            
            public event ALARM_TYPERowChangeEventHandler ALARM_TYPERowChanged;
            
            public event ALARM_TYPERowChangeEventHandler ALARM_TYPERowDeleting;
            
            public event ALARM_TYPERowChangeEventHandler ALARM_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddALARM_TYPERow(ALARM_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPERow AddALARM_TYPERow(byte Code, string Alarm) {
                ALARM_TYPERow rowALARM_TYPERow = ((ALARM_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Code,
                        Alarm};
                rowALARM_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowALARM_TYPERow);
                return rowALARM_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPERow FindByCode(byte Code) {
                return ((ALARM_TYPERow)(this.Rows.Find(new object[] {
                            Code})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ALARM_TYPEDataTable cln = ((ALARM_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ALARM_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCode = base.Columns["Code"];
                this.columnAlarm = base.Columns["Alarm"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCode = new global::System.Data.DataColumn("Code", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnAlarm = new global::System.Data.DataColumn("Alarm", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlarm);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCode}, true));
                this.columnCode.AllowDBNull = false;
                this.columnCode.Unique = true;
                this.columnAlarm.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPERow NewALARM_TYPERow() {
                return ((ALARM_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ALARM_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ALARM_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ALARM_TYPERowChanged != null)) {
                    this.ALARM_TYPERowChanged(this, new ALARM_TYPERowChangeEvent(((ALARM_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ALARM_TYPERowChanging != null)) {
                    this.ALARM_TYPERowChanging(this, new ALARM_TYPERowChangeEvent(((ALARM_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ALARM_TYPERowDeleted != null)) {
                    this.ALARM_TYPERowDeleted(this, new ALARM_TYPERowChangeEvent(((ALARM_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ALARM_TYPERowDeleting != null)) {
                    this.ALARM_TYPERowDeleting(this, new ALARM_TYPERowChangeEvent(((ALARM_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveALARM_TYPERow(ALARM_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ALARM_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COMUNICATION_TYPEDataTable : global::System.Data.TypedTableBase<COMUNICATION_TYPERow> {
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPEDataTable() {
                this.TableName = "COMUNICATION_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMUNICATION_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COMUNICATION_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERow this[int index] {
                get {
                    return ((COMUNICATION_TYPERow)(this.Rows[index]));
                }
            }
            
            public event COMUNICATION_TYPERowChangeEventHandler COMUNICATION_TYPERowChanging;
            
            public event COMUNICATION_TYPERowChangeEventHandler COMUNICATION_TYPERowChanged;
            
            public event COMUNICATION_TYPERowChangeEventHandler COMUNICATION_TYPERowDeleting;
            
            public event COMUNICATION_TYPERowChangeEventHandler COMUNICATION_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOMUNICATION_TYPERow(COMUNICATION_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERow AddCOMUNICATION_TYPERow(int CODE, string NAME) {
                COMUNICATION_TYPERow rowCOMUNICATION_TYPERow = ((COMUNICATION_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CODE,
                        NAME};
                rowCOMUNICATION_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCOMUNICATION_TYPERow);
                return rowCOMUNICATION_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERow FindByCODE(int CODE) {
                return ((COMUNICATION_TYPERow)(this.Rows.Find(new object[] {
                            CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                COMUNICATION_TYPEDataTable cln = ((COMUNICATION_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new COMUNICATION_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE = base.Columns["CODE"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCODE}, true));
                this.columnCODE.AllowDBNull = false;
                this.columnCODE.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERow NewCOMUNICATION_TYPERow() {
                return ((COMUNICATION_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new COMUNICATION_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(COMUNICATION_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COMUNICATION_TYPERowChanged != null)) {
                    this.COMUNICATION_TYPERowChanged(this, new COMUNICATION_TYPERowChangeEvent(((COMUNICATION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COMUNICATION_TYPERowChanging != null)) {
                    this.COMUNICATION_TYPERowChanging(this, new COMUNICATION_TYPERowChangeEvent(((COMUNICATION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COMUNICATION_TYPERowDeleted != null)) {
                    this.COMUNICATION_TYPERowDeleted(this, new COMUNICATION_TYPERowChangeEvent(((COMUNICATION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COMUNICATION_TYPERowDeleting != null)) {
                    this.COMUNICATION_TYPERowDeleting(this, new COMUNICATION_TYPERowChangeEvent(((COMUNICATION_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOMUNICATION_TYPERow(COMUNICATION_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COMUNICATION_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CONCENTRATORSDataTable : global::System.Data.TypedTableBase<CONCENTRATORSRow> {
            
            private global::System.Data.DataColumn columnCONCENTRATOR_NO;
            
            private global::System.Data.DataColumn columnINSTALLATION_DATE;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnMINUTS;
            
            private global::System.Data.DataColumn columnTREE_NO;
            
            private global::System.Data.DataColumn columnUSER_NUMBER;
            
            private global::System.Data.DataColumn columnTIME_ZONE;
            
            private global::System.Data.DataColumn columnDETAILS;
            
            private global::System.Data.DataColumn columnLOCATION;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnCOMMUNICATION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSDataTable() {
                this.TableName = "CONCENTRATORS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONCENTRATORSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CONCENTRATORSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONCENTRATOR_NOColumn {
                get {
                    return this.columnCONCENTRATOR_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSTALLATION_DATEColumn {
                get {
                    return this.columnINSTALLATION_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MINUTSColumn {
                get {
                    return this.columnMINUTS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREE_NOColumn {
                get {
                    return this.columnTREE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NUMBERColumn {
                get {
                    return this.columnUSER_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIME_ZONEColumn {
                get {
                    return this.columnTIME_ZONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DETAILSColumn {
                get {
                    return this.columnDETAILS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCATIONColumn {
                get {
                    return this.columnLOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMMUNICATIONColumn {
                get {
                    return this.columnCOMMUNICATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRow this[int index] {
                get {
                    return ((CONCENTRATORSRow)(this.Rows[index]));
                }
            }
            
            public event CONCENTRATORSRowChangeEventHandler CONCENTRATORSRowChanging;
            
            public event CONCENTRATORSRowChangeEventHandler CONCENTRATORSRowChanged;
            
            public event CONCENTRATORSRowChangeEventHandler CONCENTRATORSRowDeleting;
            
            public event CONCENTRATORSRowChangeEventHandler CONCENTRATORSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCONCENTRATORSRow(CONCENTRATORSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRow AddCONCENTRATORSRow(string CONCENTRATOR_NO, System.DateTime INSTALLATION_DATE, string TYPE, int MINUTS, int TREE_NO, int USER_NUMBER, double TIME_ZONE, string DETAILS, string LOCATION, string ADDRESS, byte COMMUNICATION) {
                CONCENTRATORSRow rowCONCENTRATORSRow = ((CONCENTRATORSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CONCENTRATOR_NO,
                        INSTALLATION_DATE,
                        TYPE,
                        MINUTS,
                        TREE_NO,
                        USER_NUMBER,
                        TIME_ZONE,
                        DETAILS,
                        LOCATION,
                        ADDRESS,
                        COMMUNICATION};
                rowCONCENTRATORSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCONCENTRATORSRow);
                return rowCONCENTRATORSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRow FindByCONCENTRATOR_NO(string CONCENTRATOR_NO) {
                return ((CONCENTRATORSRow)(this.Rows.Find(new object[] {
                            CONCENTRATOR_NO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CONCENTRATORSDataTable cln = ((CONCENTRATORSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CONCENTRATORSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCONCENTRATOR_NO = base.Columns["CONCENTRATOR_NO"];
                this.columnINSTALLATION_DATE = base.Columns["INSTALLATION_DATE"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnMINUTS = base.Columns["MINUTS"];
                this.columnTREE_NO = base.Columns["TREE_NO"];
                this.columnUSER_NUMBER = base.Columns["USER_NUMBER"];
                this.columnTIME_ZONE = base.Columns["TIME_ZONE"];
                this.columnDETAILS = base.Columns["DETAILS"];
                this.columnLOCATION = base.Columns["LOCATION"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnCOMMUNICATION = base.Columns["COMMUNICATION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCONCENTRATOR_NO = new global::System.Data.DataColumn("CONCENTRATOR_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONCENTRATOR_NO);
                this.columnINSTALLATION_DATE = new global::System.Data.DataColumn("INSTALLATION_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSTALLATION_DATE);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnMINUTS = new global::System.Data.DataColumn("MINUTS", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMINUTS);
                this.columnTREE_NO = new global::System.Data.DataColumn("TREE_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREE_NO);
                this.columnUSER_NUMBER = new global::System.Data.DataColumn("USER_NUMBER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NUMBER);
                this.columnTIME_ZONE = new global::System.Data.DataColumn("TIME_ZONE", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIME_ZONE);
                this.columnDETAILS = new global::System.Data.DataColumn("DETAILS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETAILS);
                this.columnLOCATION = new global::System.Data.DataColumn("LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCATION);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnCOMMUNICATION = new global::System.Data.DataColumn("COMMUNICATION", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMUNICATION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCONCENTRATOR_NO}, true));
                this.columnCONCENTRATOR_NO.AllowDBNull = false;
                this.columnCONCENTRATOR_NO.Unique = true;
                this.columnCONCENTRATOR_NO.MaxLength = 50;
                this.columnTYPE.MaxLength = 10;
                this.columnDETAILS.MaxLength = 50;
                this.columnLOCATION.MaxLength = 50;
                this.columnADDRESS.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRow NewCONCENTRATORSRow() {
                return ((CONCENTRATORSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CONCENTRATORSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CONCENTRATORSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CONCENTRATORSRowChanged != null)) {
                    this.CONCENTRATORSRowChanged(this, new CONCENTRATORSRowChangeEvent(((CONCENTRATORSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CONCENTRATORSRowChanging != null)) {
                    this.CONCENTRATORSRowChanging(this, new CONCENTRATORSRowChangeEvent(((CONCENTRATORSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CONCENTRATORSRowDeleted != null)) {
                    this.CONCENTRATORSRowDeleted(this, new CONCENTRATORSRowChangeEvent(((CONCENTRATORSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CONCENTRATORSRowDeleting != null)) {
                    this.CONCENTRATORSRowDeleting(this, new CONCENTRATORSRowChangeEvent(((CONCENTRATORSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCONCENTRATORSRow(CONCENTRATORSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CONCENTRATORSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class HOLIDAYSDataTable : global::System.Data.TypedTableBase<HOLIDAYSRow> {
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnDATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSDataTable() {
                this.TableName = "HOLIDAYS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HOLIDAYSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected HOLIDAYSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSRow this[int index] {
                get {
                    return ((HOLIDAYSRow)(this.Rows[index]));
                }
            }
            
            public event HOLIDAYSRowChangeEventHandler HOLIDAYSRowChanging;
            
            public event HOLIDAYSRowChangeEventHandler HOLIDAYSRowChanged;
            
            public event HOLIDAYSRowChangeEventHandler HOLIDAYSRowDeleting;
            
            public event HOLIDAYSRowChangeEventHandler HOLIDAYSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddHOLIDAYSRow(HOLIDAYSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSRow AddHOLIDAYSRow(int CODE, string NAME, int DATE) {
                HOLIDAYSRow rowHOLIDAYSRow = ((HOLIDAYSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CODE,
                        NAME,
                        DATE};
                rowHOLIDAYSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowHOLIDAYSRow);
                return rowHOLIDAYSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSRow FindByCODE(int CODE) {
                return ((HOLIDAYSRow)(this.Rows.Find(new object[] {
                            CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                HOLIDAYSDataTable cln = ((HOLIDAYSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new HOLIDAYSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE = base.Columns["CODE"];
                this.columnNAME = base.Columns["NAME"];
                this.columnDATE = base.Columns["DATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnDATE = new global::System.Data.DataColumn("DATE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCODE}, true));
                this.columnCODE.AllowDBNull = false;
                this.columnCODE.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSRow NewHOLIDAYSRow() {
                return ((HOLIDAYSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new HOLIDAYSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(HOLIDAYSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HOLIDAYSRowChanged != null)) {
                    this.HOLIDAYSRowChanged(this, new HOLIDAYSRowChangeEvent(((HOLIDAYSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HOLIDAYSRowChanging != null)) {
                    this.HOLIDAYSRowChanging(this, new HOLIDAYSRowChangeEvent(((HOLIDAYSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HOLIDAYSRowDeleted != null)) {
                    this.HOLIDAYSRowDeleted(this, new HOLIDAYSRowChangeEvent(((HOLIDAYSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HOLIDAYSRowDeleting != null)) {
                    this.HOLIDAYSRowDeleting(this, new HOLIDAYSRowChangeEvent(((HOLIDAYSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveHOLIDAYSRow(HOLIDAYSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "HOLIDAYSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ISRAEL_ELECTRICDataTable : global::System.Data.TypedTableBase<ISRAEL_ELECTRICRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnMETER;
            
            private global::System.Data.DataColumn columnDDATE;
            
            private global::System.Data.DataColumn columnRES;
            
            private global::System.Data.DataColumn columnRES3;
            
            private global::System.Data.DataColumn columnCurrentR;
            
            private global::System.Data.DataColumn columnCurrentS;
            
            private global::System.Data.DataColumn columnCurrentT;
            
            private global::System.Data.DataColumn columnVoltageR;
            
            private global::System.Data.DataColumn columnVoltageS;
            
            private global::System.Data.DataColumn columnVoltageT;
            
            private global::System.Data.DataColumn columnKVA_R;
            
            private global::System.Data.DataColumn columnKVA_S;
            
            private global::System.Data.DataColumn columnKVA_T;
            
            private global::System.Data.DataColumn columnKvarR;
            
            private global::System.Data.DataColumn columnKvarS;
            
            private global::System.Data.DataColumn columnKvarT;
            
            private global::System.Data.DataColumn columnkwR;
            
            private global::System.Data.DataColumn columnkwS;
            
            private global::System.Data.DataColumn columnkwT;
            
            private global::System.Data.DataColumn columnPF_R;
            
            private global::System.Data.DataColumn columnPF_S;
            
            private global::System.Data.DataColumn columnPF_T;
            
            private global::System.Data.DataColumn columnHz;
            
            private global::System.Data.DataColumn columnkw;
            
            private global::System.Data.DataColumn columnREACTIVE_APPRENT;
            
            private global::System.Data.DataColumn columnREACTIVE_DEMAND;
            
            private global::System.Data.DataColumn columnKVA;
            
            private global::System.Data.DataColumn columnKvar;
            
            private global::System.Data.DataColumn columnAmp;
            
            private global::System.Data.DataColumn columnVoltage;
            
            private global::System.Data.DataColumn columnPF;
            
            private global::System.Data.DataColumn columnkvarh_I;
            
            private global::System.Data.DataColumn columnkvarh_C;
            
            private global::System.Data.DataColumn columnkVAh;
            
            private global::System.Data.DataColumn columnMAX_DEMAND;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICDataTable() {
                this.TableName = "ISRAEL_ELECTRIC";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ISRAEL_ELECTRICDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ISRAEL_ELECTRICDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn METERColumn {
                get {
                    return this.columnMETER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DDATEColumn {
                get {
                    return this.columnDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESColumn {
                get {
                    return this.columnRES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RES3Column {
                get {
                    return this.columnRES3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentRColumn {
                get {
                    return this.columnCurrentR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentSColumn {
                get {
                    return this.columnCurrentS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentTColumn {
                get {
                    return this.columnCurrentT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltageRColumn {
                get {
                    return this.columnVoltageR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltageSColumn {
                get {
                    return this.columnVoltageS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltageTColumn {
                get {
                    return this.columnVoltageT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVA_RColumn {
                get {
                    return this.columnKVA_R;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVA_SColumn {
                get {
                    return this.columnKVA_S;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVA_TColumn {
                get {
                    return this.columnKVA_T;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KvarRColumn {
                get {
                    return this.columnKvarR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KvarSColumn {
                get {
                    return this.columnKvarS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KvarTColumn {
                get {
                    return this.columnKvarT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kwRColumn {
                get {
                    return this.columnkwR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kwSColumn {
                get {
                    return this.columnkwS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kwTColumn {
                get {
                    return this.columnkwT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PF_RColumn {
                get {
                    return this.columnPF_R;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PF_SColumn {
                get {
                    return this.columnPF_S;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PF_TColumn {
                get {
                    return this.columnPF_T;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HzColumn {
                get {
                    return this.columnHz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kwColumn {
                get {
                    return this.columnkw;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REACTIVE_APPRENTColumn {
                get {
                    return this.columnREACTIVE_APPRENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REACTIVE_DEMANDColumn {
                get {
                    return this.columnREACTIVE_DEMAND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KVAColumn {
                get {
                    return this.columnKVA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KvarColumn {
                get {
                    return this.columnKvar;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmpColumn {
                get {
                    return this.columnAmp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoltageColumn {
                get {
                    return this.columnVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFColumn {
                get {
                    return this.columnPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kvarh_IColumn {
                get {
                    return this.columnkvarh_I;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kvarh_CColumn {
                get {
                    return this.columnkvarh_C;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kVAhColumn {
                get {
                    return this.columnkVAh;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAX_DEMANDColumn {
                get {
                    return this.columnMAX_DEMAND;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRow this[int index] {
                get {
                    return ((ISRAEL_ELECTRICRow)(this.Rows[index]));
                }
            }
            
            public event ISRAEL_ELECTRICRowChangeEventHandler ISRAEL_ELECTRICRowChanging;
            
            public event ISRAEL_ELECTRICRowChangeEventHandler ISRAEL_ELECTRICRowChanged;
            
            public event ISRAEL_ELECTRICRowChangeEventHandler ISRAEL_ELECTRICRowDeleting;
            
            public event ISRAEL_ELECTRICRowChangeEventHandler ISRAEL_ELECTRICRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddISRAEL_ELECTRICRow(ISRAEL_ELECTRICRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRow AddISRAEL_ELECTRICRow(
                        METERSRow parentMETERSRowByFK_ISRAEL_ELECTRIC_METERS, 
                        System.DateTime DDATE, 
                        byte RES, 
                        byte RES3, 
                        double CurrentR, 
                        double CurrentS, 
                        double CurrentT, 
                        double VoltageR, 
                        double VoltageS, 
                        double VoltageT, 
                        double KVA_R, 
                        double KVA_S, 
                        double KVA_T, 
                        double KvarR, 
                        double KvarS, 
                        double KvarT, 
                        double kwR, 
                        double kwS, 
                        double kwT, 
                        double PF_R, 
                        double PF_S, 
                        double PF_T, 
                        double Hz, 
                        double kw, 
                        double REACTIVE_APPRENT, 
                        double REACTIVE_DEMAND, 
                        double KVA, 
                        double Kvar, 
                        double Amp, 
                        double Voltage, 
                        double PF, 
                        double kvarh_I, 
                        double kvarh_C, 
                        double kVAh, 
                        double MAX_DEMAND) {
                ISRAEL_ELECTRICRow rowISRAEL_ELECTRICRow = ((ISRAEL_ELECTRICRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        DDATE,
                        RES,
                        RES3,
                        CurrentR,
                        CurrentS,
                        CurrentT,
                        VoltageR,
                        VoltageS,
                        VoltageT,
                        KVA_R,
                        KVA_S,
                        KVA_T,
                        KvarR,
                        KvarS,
                        KvarT,
                        kwR,
                        kwS,
                        kwT,
                        PF_R,
                        PF_S,
                        PF_T,
                        Hz,
                        kw,
                        REACTIVE_APPRENT,
                        REACTIVE_DEMAND,
                        KVA,
                        Kvar,
                        Amp,
                        Voltage,
                        PF,
                        kvarh_I,
                        kvarh_C,
                        kVAh,
                        MAX_DEMAND};
                if ((parentMETERSRowByFK_ISRAEL_ELECTRIC_METERS != null)) {
                    columnValuesArray[1] = parentMETERSRowByFK_ISRAEL_ELECTRIC_METERS[0];
                }
                rowISRAEL_ELECTRICRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowISRAEL_ELECTRICRow);
                return rowISRAEL_ELECTRICRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRow FindByID(int ID) {
                return ((ISRAEL_ELECTRICRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ISRAEL_ELECTRICDataTable cln = ((ISRAEL_ELECTRICDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ISRAEL_ELECTRICDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMETER = base.Columns["METER"];
                this.columnDDATE = base.Columns["DDATE"];
                this.columnRES = base.Columns["RES"];
                this.columnRES3 = base.Columns["RES3"];
                this.columnCurrentR = base.Columns["CurrentR"];
                this.columnCurrentS = base.Columns["CurrentS"];
                this.columnCurrentT = base.Columns["CurrentT"];
                this.columnVoltageR = base.Columns["VoltageR"];
                this.columnVoltageS = base.Columns["VoltageS"];
                this.columnVoltageT = base.Columns["VoltageT"];
                this.columnKVA_R = base.Columns["KVA_R"];
                this.columnKVA_S = base.Columns["KVA_S"];
                this.columnKVA_T = base.Columns["KVA_T"];
                this.columnKvarR = base.Columns["KvarR"];
                this.columnKvarS = base.Columns["KvarS"];
                this.columnKvarT = base.Columns["KvarT"];
                this.columnkwR = base.Columns["kwR"];
                this.columnkwS = base.Columns["kwS"];
                this.columnkwT = base.Columns["kwT"];
                this.columnPF_R = base.Columns["PF_R"];
                this.columnPF_S = base.Columns["PF_S"];
                this.columnPF_T = base.Columns["PF_T"];
                this.columnHz = base.Columns["Hz"];
                this.columnkw = base.Columns["kw"];
                this.columnREACTIVE_APPRENT = base.Columns["REACTIVE_APPRENT"];
                this.columnREACTIVE_DEMAND = base.Columns["REACTIVE_DEMAND"];
                this.columnKVA = base.Columns["KVA"];
                this.columnKvar = base.Columns["Kvar"];
                this.columnAmp = base.Columns["Amp"];
                this.columnVoltage = base.Columns["Voltage"];
                this.columnPF = base.Columns["PF"];
                this.columnkvarh_I = base.Columns["kvarh_I"];
                this.columnkvarh_C = base.Columns["kvarh_C"];
                this.columnkVAh = base.Columns["kVAh"];
                this.columnMAX_DEMAND = base.Columns["MAX_DEMAND"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMETER = new global::System.Data.DataColumn("METER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMETER);
                this.columnDDATE = new global::System.Data.DataColumn("DDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDDATE);
                this.columnRES = new global::System.Data.DataColumn("RES", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRES);
                this.columnRES3 = new global::System.Data.DataColumn("RES3", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRES3);
                this.columnCurrentR = new global::System.Data.DataColumn("CurrentR", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentR);
                this.columnCurrentS = new global::System.Data.DataColumn("CurrentS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentS);
                this.columnCurrentT = new global::System.Data.DataColumn("CurrentT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentT);
                this.columnVoltageR = new global::System.Data.DataColumn("VoltageR", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltageR);
                this.columnVoltageS = new global::System.Data.DataColumn("VoltageS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltageS);
                this.columnVoltageT = new global::System.Data.DataColumn("VoltageT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltageT);
                this.columnKVA_R = new global::System.Data.DataColumn("KVA_R", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVA_R);
                this.columnKVA_S = new global::System.Data.DataColumn("KVA_S", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVA_S);
                this.columnKVA_T = new global::System.Data.DataColumn("KVA_T", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVA_T);
                this.columnKvarR = new global::System.Data.DataColumn("KvarR", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKvarR);
                this.columnKvarS = new global::System.Data.DataColumn("KvarS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKvarS);
                this.columnKvarT = new global::System.Data.DataColumn("KvarT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKvarT);
                this.columnkwR = new global::System.Data.DataColumn("kwR", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkwR);
                this.columnkwS = new global::System.Data.DataColumn("kwS", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkwS);
                this.columnkwT = new global::System.Data.DataColumn("kwT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkwT);
                this.columnPF_R = new global::System.Data.DataColumn("PF_R", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF_R);
                this.columnPF_S = new global::System.Data.DataColumn("PF_S", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF_S);
                this.columnPF_T = new global::System.Data.DataColumn("PF_T", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF_T);
                this.columnHz = new global::System.Data.DataColumn("Hz", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHz);
                this.columnkw = new global::System.Data.DataColumn("kw", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkw);
                this.columnREACTIVE_APPRENT = new global::System.Data.DataColumn("REACTIVE_APPRENT", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREACTIVE_APPRENT);
                this.columnREACTIVE_DEMAND = new global::System.Data.DataColumn("REACTIVE_DEMAND", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREACTIVE_DEMAND);
                this.columnKVA = new global::System.Data.DataColumn("KVA", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKVA);
                this.columnKvar = new global::System.Data.DataColumn("Kvar", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKvar);
                this.columnAmp = new global::System.Data.DataColumn("Amp", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmp);
                this.columnVoltage = new global::System.Data.DataColumn("Voltage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoltage);
                this.columnPF = new global::System.Data.DataColumn("PF", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF);
                this.columnkvarh_I = new global::System.Data.DataColumn("kvarh_I", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkvarh_I);
                this.columnkvarh_C = new global::System.Data.DataColumn("kvarh_C", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkvarh_C);
                this.columnkVAh = new global::System.Data.DataColumn("kVAh", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkVAh);
                this.columnMAX_DEMAND = new global::System.Data.DataColumn("MAX_DEMAND", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAX_DEMAND);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnMETER.AllowDBNull = false;
                this.columnDDATE.AllowDBNull = false;
                this.columnRES.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRow NewISRAEL_ELECTRICRow() {
                return ((ISRAEL_ELECTRICRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ISRAEL_ELECTRICRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ISRAEL_ELECTRICRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ISRAEL_ELECTRICRowChanged != null)) {
                    this.ISRAEL_ELECTRICRowChanged(this, new ISRAEL_ELECTRICRowChangeEvent(((ISRAEL_ELECTRICRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ISRAEL_ELECTRICRowChanging != null)) {
                    this.ISRAEL_ELECTRICRowChanging(this, new ISRAEL_ELECTRICRowChangeEvent(((ISRAEL_ELECTRICRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ISRAEL_ELECTRICRowDeleted != null)) {
                    this.ISRAEL_ELECTRICRowDeleted(this, new ISRAEL_ELECTRICRowChangeEvent(((ISRAEL_ELECTRICRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ISRAEL_ELECTRICRowDeleting != null)) {
                    this.ISRAEL_ELECTRICRowDeleting(this, new ISRAEL_ELECTRICRowChangeEvent(((ISRAEL_ELECTRICRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveISRAEL_ELECTRICRow(ISRAEL_ELECTRICRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ISRAEL_ELECTRICDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class METER_TYPEDataTable : global::System.Data.TypedTableBase<METER_TYPERow> {
            
            private global::System.Data.DataColumn columnCODE_METER_TYPE;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPEDataTable() {
                this.TableName = "METER_TYPE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal METER_TYPEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected METER_TYPEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE_METER_TYPEColumn {
                get {
                    return this.columnCODE_METER_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERow this[int index] {
                get {
                    return ((METER_TYPERow)(this.Rows[index]));
                }
            }
            
            public event METER_TYPERowChangeEventHandler METER_TYPERowChanging;
            
            public event METER_TYPERowChangeEventHandler METER_TYPERowChanged;
            
            public event METER_TYPERowChangeEventHandler METER_TYPERowDeleting;
            
            public event METER_TYPERowChangeEventHandler METER_TYPERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMETER_TYPERow(METER_TYPERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERow AddMETER_TYPERow(int CODE_METER_TYPE, string DESCRIPTION) {
                METER_TYPERow rowMETER_TYPERow = ((METER_TYPERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CODE_METER_TYPE,
                        DESCRIPTION};
                rowMETER_TYPERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMETER_TYPERow);
                return rowMETER_TYPERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERow FindByCODE_METER_TYPE(int CODE_METER_TYPE) {
                return ((METER_TYPERow)(this.Rows.Find(new object[] {
                            CODE_METER_TYPE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                METER_TYPEDataTable cln = ((METER_TYPEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new METER_TYPEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE_METER_TYPE = base.Columns["CODE_METER_TYPE"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE_METER_TYPE = new global::System.Data.DataColumn("CODE_METER_TYPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE_METER_TYPE);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCODE_METER_TYPE}, true));
                this.columnCODE_METER_TYPE.AllowDBNull = false;
                this.columnCODE_METER_TYPE.Unique = true;
                this.columnDESCRIPTION.AllowDBNull = false;
                this.columnDESCRIPTION.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERow NewMETER_TYPERow() {
                return ((METER_TYPERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new METER_TYPERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(METER_TYPERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.METER_TYPERowChanged != null)) {
                    this.METER_TYPERowChanged(this, new METER_TYPERowChangeEvent(((METER_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.METER_TYPERowChanging != null)) {
                    this.METER_TYPERowChanging(this, new METER_TYPERowChangeEvent(((METER_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.METER_TYPERowDeleted != null)) {
                    this.METER_TYPERowDeleted(this, new METER_TYPERowChangeEvent(((METER_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.METER_TYPERowDeleting != null)) {
                    this.METER_TYPERowDeleting(this, new METER_TYPERowChangeEvent(((METER_TYPERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMETER_TYPERow(METER_TYPERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "METER_TYPEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class METERSDataTable : global::System.Data.TypedTableBase<METERSRow> {
            
            private global::System.Data.DataColumn columnDB_UNIQUE_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnTREE_NO;
            
            private global::System.Data.DataColumn columnMETER_TYPE;
            
            private global::System.Data.DataColumn columnUSER_NO;
            
            private global::System.Data.DataColumn columnADRESS;
            
            private global::System.Data.DataColumn columnCONCENTRATOR;
            
            private global::System.Data.DataColumn columnINSTALLATION_DATE;
            
            private global::System.Data.DataColumn columnDETAILS;
            
            private global::System.Data.DataColumn columnSERIAL_NO;
            
            private global::System.Data.DataColumn columnMETER_ID;
            
            private global::System.Data.DataColumn columnPARAMETER;
            
            private global::System.Data.DataColumn columnCOMMUNICATION;
            
            private global::System.Data.DataColumn columnBASE_VALUE;
            
            private global::System.Data.DataColumn columnPULSE_RATIO;
            
            private global::System.Data.DataColumn columnCT_RATIO1;
            
            private global::System.Data.DataColumn columnCT_RATIO2;
            
            private global::System.Data.DataColumn columnNUMBER_OF_CT;
            
            private global::System.Data.DataColumn columnPARTIAL_FACTOR;
            
            private global::System.Data.DataColumn columnMULTIPLY;
            
            private global::System.Data.DataColumn columnVIRTUAL;
            
            private global::System.Data.DataColumn columnMAX;
            
            private global::System.Data.DataColumn columnMIN;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSDataTable() {
                this.TableName = "METERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal METERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected METERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DB_UNIQUE_IDColumn {
                get {
                    return this.columnDB_UNIQUE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREE_NOColumn {
                get {
                    return this.columnTREE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn METER_TYPEColumn {
                get {
                    return this.columnMETER_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USER_NOColumn {
                get {
                    return this.columnUSER_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADRESSColumn {
                get {
                    return this.columnADRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONCENTRATORColumn {
                get {
                    return this.columnCONCENTRATOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INSTALLATION_DATEColumn {
                get {
                    return this.columnINSTALLATION_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DETAILSColumn {
                get {
                    return this.columnDETAILS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERIAL_NOColumn {
                get {
                    return this.columnSERIAL_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn METER_IDColumn {
                get {
                    return this.columnMETER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARAMETERColumn {
                get {
                    return this.columnPARAMETER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMMUNICATIONColumn {
                get {
                    return this.columnCOMMUNICATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_VALUEColumn {
                get {
                    return this.columnBASE_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PULSE_RATIOColumn {
                get {
                    return this.columnPULSE_RATIO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CT_RATIO1Column {
                get {
                    return this.columnCT_RATIO1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CT_RATIO2Column {
                get {
                    return this.columnCT_RATIO2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_OF_CTColumn {
                get {
                    return this.columnNUMBER_OF_CT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARTIAL_FACTORColumn {
                get {
                    return this.columnPARTIAL_FACTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MULTIPLYColumn {
                get {
                    return this.columnMULTIPLY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VIRTUALColumn {
                get {
                    return this.columnVIRTUAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAXColumn {
                get {
                    return this.columnMAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MINColumn {
                get {
                    return this.columnMIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow this[int index] {
                get {
                    return ((METERSRow)(this.Rows[index]));
                }
            }
            
            public event METERSRowChangeEventHandler METERSRowChanging;
            
            public event METERSRowChangeEventHandler METERSRowChanged;
            
            public event METERSRowChangeEventHandler METERSRowDeleting;
            
            public event METERSRowChangeEventHandler METERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMETERSRow(METERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow AddMETERSRow(
                        int DB_UNIQUE_ID, 
                        string NAME, 
                        TREERow parentTREERowByFK_METERS_TREE, 
                        METER_TYPERow parentMETER_TYPERowByFK_METERS_METER_TYPE, 
                        int USER_NO, 
                        string ADRESS, 
                        CONCENTRATORSRow parentCONCENTRATORSRowByFK_METERS_CONCENTRATORS, 
                        System.DateTime INSTALLATION_DATE, 
                        string DETAILS, 
                        string SERIAL_NO, 
                        string METER_ID, 
                        PARAMETERSRow parentPARAMETERSRowByFK_METERS_PARAMETERS, 
                        COMUNICATION_TYPERow parentCOMUNICATION_TYPERowByFK_METERS_COMUNICATION_TYPE, 
                        int BASE_VALUE, 
                        double PULSE_RATIO, 
                        short CT_RATIO1, 
                        short CT_RATIO2, 
                        byte NUMBER_OF_CT, 
                        double PARTIAL_FACTOR, 
                        double MULTIPLY, 
                        short VIRTUAL, 
                        double MAX, 
                        double MIN) {
                METERSRow rowMETERSRow = ((METERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DB_UNIQUE_ID,
                        NAME,
                        null,
                        null,
                        USER_NO,
                        ADRESS,
                        null,
                        INSTALLATION_DATE,
                        DETAILS,
                        SERIAL_NO,
                        METER_ID,
                        null,
                        null,
                        BASE_VALUE,
                        PULSE_RATIO,
                        CT_RATIO1,
                        CT_RATIO2,
                        NUMBER_OF_CT,
                        PARTIAL_FACTOR,
                        MULTIPLY,
                        VIRTUAL,
                        MAX,
                        MIN};
                if ((parentTREERowByFK_METERS_TREE != null)) {
                    columnValuesArray[2] = parentTREERowByFK_METERS_TREE[0];
                }
                if ((parentMETER_TYPERowByFK_METERS_METER_TYPE != null)) {
                    columnValuesArray[3] = parentMETER_TYPERowByFK_METERS_METER_TYPE[0];
                }
                if ((parentCONCENTRATORSRowByFK_METERS_CONCENTRATORS != null)) {
                    columnValuesArray[6] = parentCONCENTRATORSRowByFK_METERS_CONCENTRATORS[0];
                }
                if ((parentPARAMETERSRowByFK_METERS_PARAMETERS != null)) {
                    columnValuesArray[11] = parentPARAMETERSRowByFK_METERS_PARAMETERS[0];
                }
                if ((parentCOMUNICATION_TYPERowByFK_METERS_COMUNICATION_TYPE != null)) {
                    columnValuesArray[12] = parentCOMUNICATION_TYPERowByFK_METERS_COMUNICATION_TYPE[0];
                }
                rowMETERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMETERSRow);
                return rowMETERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow FindByDB_UNIQUE_ID(int DB_UNIQUE_ID) {
                return ((METERSRow)(this.Rows.Find(new object[] {
                            DB_UNIQUE_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                METERSDataTable cln = ((METERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new METERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDB_UNIQUE_ID = base.Columns["DB_UNIQUE_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnTREE_NO = base.Columns["TREE_NO"];
                this.columnMETER_TYPE = base.Columns["METER_TYPE"];
                this.columnUSER_NO = base.Columns["USER_NO"];
                this.columnADRESS = base.Columns["ADRESS"];
                this.columnCONCENTRATOR = base.Columns["CONCENTRATOR"];
                this.columnINSTALLATION_DATE = base.Columns["INSTALLATION_DATE"];
                this.columnDETAILS = base.Columns["DETAILS"];
                this.columnSERIAL_NO = base.Columns["SERIAL_NO"];
                this.columnMETER_ID = base.Columns["METER_ID"];
                this.columnPARAMETER = base.Columns["PARAMETER"];
                this.columnCOMMUNICATION = base.Columns["COMMUNICATION"];
                this.columnBASE_VALUE = base.Columns["BASE_VALUE"];
                this.columnPULSE_RATIO = base.Columns["PULSE_RATIO"];
                this.columnCT_RATIO1 = base.Columns["CT_RATIO1"];
                this.columnCT_RATIO2 = base.Columns["CT_RATIO2"];
                this.columnNUMBER_OF_CT = base.Columns["NUMBER_OF_CT"];
                this.columnPARTIAL_FACTOR = base.Columns["PARTIAL_FACTOR"];
                this.columnMULTIPLY = base.Columns["MULTIPLY"];
                this.columnVIRTUAL = base.Columns["VIRTUAL"];
                this.columnMAX = base.Columns["MAX"];
                this.columnMIN = base.Columns["MIN"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDB_UNIQUE_ID = new global::System.Data.DataColumn("DB_UNIQUE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDB_UNIQUE_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnTREE_NO = new global::System.Data.DataColumn("TREE_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREE_NO);
                this.columnMETER_TYPE = new global::System.Data.DataColumn("METER_TYPE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMETER_TYPE);
                this.columnUSER_NO = new global::System.Data.DataColumn("USER_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSER_NO);
                this.columnADRESS = new global::System.Data.DataColumn("ADRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADRESS);
                this.columnCONCENTRATOR = new global::System.Data.DataColumn("CONCENTRATOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONCENTRATOR);
                this.columnINSTALLATION_DATE = new global::System.Data.DataColumn("INSTALLATION_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINSTALLATION_DATE);
                this.columnDETAILS = new global::System.Data.DataColumn("DETAILS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDETAILS);
                this.columnSERIAL_NO = new global::System.Data.DataColumn("SERIAL_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIAL_NO);
                this.columnMETER_ID = new global::System.Data.DataColumn("METER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMETER_ID);
                this.columnPARAMETER = new global::System.Data.DataColumn("PARAMETER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARAMETER);
                this.columnCOMMUNICATION = new global::System.Data.DataColumn("COMMUNICATION", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMUNICATION);
                this.columnBASE_VALUE = new global::System.Data.DataColumn("BASE_VALUE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_VALUE);
                this.columnPULSE_RATIO = new global::System.Data.DataColumn("PULSE_RATIO", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPULSE_RATIO);
                this.columnCT_RATIO1 = new global::System.Data.DataColumn("CT_RATIO1", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCT_RATIO1);
                this.columnCT_RATIO2 = new global::System.Data.DataColumn("CT_RATIO2", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCT_RATIO2);
                this.columnNUMBER_OF_CT = new global::System.Data.DataColumn("NUMBER_OF_CT", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_OF_CT);
                this.columnPARTIAL_FACTOR = new global::System.Data.DataColumn("PARTIAL_FACTOR", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARTIAL_FACTOR);
                this.columnMULTIPLY = new global::System.Data.DataColumn("MULTIPLY", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMULTIPLY);
                this.columnVIRTUAL = new global::System.Data.DataColumn("VIRTUAL", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVIRTUAL);
                this.columnMAX = new global::System.Data.DataColumn("MAX", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAX);
                this.columnMIN = new global::System.Data.DataColumn("MIN", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIN);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDB_UNIQUE_ID}, true));
                this.columnDB_UNIQUE_ID.AllowDBNull = false;
                this.columnDB_UNIQUE_ID.Unique = true;
                this.columnNAME.MaxLength = 50;
                this.columnADRESS.MaxLength = 50;
                this.columnCONCENTRATOR.MaxLength = 50;
                this.columnDETAILS.MaxLength = 50;
                this.columnSERIAL_NO.MaxLength = 50;
                this.columnMETER_ID.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow NewMETERSRow() {
                return ((METERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new METERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(METERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.METERSRowChanged != null)) {
                    this.METERSRowChanged(this, new METERSRowChangeEvent(((METERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.METERSRowChanging != null)) {
                    this.METERSRowChanging(this, new METERSRowChangeEvent(((METERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.METERSRowDeleted != null)) {
                    this.METERSRowDeleted(this, new METERSRowChangeEvent(((METERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.METERSRowDeleting != null)) {
                    this.METERSRowDeleting(this, new METERSRowChangeEvent(((METERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMETERSRow(METERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "METERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PARAMETERSDataTable : global::System.Data.TypedTableBase<PARAMETERSRow> {
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnIsElectric;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSDataTable() {
                this.TableName = "PARAMETERS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARAMETERSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PARAMETERSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsElectricColumn {
                get {
                    return this.columnIsElectric;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow this[int index] {
                get {
                    return ((PARAMETERSRow)(this.Rows[index]));
                }
            }
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowChanging;
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowChanged;
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowDeleting;
            
            public event PARAMETERSRowChangeEventHandler PARAMETERSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPARAMETERSRow(PARAMETERSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow AddPARAMETERSRow(int CODE, string NAME, bool IsElectric) {
                PARAMETERSRow rowPARAMETERSRow = ((PARAMETERSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CODE,
                        NAME,
                        IsElectric};
                rowPARAMETERSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPARAMETERSRow);
                return rowPARAMETERSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow FindByCODE(int CODE) {
                return ((PARAMETERSRow)(this.Rows.Find(new object[] {
                            CODE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PARAMETERSDataTable cln = ((PARAMETERSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PARAMETERSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCODE = base.Columns["CODE"];
                this.columnNAME = base.Columns["NAME"];
                this.columnIsElectric = base.Columns["IsElectric"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnIsElectric = new global::System.Data.DataColumn("IsElectric", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsElectric);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCODE}, true));
                this.columnCODE.AllowDBNull = false;
                this.columnCODE.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow NewPARAMETERSRow() {
                return ((PARAMETERSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PARAMETERSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PARAMETERSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PARAMETERSRowChanged != null)) {
                    this.PARAMETERSRowChanged(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PARAMETERSRowChanging != null)) {
                    this.PARAMETERSRowChanging(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PARAMETERSRowDeleted != null)) {
                    this.PARAMETERSRowDeleted(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PARAMETERSRowDeleting != null)) {
                    this.PARAMETERSRowDeleting(this, new PARAMETERSRowChangeEvent(((PARAMETERSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePARAMETERSRow(PARAMETERSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PARAMETERSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TREEDataTable : global::System.Data.TypedTableBase<TREERow> {
            
            private global::System.Data.DataColumn columnTREE_NO;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnTREE_LEVEL;
            
            private global::System.Data.DataColumn columnPARENT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREEDataTable() {
                this.TableName = "TREE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TREEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TREEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREE_NOColumn {
                get {
                    return this.columnTREE_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREE_LEVELColumn {
                get {
                    return this.columnTREE_LEVEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PARENTColumn {
                get {
                    return this.columnPARENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow this[int index] {
                get {
                    return ((TREERow)(this.Rows[index]));
                }
            }
            
            public event TREERowChangeEventHandler TREERowChanging;
            
            public event TREERowChangeEventHandler TREERowChanged;
            
            public event TREERowChangeEventHandler TREERowDeleting;
            
            public event TREERowChangeEventHandler TREERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTREERow(TREERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow AddTREERow(int TREE_NO, string NAME, short TREE_LEVEL, TREERow parentTREERowByFK_TREE_TREE) {
                TREERow rowTREERow = ((TREERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TREE_NO,
                        NAME,
                        TREE_LEVEL,
                        null};
                if ((parentTREERowByFK_TREE_TREE != null)) {
                    columnValuesArray[3] = parentTREERowByFK_TREE_TREE[0];
                }
                rowTREERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTREERow);
                return rowTREERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow FindByTREE_NO(int TREE_NO) {
                return ((TREERow)(this.Rows.Find(new object[] {
                            TREE_NO})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TREEDataTable cln = ((TREEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TREEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTREE_NO = base.Columns["TREE_NO"];
                this.columnNAME = base.Columns["NAME"];
                this.columnTREE_LEVEL = base.Columns["TREE_LEVEL"];
                this.columnPARENT = base.Columns["PARENT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTREE_NO = new global::System.Data.DataColumn("TREE_NO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREE_NO);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnTREE_LEVEL = new global::System.Data.DataColumn("TREE_LEVEL", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREE_LEVEL);
                this.columnPARENT = new global::System.Data.DataColumn("PARENT", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPARENT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTREE_NO}, true));
                this.columnTREE_NO.AllowDBNull = false;
                this.columnTREE_NO.Unique = true;
                this.columnNAME.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow NewTREERow() {
                return ((TREERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TREERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TREERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TREERowChanged != null)) {
                    this.TREERowChanged(this, new TREERowChangeEvent(((TREERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TREERowChanging != null)) {
                    this.TREERowChanging(this, new TREERowChangeEvent(((TREERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TREERowDeleted != null)) {
                    this.TREERowDeleted(this, new TREERowChangeEvent(((TREERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TREERowDeleting != null)) {
                    this.TREERowDeleting(this, new TREERowChangeEvent(((TREERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTREERow(TREERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TREEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ISRAEL_READINGDataTable : global::System.Data.TypedTableBase<ISRAEL_READINGRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnMETER;
            
            private global::System.Data.DataColumn columnRES;
            
            private global::System.Data.DataColumn columnRES3;
            
            private global::System.Data.DataColumn columnDDATE;
            
            private global::System.Data.DataColumn columnPEAK;
            
            private global::System.Data.DataColumn columnHIGH;
            
            private global::System.Data.DataColumn columnLOW;
            
            private global::System.Data.DataColumn columnD;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGDataTable() {
                this.TableName = "ISRAEL_READING";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ISRAEL_READINGDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ISRAEL_READINGDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn METERColumn {
                get {
                    return this.columnMETER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESColumn {
                get {
                    return this.columnRES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RES3Column {
                get {
                    return this.columnRES3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DDATEColumn {
                get {
                    return this.columnDDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PEAKColumn {
                get {
                    return this.columnPEAK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HIGHColumn {
                get {
                    return this.columnHIGH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOWColumn {
                get {
                    return this.columnLOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DColumn {
                get {
                    return this.columnD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRow this[int index] {
                get {
                    return ((ISRAEL_READINGRow)(this.Rows[index]));
                }
            }
            
            public event ISRAEL_READINGRowChangeEventHandler ISRAEL_READINGRowChanging;
            
            public event ISRAEL_READINGRowChangeEventHandler ISRAEL_READINGRowChanged;
            
            public event ISRAEL_READINGRowChangeEventHandler ISRAEL_READINGRowDeleting;
            
            public event ISRAEL_READINGRowChangeEventHandler ISRAEL_READINGRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddISRAEL_READINGRow(ISRAEL_READINGRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRow AddISRAEL_READINGRow(METERSRow parentMETERSRowByFK_ISRAEL_READING_METERS, byte RES, byte RES3, System.DateTime DDATE, double PEAK, double HIGH, double LOW, double D) {
                ISRAEL_READINGRow rowISRAEL_READINGRow = ((ISRAEL_READINGRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        RES,
                        RES3,
                        DDATE,
                        PEAK,
                        HIGH,
                        LOW,
                        D};
                if ((parentMETERSRowByFK_ISRAEL_READING_METERS != null)) {
                    columnValuesArray[1] = parentMETERSRowByFK_ISRAEL_READING_METERS[0];
                }
                rowISRAEL_READINGRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowISRAEL_READINGRow);
                return rowISRAEL_READINGRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRow FindByID(int ID) {
                return ((ISRAEL_READINGRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ISRAEL_READINGDataTable cln = ((ISRAEL_READINGDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ISRAEL_READINGDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnMETER = base.Columns["METER"];
                this.columnRES = base.Columns["RES"];
                this.columnRES3 = base.Columns["RES3"];
                this.columnDDATE = base.Columns["DDATE"];
                this.columnPEAK = base.Columns["PEAK"];
                this.columnHIGH = base.Columns["HIGH"];
                this.columnLOW = base.Columns["LOW"];
                this.columnD = base.Columns["D"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnMETER = new global::System.Data.DataColumn("METER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMETER);
                this.columnRES = new global::System.Data.DataColumn("RES", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRES);
                this.columnRES3 = new global::System.Data.DataColumn("RES3", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRES3);
                this.columnDDATE = new global::System.Data.DataColumn("DDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDDATE);
                this.columnPEAK = new global::System.Data.DataColumn("PEAK", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPEAK);
                this.columnHIGH = new global::System.Data.DataColumn("HIGH", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHIGH);
                this.columnLOW = new global::System.Data.DataColumn("LOW", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOW);
                this.columnD = new global::System.Data.DataColumn("D", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnMETER.AllowDBNull = false;
                this.columnRES.AllowDBNull = false;
                this.columnRES3.AllowDBNull = false;
                this.columnDDATE.AllowDBNull = false;
                this.columnPEAK.AllowDBNull = false;
                this.columnHIGH.AllowDBNull = false;
                this.columnLOW.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRow NewISRAEL_READINGRow() {
                return ((ISRAEL_READINGRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ISRAEL_READINGRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ISRAEL_READINGRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ISRAEL_READINGRowChanged != null)) {
                    this.ISRAEL_READINGRowChanged(this, new ISRAEL_READINGRowChangeEvent(((ISRAEL_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ISRAEL_READINGRowChanging != null)) {
                    this.ISRAEL_READINGRowChanging(this, new ISRAEL_READINGRowChangeEvent(((ISRAEL_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ISRAEL_READINGRowDeleted != null)) {
                    this.ISRAEL_READINGRowDeleted(this, new ISRAEL_READINGRowChangeEvent(((ISRAEL_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ISRAEL_READINGRowDeleting != null)) {
                    this.ISRAEL_READINGRowDeleting(this, new ISRAEL_READINGRowChangeEvent(((ISRAEL_READINGRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveISRAEL_READINGRow(ISRAEL_READINGRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                GadirDataSet ds = new GadirDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ISRAEL_READINGDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ALARM_LISTRow : global::System.Data.DataRow {
            
            private ALARM_LISTDataTable tableALARM_LIST;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ALARM_LISTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableALARM_LIST = ((ALARM_LISTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableALARM_LIST.IDColumn]));
                }
                set {
                    this[this.tableALARM_LIST.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MeterID {
                get {
                    return ((int)(this[this.tableALARM_LIST.MeterIDColumn]));
                }
                set {
                    this[this.tableALARM_LIST.MeterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConcentratorID {
                get {
                    return ((string)(this[this.tableALARM_LIST.ConcentratorIDColumn]));
                }
                set {
                    this[this.tableALARM_LIST.ConcentratorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Code {
                get {
                    return ((byte)(this[this.tableALARM_LIST.CodeColumn]));
                }
                set {
                    this[this.tableALARM_LIST.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Time {
                get {
                    return ((global::System.DateTime)(this[this.tableALARM_LIST.TimeColumn]));
                }
                set {
                    this[this.tableALARM_LIST.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Status {
                get {
                    try {
                        return ((byte)(this[this.tableALARM_LIST.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ALARM_LIST\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableALARM_LIST.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableALARM_LIST.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableALARM_LIST.StatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class USERSRow : global::System.Data.DataRow {
            
            private USERSDataTable tableUSERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal USERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUSERS = ((USERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CODE {
                get {
                    return ((int)(this[this.tableUSERS.CODEColumn]));
                }
                set {
                    this[this.tableUSERS.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string USER_NAME {
                get {
                    return ((string)(this[this.tableUSERS.USER_NAMEColumn]));
                }
                set {
                    this[this.tableUSERS.USER_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PASSWORD {
                get {
                    return ((string)(this[this.tableUSERS.PASSWORDColumn]));
                }
                set {
                    this[this.tableUSERS.PASSWORDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string METER_NO {
                get {
                    try {
                        return ((string)(this[this.tableUSERS.METER_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'METER_NO\' in table \'USERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERS.METER_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TREE_NO {
                get {
                    return ((int)(this[this.tableUSERS.TREE_NOColumn]));
                }
                set {
                    this[this.tableUSERS.TREE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AUTORIZ {
                get {
                    try {
                        return ((string)(this[this.tableUSERS.AUTORIZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AUTORIZ\' in table \'USERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERS.AUTORIZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short LANG {
                get {
                    return ((short)(this[this.tableUSERS.LANGColumn]));
                }
                set {
                    this[this.tableUSERS.LANGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CLIENT_SUG {
                get {
                    try {
                        return ((string)(this[this.tableUSERS.CLIENT_SUGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CLIENT_SUG\' in table \'USERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERS.CLIENT_SUGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOG_PATH {
                get {
                    try {
                        return ((string)(this[this.tableUSERS.LOG_PATHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOG_PATH\' in table \'USERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUSERS.LOG_PATHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMETER_NONull() {
                return this.IsNull(this.tableUSERS.METER_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMETER_NONull() {
                this[this.tableUSERS.METER_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAUTORIZNull() {
                return this.IsNull(this.tableUSERS.AUTORIZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAUTORIZNull() {
                this[this.tableUSERS.AUTORIZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCLIENT_SUGNull() {
                return this.IsNull(this.tableUSERS.CLIENT_SUGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCLIENT_SUGNull() {
                this[this.tableUSERS.CLIENT_SUGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOG_PATHNull() {
                return this.IsNull(this.tableUSERS.LOG_PATHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOG_PATHNull() {
                this[this.tableUSERS.LOG_PATHColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ALARM_STATUSRow : global::System.Data.DataRow {
            
            private ALARM_STATUSDataTable tableALARM_STATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ALARM_STATUSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableALARM_STATUS = ((ALARM_STATUSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Code {
                get {
                    return ((byte)(this[this.tableALARM_STATUS.CodeColumn]));
                }
                set {
                    this[this.tableALARM_STATUS.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string text {
                get {
                    return ((string)(this[this.tableALARM_STATUS.textColumn]));
                }
                set {
                    this[this.tableALARM_STATUS.textColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ALARM_TYPERow : global::System.Data.DataRow {
            
            private ALARM_TYPEDataTable tableALARM_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ALARM_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableALARM_TYPE = ((ALARM_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Code {
                get {
                    return ((byte)(this[this.tableALARM_TYPE.CodeColumn]));
                }
                set {
                    this[this.tableALARM_TYPE.CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Alarm {
                get {
                    try {
                        return ((string)(this[this.tableALARM_TYPE.AlarmColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Alarm\' in table \'ALARM_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableALARM_TYPE.AlarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlarmNull() {
                return this.IsNull(this.tableALARM_TYPE.AlarmColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlarmNull() {
                this[this.tableALARM_TYPE.AlarmColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COMUNICATION_TYPERow : global::System.Data.DataRow {
            
            private COMUNICATION_TYPEDataTable tableCOMUNICATION_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COMUNICATION_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOMUNICATION_TYPE = ((COMUNICATION_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CODE {
                get {
                    return ((int)(this[this.tableCOMUNICATION_TYPE.CODEColumn]));
                }
                set {
                    this[this.tableCOMUNICATION_TYPE.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableCOMUNICATION_TYPE.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'COMUNICATION_TYPE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCOMUNICATION_TYPE.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableCOMUNICATION_TYPE.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableCOMUNICATION_TYPE.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow[] GetMETERSRows() {
                if ((this.Table.ChildRelations["FK_METERS_COMUNICATION_TYPE"] == null)) {
                    return new METERSRow[0];
                }
                else {
                    return ((METERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_METERS_COMUNICATION_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CONCENTRATORSRow : global::System.Data.DataRow {
            
            private CONCENTRATORSDataTable tableCONCENTRATORS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CONCENTRATORSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCONCENTRATORS = ((CONCENTRATORSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONCENTRATOR_NO {
                get {
                    return ((string)(this[this.tableCONCENTRATORS.CONCENTRATOR_NOColumn]));
                }
                set {
                    this[this.tableCONCENTRATORS.CONCENTRATOR_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime INSTALLATION_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCONCENTRATORS.INSTALLATION_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSTALLATION_DATE\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.INSTALLATION_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TYPE {
                get {
                    try {
                        return ((string)(this[this.tableCONCENTRATORS.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MINUTS {
                get {
                    try {
                        return ((int)(this[this.tableCONCENTRATORS.MINUTSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MINUTS\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.MINUTSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TREE_NO {
                get {
                    try {
                        return ((int)(this[this.tableCONCENTRATORS.TREE_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TREE_NO\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.TREE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_NUMBER {
                get {
                    try {
                        return ((int)(this[this.tableCONCENTRATORS.USER_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USER_NUMBER\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.USER_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TIME_ZONE {
                get {
                    try {
                        return ((double)(this[this.tableCONCENTRATORS.TIME_ZONEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIME_ZONE\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.TIME_ZONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DETAILS {
                get {
                    try {
                        return ((string)(this[this.tableCONCENTRATORS.DETAILSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DETAILS\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.DETAILSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCATION {
                get {
                    try {
                        return ((string)(this[this.tableCONCENTRATORS.LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCATION\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADDRESS {
                get {
                    try {
                        return ((string)(this[this.tableCONCENTRATORS.ADDRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADDRESS\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte COMMUNICATION {
                get {
                    try {
                        return ((byte)(this[this.tableCONCENTRATORS.COMMUNICATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMMUNICATION\' in table \'CONCENTRATORS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCONCENTRATORS.COMMUNICATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSTALLATION_DATENull() {
                return this.IsNull(this.tableCONCENTRATORS.INSTALLATION_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSTALLATION_DATENull() {
                this[this.tableCONCENTRATORS.INSTALLATION_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTYPENull() {
                return this.IsNull(this.tableCONCENTRATORS.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTYPENull() {
                this[this.tableCONCENTRATORS.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMINUTSNull() {
                return this.IsNull(this.tableCONCENTRATORS.MINUTSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMINUTSNull() {
                this[this.tableCONCENTRATORS.MINUTSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTREE_NONull() {
                return this.IsNull(this.tableCONCENTRATORS.TREE_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTREE_NONull() {
                this[this.tableCONCENTRATORS.TREE_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NUMBERNull() {
                return this.IsNull(this.tableCONCENTRATORS.USER_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NUMBERNull() {
                this[this.tableCONCENTRATORS.USER_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIME_ZONENull() {
                return this.IsNull(this.tableCONCENTRATORS.TIME_ZONEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIME_ZONENull() {
                this[this.tableCONCENTRATORS.TIME_ZONEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDETAILSNull() {
                return this.IsNull(this.tableCONCENTRATORS.DETAILSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDETAILSNull() {
                this[this.tableCONCENTRATORS.DETAILSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCATIONNull() {
                return this.IsNull(this.tableCONCENTRATORS.LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCATIONNull() {
                this[this.tableCONCENTRATORS.LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADDRESSNull() {
                return this.IsNull(this.tableCONCENTRATORS.ADDRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADDRESSNull() {
                this[this.tableCONCENTRATORS.ADDRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMMUNICATIONNull() {
                return this.IsNull(this.tableCONCENTRATORS.COMMUNICATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMMUNICATIONNull() {
                this[this.tableCONCENTRATORS.COMMUNICATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow[] GetMETERSRows() {
                if ((this.Table.ChildRelations["FK_METERS_CONCENTRATORS"] == null)) {
                    return new METERSRow[0];
                }
                else {
                    return ((METERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_METERS_CONCENTRATORS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class HOLIDAYSRow : global::System.Data.DataRow {
            
            private HOLIDAYSDataTable tableHOLIDAYS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal HOLIDAYSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableHOLIDAYS = ((HOLIDAYSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CODE {
                get {
                    return ((int)(this[this.tableHOLIDAYS.CODEColumn]));
                }
                set {
                    this[this.tableHOLIDAYS.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableHOLIDAYS.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'HOLIDAYS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHOLIDAYS.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DATE {
                get {
                    try {
                        return ((int)(this[this.tableHOLIDAYS.DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE\' in table \'HOLIDAYS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHOLIDAYS.DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableHOLIDAYS.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableHOLIDAYS.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tableHOLIDAYS.DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tableHOLIDAYS.DATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ISRAEL_ELECTRICRow : global::System.Data.DataRow {
            
            private ISRAEL_ELECTRICDataTable tableISRAEL_ELECTRIC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ISRAEL_ELECTRICRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableISRAEL_ELECTRIC = ((ISRAEL_ELECTRICDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableISRAEL_ELECTRIC.IDColumn]));
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int METER {
                get {
                    return ((int)(this[this.tableISRAEL_ELECTRIC.METERColumn]));
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.METERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableISRAEL_ELECTRIC.DDATEColumn]));
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.DDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RES {
                get {
                    return ((byte)(this[this.tableISRAEL_ELECTRIC.RESColumn]));
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.RESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RES3 {
                get {
                    try {
                        return ((byte)(this[this.tableISRAEL_ELECTRIC.RES3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RES3\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.RES3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentR {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.CurrentRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentR\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.CurrentRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentS {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.CurrentSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentS\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.CurrentSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double CurrentT {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.CurrentTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentT\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.CurrentTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VoltageR {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.VoltageRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoltageR\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.VoltageRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VoltageS {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.VoltageSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoltageS\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.VoltageSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double VoltageT {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.VoltageTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoltageT\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.VoltageTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KVA_R {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KVA_RColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVA_R\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KVA_RColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KVA_S {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KVA_SColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVA_S\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KVA_SColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KVA_T {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KVA_TColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVA_T\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KVA_TColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KvarR {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KvarRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KvarR\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KvarRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KvarS {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KvarSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KvarS\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KvarSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KvarT {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KvarTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KvarT\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KvarTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kwR {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kwRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kwR\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kwRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kwS {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kwSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kwS\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kwSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kwT {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kwTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kwT\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kwTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PF_R {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.PF_RColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF_R\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.PF_RColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PF_S {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.PF_SColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF_S\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.PF_SColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PF_T {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.PF_TColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF_T\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.PF_TColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Hz {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.HzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hz\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.HzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kw {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kwColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kw\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kwColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double REACTIVE_APPRENT {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.REACTIVE_APPRENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REACTIVE_APPRENT\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.REACTIVE_APPRENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double REACTIVE_DEMAND {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.REACTIVE_DEMANDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REACTIVE_DEMAND\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.REACTIVE_DEMANDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double KVA {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KVAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KVA\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KVAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Kvar {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.KvarColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Kvar\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.KvarColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Amp {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.AmpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amp\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.AmpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Voltage {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.VoltageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Voltage\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.VoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PF {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.PFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.PFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kvarh_I {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kvarh_IColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kvarh_I\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kvarh_IColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kvarh_C {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kvarh_CColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kvarh_C\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kvarh_CColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double kVAh {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.kVAhColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kVAh\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.kVAhColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MAX_DEMAND {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_ELECTRIC.MAX_DEMANDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAX_DEMAND\' in table \'ISRAEL_ELECTRIC\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_ELECTRIC.MAX_DEMANDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow METERSRow {
                get {
                    return ((METERSRow)(this.GetParentRow(this.Table.ParentRelations["FK_ISRAEL_ELECTRIC_METERS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ISRAEL_ELECTRIC_METERS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRES3Null() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.RES3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRES3Null() {
                this[this.tableISRAEL_ELECTRIC.RES3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentRNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.CurrentRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentRNull() {
                this[this.tableISRAEL_ELECTRIC.CurrentRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentSNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.CurrentSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentSNull() {
                this[this.tableISRAEL_ELECTRIC.CurrentSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentTNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.CurrentTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentTNull() {
                this[this.tableISRAEL_ELECTRIC.CurrentTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltageRNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.VoltageRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltageRNull() {
                this[this.tableISRAEL_ELECTRIC.VoltageRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltageSNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.VoltageSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltageSNull() {
                this[this.tableISRAEL_ELECTRIC.VoltageSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltageTNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.VoltageTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltageTNull() {
                this[this.tableISRAEL_ELECTRIC.VoltageTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVA_RNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KVA_RColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVA_RNull() {
                this[this.tableISRAEL_ELECTRIC.KVA_RColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVA_SNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KVA_SColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVA_SNull() {
                this[this.tableISRAEL_ELECTRIC.KVA_SColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVA_TNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KVA_TColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVA_TNull() {
                this[this.tableISRAEL_ELECTRIC.KVA_TColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKvarRNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KvarRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKvarRNull() {
                this[this.tableISRAEL_ELECTRIC.KvarRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKvarSNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KvarSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKvarSNull() {
                this[this.tableISRAEL_ELECTRIC.KvarSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKvarTNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KvarTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKvarTNull() {
                this[this.tableISRAEL_ELECTRIC.KvarTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskwRNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kwRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkwRNull() {
                this[this.tableISRAEL_ELECTRIC.kwRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskwSNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kwSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkwSNull() {
                this[this.tableISRAEL_ELECTRIC.kwSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskwTNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kwTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkwTNull() {
                this[this.tableISRAEL_ELECTRIC.kwTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPF_RNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.PF_RColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPF_RNull() {
                this[this.tableISRAEL_ELECTRIC.PF_RColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPF_SNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.PF_SColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPF_SNull() {
                this[this.tableISRAEL_ELECTRIC.PF_SColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPF_TNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.PF_TColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPF_TNull() {
                this[this.tableISRAEL_ELECTRIC.PF_TColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHzNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.HzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHzNull() {
                this[this.tableISRAEL_ELECTRIC.HzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskwNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kwColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkwNull() {
                this[this.tableISRAEL_ELECTRIC.kwColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREACTIVE_APPRENTNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.REACTIVE_APPRENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREACTIVE_APPRENTNull() {
                this[this.tableISRAEL_ELECTRIC.REACTIVE_APPRENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREACTIVE_DEMANDNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.REACTIVE_DEMANDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREACTIVE_DEMANDNull() {
                this[this.tableISRAEL_ELECTRIC.REACTIVE_DEMANDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKVANull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KVAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKVANull() {
                this[this.tableISRAEL_ELECTRIC.KVAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKvarNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.KvarColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKvarNull() {
                this[this.tableISRAEL_ELECTRIC.KvarColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmpNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.AmpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmpNull() {
                this[this.tableISRAEL_ELECTRIC.AmpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoltageNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.VoltageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoltageNull() {
                this[this.tableISRAEL_ELECTRIC.VoltageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.PFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFNull() {
                this[this.tableISRAEL_ELECTRIC.PFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskvarh_INull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kvarh_IColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkvarh_INull() {
                this[this.tableISRAEL_ELECTRIC.kvarh_IColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iskvarh_CNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kvarh_CColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setkvarh_CNull() {
                this[this.tableISRAEL_ELECTRIC.kvarh_CColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskVAhNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.kVAhColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkVAhNull() {
                this[this.tableISRAEL_ELECTRIC.kVAhColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAX_DEMANDNull() {
                return this.IsNull(this.tableISRAEL_ELECTRIC.MAX_DEMANDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAX_DEMANDNull() {
                this[this.tableISRAEL_ELECTRIC.MAX_DEMANDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class METER_TYPERow : global::System.Data.DataRow {
            
            private METER_TYPEDataTable tableMETER_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal METER_TYPERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMETER_TYPE = ((METER_TYPEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CODE_METER_TYPE {
                get {
                    return ((int)(this[this.tableMETER_TYPE.CODE_METER_TYPEColumn]));
                }
                set {
                    this[this.tableMETER_TYPE.CODE_METER_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    return ((string)(this[this.tableMETER_TYPE.DESCRIPTIONColumn]));
                }
                set {
                    this[this.tableMETER_TYPE.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow[] GetMETERSRows() {
                if ((this.Table.ChildRelations["FK_METERS_METER_TYPE"] == null)) {
                    return new METERSRow[0];
                }
                else {
                    return ((METERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_METERS_METER_TYPE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class METERSRow : global::System.Data.DataRow {
            
            private METERSDataTable tableMETERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal METERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMETERS = ((METERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DB_UNIQUE_ID {
                get {
                    return ((int)(this[this.tableMETERS.DB_UNIQUE_IDColumn]));
                }
                set {
                    this[this.tableMETERS.DB_UNIQUE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableMETERS.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TREE_NO {
                get {
                    try {
                        return ((int)(this[this.tableMETERS.TREE_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TREE_NO\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.TREE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int METER_TYPE {
                get {
                    try {
                        return ((int)(this[this.tableMETERS.METER_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'METER_TYPE\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.METER_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int USER_NO {
                get {
                    try {
                        return ((int)(this[this.tableMETERS.USER_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USER_NO\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.USER_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADRESS {
                get {
                    try {
                        return ((string)(this[this.tableMETERS.ADRESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ADRESS\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.ADRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONCENTRATOR {
                get {
                    try {
                        return ((string)(this[this.tableMETERS.CONCENTRATORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONCENTRATOR\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.CONCENTRATORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime INSTALLATION_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMETERS.INSTALLATION_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INSTALLATION_DATE\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.INSTALLATION_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DETAILS {
                get {
                    try {
                        return ((string)(this[this.tableMETERS.DETAILSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DETAILS\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.DETAILSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIAL_NO {
                get {
                    try {
                        return ((string)(this[this.tableMETERS.SERIAL_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SERIAL_NO\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.SERIAL_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string METER_ID {
                get {
                    try {
                        return ((string)(this[this.tableMETERS.METER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'METER_ID\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.METER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARAMETER {
                get {
                    try {
                        return ((int)(this[this.tableMETERS.PARAMETERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARAMETER\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.PARAMETERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int COMMUNICATION {
                get {
                    try {
                        return ((int)(this[this.tableMETERS.COMMUNICATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMMUNICATION\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.COMMUNICATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BASE_VALUE {
                get {
                    try {
                        return ((int)(this[this.tableMETERS.BASE_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BASE_VALUE\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.BASE_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PULSE_RATIO {
                get {
                    try {
                        return ((double)(this[this.tableMETERS.PULSE_RATIOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PULSE_RATIO\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.PULSE_RATIOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CT_RATIO1 {
                get {
                    try {
                        return ((short)(this[this.tableMETERS.CT_RATIO1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CT_RATIO1\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.CT_RATIO1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short CT_RATIO2 {
                get {
                    try {
                        return ((short)(this[this.tableMETERS.CT_RATIO2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CT_RATIO2\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.CT_RATIO2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte NUMBER_OF_CT {
                get {
                    try {
                        return ((byte)(this[this.tableMETERS.NUMBER_OF_CTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NUMBER_OF_CT\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.NUMBER_OF_CTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PARTIAL_FACTOR {
                get {
                    try {
                        return ((double)(this[this.tableMETERS.PARTIAL_FACTORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARTIAL_FACTOR\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.PARTIAL_FACTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MULTIPLY {
                get {
                    try {
                        return ((double)(this[this.tableMETERS.MULTIPLYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MULTIPLY\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.MULTIPLYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short VIRTUAL {
                get {
                    try {
                        return ((short)(this[this.tableMETERS.VIRTUALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VIRTUAL\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.VIRTUALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MAX {
                get {
                    try {
                        return ((double)(this[this.tableMETERS.MAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAX\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.MAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double MIN {
                get {
                    try {
                        return ((double)(this[this.tableMETERS.MINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIN\' in table \'METERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMETERS.MINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERow COMUNICATION_TYPERow {
                get {
                    return ((COMUNICATION_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_METERS_COMUNICATION_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_METERS_COMUNICATION_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRow CONCENTRATORSRow {
                get {
                    return ((CONCENTRATORSRow)(this.GetParentRow(this.Table.ParentRelations["FK_METERS_CONCENTRATORS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_METERS_CONCENTRATORS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERow METER_TYPERow {
                get {
                    return ((METER_TYPERow)(this.GetParentRow(this.Table.ParentRelations["FK_METERS_METER_TYPE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_METERS_METER_TYPE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow PARAMETERSRow {
                get {
                    return ((PARAMETERSRow)(this.GetParentRow(this.Table.ParentRelations["FK_METERS_PARAMETERS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_METERS_PARAMETERS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow TREERow {
                get {
                    return ((TREERow)(this.GetParentRow(this.Table.ParentRelations["FK_METERS_TREE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_METERS_TREE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableMETERS.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableMETERS.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTREE_NONull() {
                return this.IsNull(this.tableMETERS.TREE_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTREE_NONull() {
                this[this.tableMETERS.TREE_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMETER_TYPENull() {
                return this.IsNull(this.tableMETERS.METER_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMETER_TYPENull() {
                this[this.tableMETERS.METER_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSER_NONull() {
                return this.IsNull(this.tableMETERS.USER_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSER_NONull() {
                this[this.tableMETERS.USER_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADRESSNull() {
                return this.IsNull(this.tableMETERS.ADRESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADRESSNull() {
                this[this.tableMETERS.ADRESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONCENTRATORNull() {
                return this.IsNull(this.tableMETERS.CONCENTRATORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONCENTRATORNull() {
                this[this.tableMETERS.CONCENTRATORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINSTALLATION_DATENull() {
                return this.IsNull(this.tableMETERS.INSTALLATION_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINSTALLATION_DATENull() {
                this[this.tableMETERS.INSTALLATION_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDETAILSNull() {
                return this.IsNull(this.tableMETERS.DETAILSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDETAILSNull() {
                this[this.tableMETERS.DETAILSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIAL_NONull() {
                return this.IsNull(this.tableMETERS.SERIAL_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIAL_NONull() {
                this[this.tableMETERS.SERIAL_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMETER_IDNull() {
                return this.IsNull(this.tableMETERS.METER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMETER_IDNull() {
                this[this.tableMETERS.METER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARAMETERNull() {
                return this.IsNull(this.tableMETERS.PARAMETERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARAMETERNull() {
                this[this.tableMETERS.PARAMETERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMMUNICATIONNull() {
                return this.IsNull(this.tableMETERS.COMMUNICATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMMUNICATIONNull() {
                this[this.tableMETERS.COMMUNICATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_VALUENull() {
                return this.IsNull(this.tableMETERS.BASE_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_VALUENull() {
                this[this.tableMETERS.BASE_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPULSE_RATIONull() {
                return this.IsNull(this.tableMETERS.PULSE_RATIOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPULSE_RATIONull() {
                this[this.tableMETERS.PULSE_RATIOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCT_RATIO1Null() {
                return this.IsNull(this.tableMETERS.CT_RATIO1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCT_RATIO1Null() {
                this[this.tableMETERS.CT_RATIO1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCT_RATIO2Null() {
                return this.IsNull(this.tableMETERS.CT_RATIO2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCT_RATIO2Null() {
                this[this.tableMETERS.CT_RATIO2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_OF_CTNull() {
                return this.IsNull(this.tableMETERS.NUMBER_OF_CTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_OF_CTNull() {
                this[this.tableMETERS.NUMBER_OF_CTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARTIAL_FACTORNull() {
                return this.IsNull(this.tableMETERS.PARTIAL_FACTORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARTIAL_FACTORNull() {
                this[this.tableMETERS.PARTIAL_FACTORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMULTIPLYNull() {
                return this.IsNull(this.tableMETERS.MULTIPLYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMULTIPLYNull() {
                this[this.tableMETERS.MULTIPLYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVIRTUALNull() {
                return this.IsNull(this.tableMETERS.VIRTUALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVIRTUALNull() {
                this[this.tableMETERS.VIRTUALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAXNull() {
                return this.IsNull(this.tableMETERS.MAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAXNull() {
                this[this.tableMETERS.MAXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMINNull() {
                return this.IsNull(this.tableMETERS.MINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMINNull() {
                this[this.tableMETERS.MINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRow[] GetISRAEL_ELECTRICRows() {
                if ((this.Table.ChildRelations["FK_ISRAEL_ELECTRIC_METERS"] == null)) {
                    return new ISRAEL_ELECTRICRow[0];
                }
                else {
                    return ((ISRAEL_ELECTRICRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ISRAEL_ELECTRIC_METERS"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRow[] GetISRAEL_READINGRows() {
                if ((this.Table.ChildRelations["FK_ISRAEL_READING_METERS"] == null)) {
                    return new ISRAEL_READINGRow[0];
                }
                else {
                    return ((ISRAEL_READINGRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ISRAEL_READING_METERS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PARAMETERSRow : global::System.Data.DataRow {
            
            private PARAMETERSDataTable tablePARAMETERS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PARAMETERSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePARAMETERS = ((PARAMETERSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CODE {
                get {
                    return ((int)(this[this.tablePARAMETERS.CODEColumn]));
                }
                set {
                    this[this.tablePARAMETERS.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tablePARAMETERS.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'PARAMETERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARAMETERS.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsElectric {
                get {
                    try {
                        return ((bool)(this[this.tablePARAMETERS.IsElectricColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsElectric\' in table \'PARAMETERS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePARAMETERS.IsElectricColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tablePARAMETERS.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tablePARAMETERS.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsElectricNull() {
                return this.IsNull(this.tablePARAMETERS.IsElectricColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsElectricNull() {
                this[this.tablePARAMETERS.IsElectricColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow[] GetMETERSRows() {
                if ((this.Table.ChildRelations["FK_METERS_PARAMETERS"] == null)) {
                    return new METERSRow[0];
                }
                else {
                    return ((METERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_METERS_PARAMETERS"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TREERow : global::System.Data.DataRow {
            
            private TREEDataTable tableTREE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TREERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTREE = ((TREEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TREE_NO {
                get {
                    return ((int)(this[this.tableTREE.TREE_NOColumn]));
                }
                set {
                    this[this.tableTREE.TREE_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableTREE.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'TREE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTREE.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short TREE_LEVEL {
                get {
                    try {
                        return ((short)(this[this.tableTREE.TREE_LEVELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TREE_LEVEL\' in table \'TREE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTREE.TREE_LEVELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PARENT {
                get {
                    try {
                        return ((int)(this[this.tableTREE.PARENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PARENT\' in table \'TREE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTREE.PARENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow TREERowParent {
                get {
                    return ((TREERow)(this.GetParentRow(this.Table.ParentRelations["FK_TREE_TREE"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TREE_TREE"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableTREE.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableTREE.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTREE_LEVELNull() {
                return this.IsNull(this.tableTREE.TREE_LEVELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTREE_LEVELNull() {
                this[this.tableTREE.TREE_LEVELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPARENTNull() {
                return this.IsNull(this.tableTREE.PARENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPARENTNull() {
                this[this.tableTREE.PARENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow[] GetMETERSRows() {
                if ((this.Table.ChildRelations["FK_METERS_TREE"] == null)) {
                    return new METERSRow[0];
                }
                else {
                    return ((METERSRow[])(base.GetChildRows(this.Table.ChildRelations["FK_METERS_TREE"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow[] GetTREERows() {
                if ((this.Table.ChildRelations["FK_TREE_TREE"] == null)) {
                    return new TREERow[0];
                }
                else {
                    return ((TREERow[])(base.GetChildRows(this.Table.ChildRelations["FK_TREE_TREE"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ISRAEL_READINGRow : global::System.Data.DataRow {
            
            private ISRAEL_READINGDataTable tableISRAEL_READING;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ISRAEL_READINGRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableISRAEL_READING = ((ISRAEL_READINGDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableISRAEL_READING.IDColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int METER {
                get {
                    return ((int)(this[this.tableISRAEL_READING.METERColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.METERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RES {
                get {
                    return ((byte)(this[this.tableISRAEL_READING.RESColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.RESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte RES3 {
                get {
                    return ((byte)(this[this.tableISRAEL_READING.RES3Column]));
                }
                set {
                    this[this.tableISRAEL_READING.RES3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DDATE {
                get {
                    return ((global::System.DateTime)(this[this.tableISRAEL_READING.DDATEColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.DDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double PEAK {
                get {
                    return ((double)(this[this.tableISRAEL_READING.PEAKColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.PEAKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double HIGH {
                get {
                    return ((double)(this[this.tableISRAEL_READING.HIGHColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.HIGHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double LOW {
                get {
                    return ((double)(this[this.tableISRAEL_READING.LOWColumn]));
                }
                set {
                    this[this.tableISRAEL_READING.LOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double D {
                get {
                    try {
                        return ((double)(this[this.tableISRAEL_READING.DColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'D\' in table \'ISRAEL_READING\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableISRAEL_READING.DColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow METERSRow {
                get {
                    return ((METERSRow)(this.GetParentRow(this.Table.ParentRelations["FK_ISRAEL_READING_METERS"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ISRAEL_READING_METERS"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDNull() {
                return this.IsNull(this.tableISRAEL_READING.DColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDNull() {
                this[this.tableISRAEL_READING.DColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ALARM_LISTRowChangeEvent : global::System.EventArgs {
            
            private ALARM_LISTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTRowChangeEvent(ALARM_LISTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_LISTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class USERSRowChangeEvent : global::System.EventArgs {
            
            private USERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSRowChangeEvent(USERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public USERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ALARM_STATUSRowChangeEvent : global::System.EventArgs {
            
            private ALARM_STATUSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSRowChangeEvent(ALARM_STATUSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_STATUSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ALARM_TYPERowChangeEvent : global::System.EventArgs {
            
            private ALARM_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPERowChangeEvent(ALARM_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ALARM_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COMUNICATION_TYPERowChangeEvent : global::System.EventArgs {
            
            private COMUNICATION_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERowChangeEvent(COMUNICATION_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COMUNICATION_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CONCENTRATORSRowChangeEvent : global::System.EventArgs {
            
            private CONCENTRATORSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRowChangeEvent(CONCENTRATORSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CONCENTRATORSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class HOLIDAYSRowChangeEvent : global::System.EventArgs {
            
            private HOLIDAYSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSRowChangeEvent(HOLIDAYSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public HOLIDAYSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ISRAEL_ELECTRICRowChangeEvent : global::System.EventArgs {
            
            private ISRAEL_ELECTRICRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRowChangeEvent(ISRAEL_ELECTRICRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_ELECTRICRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class METER_TYPERowChangeEvent : global::System.EventArgs {
            
            private METER_TYPERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERowChangeEvent(METER_TYPERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METER_TYPERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class METERSRowChangeEvent : global::System.EventArgs {
            
            private METERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRowChangeEvent(METERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public METERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PARAMETERSRowChangeEvent : global::System.EventArgs {
            
            private PARAMETERSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRowChangeEvent(PARAMETERSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PARAMETERSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TREERowChangeEvent : global::System.EventArgs {
            
            private TREERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERowChangeEvent(TREERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TREERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ISRAEL_READINGRowChangeEvent : global::System.EventArgs {
            
            private ISRAEL_READINGRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRowChangeEvent(ISRAEL_READINGRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ISRAEL_READINGRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Durados.Web.Mvc.Specifics.Projects.Gadir.GadirDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ALARM_LISTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALARM_LISTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ALARM_LIST";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("MeterID", "MeterID");
            tableMapping.ColumnMappings.Add("ConcentratorID", "ConcentratorID");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("Time", "Time");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ALARM_LIST] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ALARM_LIST] ([MeterID], [ConcentratorID], [Code], [Time], [Sta" +
                "tus]) VALUES (@MeterID, @ConcentratorID, @Code, @Time, @Status)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConcentratorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConcentratorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ALARM_LIST] SET [MeterID] = @MeterID, [ConcentratorID] = @Concentra" +
                "torID, [Code] = @Code, [Time] = @Time, [Status] = @Status WHERE (([ID] = @Origin" +
                "al_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ConcentratorID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ConcentratorID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Time", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, MeterID, ConcentratorID, Code, Time, Status FROM dbo.ALARM_LIST";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.ALARM_LISTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.ALARM_LISTDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.ALARM_LISTDataTable dataTable = new GadirDataSet.ALARM_LISTDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.ALARM_LISTDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ALARM_LIST");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MeterID, string ConcentratorID, byte Code, System.DateTime Time, global::System.Nullable<byte> Status) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MeterID));
            if ((ConcentratorID == null)) {
                throw new global::System.ArgumentNullException("ConcentratorID");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ConcentratorID));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(Code));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(Time));
            if ((Status.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((byte)(Status.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int MeterID, string ConcentratorID, byte Code, System.DateTime Time, global::System.Nullable<byte> Status, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MeterID));
            if ((ConcentratorID == null)) {
                throw new global::System.ArgumentNullException("ConcentratorID");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ConcentratorID));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(Code));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(Time));
            if ((Status.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((byte)(Status.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class USERSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public USERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "USERS";
            tableMapping.ColumnMappings.Add("CODE", "CODE");
            tableMapping.ColumnMappings.Add("USER_NAME", "USER_NAME");
            tableMapping.ColumnMappings.Add("PASSWORD", "PASSWORD");
            tableMapping.ColumnMappings.Add("METER_NO", "METER_NO");
            tableMapping.ColumnMappings.Add("TREE_NO", "TREE_NO");
            tableMapping.ColumnMappings.Add("AUTORIZ", "AUTORIZ");
            tableMapping.ColumnMappings.Add("LANG", "LANG");
            tableMapping.ColumnMappings.Add("CLIENT_SUG", "CLIENT_SUG");
            tableMapping.ColumnMappings.Add("LOG_PATH", "LOG_PATH");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[USERS] WHERE (([CODE] = @Original_CODE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[USERS] ([CODE], [USER_NAME], [PASSWORD], [METER_NO], [TREE_NO]" +
                ", [AUTORIZ], [LANG], [CLIENT_SUG], [LOG_PATH]) VALUES (@CODE, @USER_NAME, @PASSW" +
                "ORD, @METER_NO, @TREE_NO, @AUTORIZ, @LANG, @CLIENT_SUG, @LOG_PATH)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PASSWORD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUTORIZ", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUTORIZ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LANG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LANG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CLIENT_SUG", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CLIENT_SUG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOG_PATH", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOG_PATH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[USERS] SET [CODE] = @CODE, [USER_NAME] = @USER_NAME, [PASSWORD] = @PASSWORD, [METER_NO] = @METER_NO, [TREE_NO] = @TREE_NO, [AUTORIZ] = @AUTORIZ, [LANG] = @LANG, [CLIENT_SUG] = @CLIENT_SUG, [LOG_PATH] = @LOG_PATH WHERE (([CODE] = @Original_CODE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PASSWORD", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PASSWORD", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AUTORIZ", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AUTORIZ", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LANG", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LANG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CLIENT_SUG", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CLIENT_SUG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOG_PATH", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOG_PATH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE, USER_NAME, PASSWORD, METER_NO, TREE_NO, AUTORIZ, LANG, CLIENT_SUG, L" +
                "OG_PATH FROM dbo.USERS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.USERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.USERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.USERSDataTable dataTable = new GadirDataSet.USERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.USERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "USERS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CODE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CODE, string USER_NAME, string PASSWORD, string METER_NO, int TREE_NO, string AUTORIZ, short LANG, string CLIENT_SUG, string LOG_PATH) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CODE));
            if ((USER_NAME == null)) {
                throw new global::System.ArgumentNullException("USER_NAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(USER_NAME));
            }
            if ((PASSWORD == null)) {
                throw new global::System.ArgumentNullException("PASSWORD");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PASSWORD));
            }
            if ((METER_NO == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(METER_NO));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(TREE_NO));
            if ((AUTORIZ == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AUTORIZ));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((short)(LANG));
            if ((CLIENT_SUG == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(CLIENT_SUG));
            }
            if ((LOG_PATH == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(LOG_PATH));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CODE, string USER_NAME, string PASSWORD, string METER_NO, int TREE_NO, string AUTORIZ, short LANG, string CLIENT_SUG, string LOG_PATH, int Original_CODE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CODE));
            if ((USER_NAME == null)) {
                throw new global::System.ArgumentNullException("USER_NAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(USER_NAME));
            }
            if ((PASSWORD == null)) {
                throw new global::System.ArgumentNullException("PASSWORD");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PASSWORD));
            }
            if ((METER_NO == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(METER_NO));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(TREE_NO));
            if ((AUTORIZ == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(AUTORIZ));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((short)(LANG));
            if ((CLIENT_SUG == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(CLIENT_SUG));
            }
            if ((LOG_PATH == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(LOG_PATH));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string USER_NAME, string PASSWORD, string METER_NO, int TREE_NO, string AUTORIZ, short LANG, string CLIENT_SUG, string LOG_PATH, int Original_CODE) {
            return this.Update(Original_CODE, USER_NAME, PASSWORD, METER_NO, TREE_NO, AUTORIZ, LANG, CLIENT_SUG, LOG_PATH, Original_CODE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ALARM_STATUSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALARM_STATUSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ALARM_STATUS";
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("text", "text");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ALARM_STATUS] WHERE (([Code] = @Original_Code))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ALARM_STATUS] ([Code], [text]) VALUES (@Code, @text)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ALARM_STATUS] SET [Code] = @Code, [text] = @text WHERE (([Code] = @" +
                "Original_Code))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@text", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "text", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Code, text FROM dbo.ALARM_STATUS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.ALARM_STATUSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.ALARM_STATUSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.ALARM_STATUSDataTable dataTable = new GadirDataSet.ALARM_STATUSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.ALARM_STATUSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ALARM_STATUS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(byte Original_Code) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((byte)(Original_Code));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(byte Code, string text) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((byte)(Code));
            if ((text == null)) {
                throw new global::System.ArgumentNullException("text");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(text));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(byte Code, string text, byte Original_Code) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((byte)(Code));
            if ((text == null)) {
                throw new global::System.ArgumentNullException("text");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(text));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(Original_Code));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string text, byte Original_Code) {
            return this.Update(Original_Code, text, Original_Code);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ALARM_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ALARM_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ALARM_TYPE";
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("Alarm", "Alarm");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ALARM_TYPE] WHERE (([Code] = @Original_Code))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ALARM_TYPE] ([Code], [Alarm]) VALUES (@Code, @Alarm)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Alarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Alarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ALARM_TYPE] SET [Code] = @Code, [Alarm] = @Alarm WHERE (([Code] = @" +
                "Original_Code))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Alarm", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Alarm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Code", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Code", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Code, Alarm FROM dbo.ALARM_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.ALARM_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.ALARM_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.ALARM_TYPEDataTable dataTable = new GadirDataSet.ALARM_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.ALARM_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ALARM_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(byte Original_Code) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((byte)(Original_Code));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(byte Code, string Alarm) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((byte)(Code));
            if ((Alarm == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Alarm));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(byte Code, string Alarm, byte Original_Code) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((byte)(Code));
            if ((Alarm == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Alarm));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(Original_Code));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Alarm, byte Original_Code) {
            return this.Update(Original_Code, Alarm, Original_Code);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class COMUNICATION_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COMUNICATION_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "COMUNICATION_TYPE";
            tableMapping.ColumnMappings.Add("CODE", "CODE");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[COMUNICATION_TYPE] WHERE (([CODE] = @Original_CODE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[COMUNICATION_TYPE] ([CODE], [NAME]) VALUES (@CODE, @NAME)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[COMUNICATION_TYPE] SET [CODE] = @CODE, [NAME] = @NAME WHERE (([CODE" +
                "] = @Original_CODE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE, NAME FROM dbo.COMUNICATION_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.COMUNICATION_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.COMUNICATION_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.COMUNICATION_TYPEDataTable dataTable = new GadirDataSet.COMUNICATION_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.COMUNICATION_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "COMUNICATION_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CODE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CODE, string NAME) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CODE));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CODE, string NAME, int Original_CODE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CODE));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, int Original_CODE) {
            return this.Update(Original_CODE, NAME, Original_CODE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CONCENTRATORSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CONCENTRATORSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "CONCENTRATORS";
            tableMapping.ColumnMappings.Add("CONCENTRATOR_NO", "CONCENTRATOR_NO");
            tableMapping.ColumnMappings.Add("INSTALLATION_DATE", "INSTALLATION_DATE");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("MINUTS", "MINUTS");
            tableMapping.ColumnMappings.Add("TREE_NO", "TREE_NO");
            tableMapping.ColumnMappings.Add("USER_NUMBER", "USER_NUMBER");
            tableMapping.ColumnMappings.Add("TIME_ZONE", "TIME_ZONE");
            tableMapping.ColumnMappings.Add("DETAILS", "DETAILS");
            tableMapping.ColumnMappings.Add("LOCATION", "LOCATION");
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS");
            tableMapping.ColumnMappings.Add("COMMUNICATION", "COMMUNICATION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CONCENTRATORS] WHERE (([CONCENTRATOR_NO] = @Original_CONCENTRA" +
                "TOR_NO))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CONCENTRATOR_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CONCENTRATOR_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[CONCENTRATORS] ([CONCENTRATOR_NO], [INSTALLATION_DATE], [TYPE], [MINUTS], [TREE_NO], [USER_NUMBER], [TIME_ZONE], [DETAILS], [LOCATION], [ADDRESS], [COMMUNICATION]) VALUES (@CONCENTRATOR_NO, @INSTALLATION_DATE, @TYPE, @MINUTS, @TREE_NO, @USER_NUMBER, @TIME_ZONE, @DETAILS, @LOCATION, @ADDRESS, @COMMUNICATION)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CONCENTRATOR_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CONCENTRATOR_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INSTALLATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INSTALLATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TYPE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MINUTS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINUTS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NUMBER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NUMBER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TIME_ZONE", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TIME_ZONE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DETAILS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DETAILS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOCATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOCATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMMUNICATION", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMMUNICATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[CONCENTRATORS] SET [CONCENTRATOR_NO] = @CONCENTRATOR_NO, [INSTALLATION_DATE] = @INSTALLATION_DATE, [TYPE] = @TYPE, [MINUTS] = @MINUTS, [TREE_NO] = @TREE_NO, [USER_NUMBER] = @USER_NUMBER, [TIME_ZONE] = @TIME_ZONE, [DETAILS] = @DETAILS, [LOCATION] = @LOCATION, [ADDRESS] = @ADDRESS, [COMMUNICATION] = @COMMUNICATION WHERE (([CONCENTRATOR_NO] = @Original_CONCENTRATOR_NO))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CONCENTRATOR_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CONCENTRATOR_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INSTALLATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INSTALLATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TYPE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MINUTS", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MINUTS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NUMBER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NUMBER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TIME_ZONE", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TIME_ZONE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DETAILS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DETAILS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOCATION", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOCATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMMUNICATION", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMMUNICATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CONCENTRATOR_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CONCENTRATOR_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CONCENTRATOR_NO, INSTALLATION_DATE, TYPE, MINUTS, TREE_NO, USER_NUMBER, TI" +
                "ME_ZONE, DETAILS, LOCATION, ADDRESS, COMMUNICATION FROM dbo.CONCENTRATORS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.CONCENTRATORSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.CONCENTRATORSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.CONCENTRATORSDataTable dataTable = new GadirDataSet.CONCENTRATORSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.CONCENTRATORSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "CONCENTRATORS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_CONCENTRATOR_NO) {
            if ((Original_CONCENTRATOR_NO == null)) {
                throw new global::System.ArgumentNullException("Original_CONCENTRATOR_NO");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_CONCENTRATOR_NO));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CONCENTRATOR_NO, global::System.Nullable<global::System.DateTime> INSTALLATION_DATE, string TYPE, global::System.Nullable<int> MINUTS, global::System.Nullable<int> TREE_NO, global::System.Nullable<int> USER_NUMBER, global::System.Nullable<double> TIME_ZONE, string DETAILS, string LOCATION, string ADDRESS, global::System.Nullable<byte> COMMUNICATION) {
            if ((CONCENTRATOR_NO == null)) {
                throw new global::System.ArgumentNullException("CONCENTRATOR_NO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CONCENTRATOR_NO));
            }
            if ((INSTALLATION_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(INSTALLATION_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TYPE == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TYPE));
            }
            if ((MINUTS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(MINUTS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TREE_NO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(TREE_NO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((USER_NUMBER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(USER_NUMBER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TIME_ZONE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(TIME_ZONE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DETAILS == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(DETAILS));
            }
            if ((LOCATION == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(LOCATION));
            }
            if ((ADDRESS == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ADDRESS));
            }
            if ((COMMUNICATION.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((byte)(COMMUNICATION.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CONCENTRATOR_NO, global::System.Nullable<global::System.DateTime> INSTALLATION_DATE, string TYPE, global::System.Nullable<int> MINUTS, global::System.Nullable<int> TREE_NO, global::System.Nullable<int> USER_NUMBER, global::System.Nullable<double> TIME_ZONE, string DETAILS, string LOCATION, string ADDRESS, global::System.Nullable<byte> COMMUNICATION, string Original_CONCENTRATOR_NO) {
            if ((CONCENTRATOR_NO == null)) {
                throw new global::System.ArgumentNullException("CONCENTRATOR_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CONCENTRATOR_NO));
            }
            if ((INSTALLATION_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(INSTALLATION_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((TYPE == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TYPE));
            }
            if ((MINUTS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(MINUTS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((TREE_NO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(TREE_NO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((USER_NUMBER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(USER_NUMBER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((TIME_ZONE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(TIME_ZONE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DETAILS == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(DETAILS));
            }
            if ((LOCATION == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(LOCATION));
            }
            if ((ADDRESS == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ADDRESS));
            }
            if ((COMMUNICATION.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((byte)(COMMUNICATION.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_CONCENTRATOR_NO == null)) {
                throw new global::System.ArgumentNullException("Original_CONCENTRATOR_NO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_CONCENTRATOR_NO));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(global::System.Nullable<global::System.DateTime> INSTALLATION_DATE, string TYPE, global::System.Nullable<int> MINUTS, global::System.Nullable<int> TREE_NO, global::System.Nullable<int> USER_NUMBER, global::System.Nullable<double> TIME_ZONE, string DETAILS, string LOCATION, string ADDRESS, global::System.Nullable<byte> COMMUNICATION, string Original_CONCENTRATOR_NO) {
            return this.Update(Original_CONCENTRATOR_NO, INSTALLATION_DATE, TYPE, MINUTS, TREE_NO, USER_NUMBER, TIME_ZONE, DETAILS, LOCATION, ADDRESS, COMMUNICATION, Original_CONCENTRATOR_NO);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class HOLIDAYSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public HOLIDAYSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "HOLIDAYS";
            tableMapping.ColumnMappings.Add("CODE", "CODE");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("DATE", "DATE");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[HOLIDAYS] WHERE (([CODE] = @Original_CODE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[HOLIDAYS] ([CODE], [NAME], [DATE]) VALUES (@CODE, @NAME, @DATE" +
                ")";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[HOLIDAYS] SET [CODE] = @CODE, [NAME] = @NAME, [DATE] = @DATE WHERE " +
                "(([CODE] = @Original_CODE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DATE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE, NAME, DATE FROM dbo.HOLIDAYS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.HOLIDAYSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.HOLIDAYSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.HOLIDAYSDataTable dataTable = new GadirDataSet.HOLIDAYSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.HOLIDAYSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "HOLIDAYS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CODE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CODE, string NAME, global::System.Nullable<int> DATE) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CODE));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CODE, string NAME, global::System.Nullable<int> DATE, int Original_CODE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CODE));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, global::System.Nullable<int> DATE, int Original_CODE) {
            return this.Update(Original_CODE, NAME, DATE, Original_CODE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ISRAEL_ELECTRICTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISRAEL_ELECTRICTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ISRAEL_ELECTRIC";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("METER", "METER");
            tableMapping.ColumnMappings.Add("DDATE", "DDATE");
            tableMapping.ColumnMappings.Add("RES", "RES");
            tableMapping.ColumnMappings.Add("RES3", "RES3");
            tableMapping.ColumnMappings.Add("CurrentR", "CurrentR");
            tableMapping.ColumnMappings.Add("CurrentS", "CurrentS");
            tableMapping.ColumnMappings.Add("CurrentT", "CurrentT");
            tableMapping.ColumnMappings.Add("VoltageR", "VoltageR");
            tableMapping.ColumnMappings.Add("VoltageS", "VoltageS");
            tableMapping.ColumnMappings.Add("VoltageT", "VoltageT");
            tableMapping.ColumnMappings.Add("KVA_R", "KVA_R");
            tableMapping.ColumnMappings.Add("KVA_S", "KVA_S");
            tableMapping.ColumnMappings.Add("KVA_T", "KVA_T");
            tableMapping.ColumnMappings.Add("KvarR", "KvarR");
            tableMapping.ColumnMappings.Add("KvarS", "KvarS");
            tableMapping.ColumnMappings.Add("KvarT", "KvarT");
            tableMapping.ColumnMappings.Add("kwR", "kwR");
            tableMapping.ColumnMappings.Add("kwS", "kwS");
            tableMapping.ColumnMappings.Add("kwT", "kwT");
            tableMapping.ColumnMappings.Add("PF_R", "PF_R");
            tableMapping.ColumnMappings.Add("PF_S", "PF_S");
            tableMapping.ColumnMappings.Add("PF_T", "PF_T");
            tableMapping.ColumnMappings.Add("Hz", "Hz");
            tableMapping.ColumnMappings.Add("kw", "kw");
            tableMapping.ColumnMappings.Add("REACTIVE_APPRENT", "REACTIVE_APPRENT");
            tableMapping.ColumnMappings.Add("REACTIVE_DEMAND", "REACTIVE_DEMAND");
            tableMapping.ColumnMappings.Add("KVA", "KVA");
            tableMapping.ColumnMappings.Add("Kvar", "Kvar");
            tableMapping.ColumnMappings.Add("Amp", "Amp");
            tableMapping.ColumnMappings.Add("Voltage", "Voltage");
            tableMapping.ColumnMappings.Add("PF", "PF");
            tableMapping.ColumnMappings.Add("kvarh_I", "kvarh_I");
            tableMapping.ColumnMappings.Add("kvarh_C", "kvarh_C");
            tableMapping.ColumnMappings.Add("kVAh", "kVAh");
            tableMapping.ColumnMappings.Add("MAX_DEMAND", "MAX_DEMAND");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ISRAEL_ELECTRIC] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[ISRAEL_ELECTRIC] ([METER], [DDATE], [RES], [RES3], [CurrentR], [CurrentS], [CurrentT], [VoltageR], [VoltageS], [VoltageT], [KVA_R], [KVA_S], [KVA_T], [KvarR], [KvarS], [KvarT], [kwR], [kwS], [kwT], [PF_R], [PF_S], [PF_T], [Hz], [kw], [REACTIVE_APPRENT], [REACTIVE_DEMAND], [KVA], [Kvar], [Amp], [Voltage], [PF], [kvarh_I], [kvarh_C], [kVAh], [MAX_DEMAND]) VALUES (@METER, @DDATE, @RES, @RES3, @CurrentR, @CurrentS, @CurrentT, @VoltageR, @VoltageS, @VoltageT, @KVA_R, @KVA_S, @KVA_T, @KvarR, @KvarS, @KvarT, @kwR, @kwS, @kwT, @PF_R, @PF_S, @PF_T, @Hz, @kw, @REACTIVE_APPRENT, @REACTIVE_DEMAND, @KVA, @Kvar, @Amp, @Voltage, @PF, @kvarh_I, @kvarh_C, @kVAh, @MAX_DEMAND)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES3", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VoltageR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VoltageR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VoltageS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VoltageS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VoltageT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VoltageT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA_R", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA_R", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA_S", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA_S", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA_T", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA_T", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KvarR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KvarR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KvarS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KvarS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KvarT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KvarT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kwR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kwR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kwS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kwS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kwT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kwT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF_R", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF_R", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF_S", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF_S", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF_T", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF_T", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Hz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kw", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kw", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@REACTIVE_APPRENT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "REACTIVE_APPRENT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@REACTIVE_DEMAND", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "REACTIVE_DEMAND", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Kvar", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kvar", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Voltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Voltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kvarh_I", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kvarh_I", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kvarh_C", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kvarh_C", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kVAh", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kVAh", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX_DEMAND", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_DEMAND", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[ISRAEL_ELECTRIC] SET [METER] = @METER, [DDATE] = @DDATE, [RES] = @RES, [RES3] = @RES3, [CurrentR] = @CurrentR, [CurrentS] = @CurrentS, [CurrentT] = @CurrentT, [VoltageR] = @VoltageR, [VoltageS] = @VoltageS, [VoltageT] = @VoltageT, [KVA_R] = @KVA_R, [KVA_S] = @KVA_S, [KVA_T] = @KVA_T, [KvarR] = @KvarR, [KvarS] = @KvarS, [KvarT] = @KvarT, [kwR] = @kwR, [kwS] = @kwS, [kwT] = @kwT, [PF_R] = @PF_R, [PF_S] = @PF_S, [PF_T] = @PF_T, [Hz] = @Hz, [kw] = @kw, [REACTIVE_APPRENT] = @REACTIVE_APPRENT, [REACTIVE_DEMAND] = @REACTIVE_DEMAND, [KVA] = @KVA, [Kvar] = @Kvar, [Amp] = @Amp, [Voltage] = @Voltage, [PF] = @PF, [kvarh_I] = @kvarh_I, [kvarh_C] = @kvarh_C, [kVAh] = @kVAh, [MAX_DEMAND] = @MAX_DEMAND WHERE (([ID] = @Original_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES3", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CurrentT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CurrentT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VoltageR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VoltageR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VoltageS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VoltageS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VoltageT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VoltageT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA_R", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA_R", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA_S", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA_S", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA_T", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA_T", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KvarR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KvarR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KvarS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KvarS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KvarT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KvarT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kwR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kwR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kwS", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kwS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kwT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kwT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF_R", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF_R", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF_S", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF_S", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF_T", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF_T", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Hz", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Hz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kw", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kw", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@REACTIVE_APPRENT", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "REACTIVE_APPRENT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@REACTIVE_DEMAND", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "REACTIVE_DEMAND", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@KVA", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "KVA", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Kvar", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Kvar", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Amp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Amp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Voltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Voltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PF", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PF", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kvarh_I", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kvarh_I", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kvarh_C", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kvarh_C", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@kVAh", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "kVAh", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX_DEMAND", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX_DEMAND", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID, METER, DDATE, RES, RES3, CurrentR, CurrentS, CurrentT, VoltageR, VoltageS, VoltageT, KVA_R, KVA_S, KVA_T, KvarR, KvarS, KvarT, kwR, kwS, kwT, PF_R, PF_S, PF_T, Hz, kw, REACTIVE_APPRENT, REACTIVE_DEMAND, KVA, Kvar, Amp, Voltage, PF, kvarh_I, kvarh_C, kVAh, MAX_DEMAND FROM dbo.ISRAEL_ELECTRIC";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.ISRAEL_ELECTRICDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.ISRAEL_ELECTRICDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.ISRAEL_ELECTRICDataTable dataTable = new GadirDataSet.ISRAEL_ELECTRICDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.ISRAEL_ELECTRICDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ISRAEL_ELECTRIC");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int METER, 
                    System.DateTime DDATE, 
                    byte RES, 
                    global::System.Nullable<byte> RES3, 
                    global::System.Nullable<double> CurrentR, 
                    global::System.Nullable<double> CurrentS, 
                    global::System.Nullable<double> CurrentT, 
                    global::System.Nullable<double> VoltageR, 
                    global::System.Nullable<double> VoltageS, 
                    global::System.Nullable<double> VoltageT, 
                    global::System.Nullable<double> KVA_R, 
                    global::System.Nullable<double> KVA_S, 
                    global::System.Nullable<double> KVA_T, 
                    global::System.Nullable<double> KvarR, 
                    global::System.Nullable<double> KvarS, 
                    global::System.Nullable<double> KvarT, 
                    global::System.Nullable<double> kwR, 
                    global::System.Nullable<double> kwS, 
                    global::System.Nullable<double> kwT, 
                    global::System.Nullable<double> PF_R, 
                    global::System.Nullable<double> PF_S, 
                    global::System.Nullable<double> PF_T, 
                    global::System.Nullable<double> Hz, 
                    global::System.Nullable<double> kw, 
                    global::System.Nullable<double> REACTIVE_APPRENT, 
                    global::System.Nullable<double> REACTIVE_DEMAND, 
                    global::System.Nullable<double> KVA, 
                    global::System.Nullable<double> Kvar, 
                    global::System.Nullable<double> Amp, 
                    global::System.Nullable<double> Voltage, 
                    global::System.Nullable<double> PF, 
                    global::System.Nullable<double> kvarh_I, 
                    global::System.Nullable<double> kvarh_C, 
                    global::System.Nullable<double> kVAh, 
                    global::System.Nullable<double> MAX_DEMAND) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(METER));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(DDATE));
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(RES));
            if ((RES3.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((byte)(RES3.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((CurrentR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((double)(CurrentR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CurrentS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((double)(CurrentS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CurrentT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(CurrentT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((VoltageR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(VoltageR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((VoltageS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((double)(VoltageS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((VoltageT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((double)(VoltageT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((KVA_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((double)(KVA_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((KVA_S.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((double)(KVA_S.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((KVA_T.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((double)(KVA_T.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((KvarR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((double)(KvarR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((KvarS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(KvarS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((KvarT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((double)(KvarT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((kwR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((double)(kwR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((kwS.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((double)(kwS.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((kwT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(kwT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PF_R.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(PF_R.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((PF_S.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((double)(PF_S.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((PF_T.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(PF_T.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Hz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(Hz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((kw.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((double)(kw.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((REACTIVE_APPRENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((double)(REACTIVE_APPRENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((REACTIVE_DEMAND.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((double)(REACTIVE_DEMAND.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((KVA.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((double)(KVA.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Kvar.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((double)(Kvar.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Amp.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[28].Value = ((double)(Amp.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Voltage.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[29].Value = ((double)(Voltage.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((PF.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[30].Value = ((double)(PF.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((kvarh_I.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[31].Value = ((double)(kvarh_I.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((kvarh_C.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[32].Value = ((double)(kvarh_C.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((kVAh.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[33].Value = ((double)(kVAh.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((MAX_DEMAND.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[34].Value = ((double)(MAX_DEMAND.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int METER, 
                    System.DateTime DDATE, 
                    byte RES, 
                    global::System.Nullable<byte> RES3, 
                    global::System.Nullable<double> CurrentR, 
                    global::System.Nullable<double> CurrentS, 
                    global::System.Nullable<double> CurrentT, 
                    global::System.Nullable<double> VoltageR, 
                    global::System.Nullable<double> VoltageS, 
                    global::System.Nullable<double> VoltageT, 
                    global::System.Nullable<double> KVA_R, 
                    global::System.Nullable<double> KVA_S, 
                    global::System.Nullable<double> KVA_T, 
                    global::System.Nullable<double> KvarR, 
                    global::System.Nullable<double> KvarS, 
                    global::System.Nullable<double> KvarT, 
                    global::System.Nullable<double> kwR, 
                    global::System.Nullable<double> kwS, 
                    global::System.Nullable<double> kwT, 
                    global::System.Nullable<double> PF_R, 
                    global::System.Nullable<double> PF_S, 
                    global::System.Nullable<double> PF_T, 
                    global::System.Nullable<double> Hz, 
                    global::System.Nullable<double> kw, 
                    global::System.Nullable<double> REACTIVE_APPRENT, 
                    global::System.Nullable<double> REACTIVE_DEMAND, 
                    global::System.Nullable<double> KVA, 
                    global::System.Nullable<double> Kvar, 
                    global::System.Nullable<double> Amp, 
                    global::System.Nullable<double> Voltage, 
                    global::System.Nullable<double> PF, 
                    global::System.Nullable<double> kvarh_I, 
                    global::System.Nullable<double> kvarh_C, 
                    global::System.Nullable<double> kVAh, 
                    global::System.Nullable<double> MAX_DEMAND, 
                    int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(METER));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(DDATE));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(RES));
            if ((RES3.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((byte)(RES3.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((CurrentR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(CurrentR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((CurrentS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(CurrentS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((CurrentT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(CurrentT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((VoltageR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(VoltageR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((VoltageS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(VoltageS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((VoltageT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(VoltageT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((KVA_R.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(KVA_R.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((KVA_S.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(KVA_S.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((KVA_T.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(KVA_T.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((KvarR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(KvarR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((KvarS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(KvarS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((KvarT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(KvarT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((kwR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(kwR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((kwS.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(kwS.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((kwT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(kwT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((PF_R.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(PF_R.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((PF_S.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(PF_S.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((PF_T.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(PF_T.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((Hz.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Hz.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((kw.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(kw.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((REACTIVE_APPRENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(REACTIVE_APPRENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((REACTIVE_DEMAND.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((double)(REACTIVE_DEMAND.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((KVA.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((double)(KVA.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Kvar.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((double)(Kvar.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Amp.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((double)(Amp.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Voltage.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(Voltage.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((PF.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(PF.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((kvarh_I.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(kvarh_I.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((kvarh_C.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((double)(kvarh_C.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            if ((kVAh.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((double)(kVAh.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((MAX_DEMAND.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((double)(MAX_DEMAND.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class METER_TYPETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public METER_TYPETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "METER_TYPE";
            tableMapping.ColumnMappings.Add("CODE_METER_TYPE", "CODE_METER_TYPE");
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[METER_TYPE] WHERE (([CODE_METER_TYPE] = @Original_CODE_METER_T" +
                "YPE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE_METER_TYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE_METER_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[METER_TYPE] ([CODE_METER_TYPE], [DESCRIPTION]) VALUES (@CODE_M" +
                "ETER_TYPE, @DESCRIPTION)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE_METER_TYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE_METER_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DESCRIPTION", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[METER_TYPE] SET [CODE_METER_TYPE] = @CODE_METER_TYPE, [DESCRIPTION]" +
                " = @DESCRIPTION WHERE (([CODE_METER_TYPE] = @Original_CODE_METER_TYPE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE_METER_TYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE_METER_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DESCRIPTION", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DESCRIPTION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE_METER_TYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE_METER_TYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE_METER_TYPE, DESCRIPTION FROM dbo.METER_TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.METER_TYPEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.METER_TYPEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.METER_TYPEDataTable dataTable = new GadirDataSet.METER_TYPEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.METER_TYPEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "METER_TYPE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CODE_METER_TYPE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CODE_METER_TYPE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CODE_METER_TYPE, string DESCRIPTION) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CODE_METER_TYPE));
            if ((DESCRIPTION == null)) {
                throw new global::System.ArgumentNullException("DESCRIPTION");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DESCRIPTION));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CODE_METER_TYPE, string DESCRIPTION, int Original_CODE_METER_TYPE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CODE_METER_TYPE));
            if ((DESCRIPTION == null)) {
                throw new global::System.ArgumentNullException("DESCRIPTION");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DESCRIPTION));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_CODE_METER_TYPE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string DESCRIPTION, int Original_CODE_METER_TYPE) {
            return this.Update(Original_CODE_METER_TYPE, DESCRIPTION, Original_CODE_METER_TYPE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class METERSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public METERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "METERS";
            tableMapping.ColumnMappings.Add("DB_UNIQUE_ID", "DB_UNIQUE_ID");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("TREE_NO", "TREE_NO");
            tableMapping.ColumnMappings.Add("METER_TYPE", "METER_TYPE");
            tableMapping.ColumnMappings.Add("USER_NO", "USER_NO");
            tableMapping.ColumnMappings.Add("ADRESS", "ADRESS");
            tableMapping.ColumnMappings.Add("CONCENTRATOR", "CONCENTRATOR");
            tableMapping.ColumnMappings.Add("INSTALLATION_DATE", "INSTALLATION_DATE");
            tableMapping.ColumnMappings.Add("DETAILS", "DETAILS");
            tableMapping.ColumnMappings.Add("SERIAL_NO", "SERIAL_NO");
            tableMapping.ColumnMappings.Add("METER_ID", "METER_ID");
            tableMapping.ColumnMappings.Add("PARAMETER", "PARAMETER");
            tableMapping.ColumnMappings.Add("COMMUNICATION", "COMMUNICATION");
            tableMapping.ColumnMappings.Add("BASE_VALUE", "BASE_VALUE");
            tableMapping.ColumnMappings.Add("PULSE_RATIO", "PULSE_RATIO");
            tableMapping.ColumnMappings.Add("CT_RATIO1", "CT_RATIO1");
            tableMapping.ColumnMappings.Add("CT_RATIO2", "CT_RATIO2");
            tableMapping.ColumnMappings.Add("NUMBER_OF_CT", "NUMBER_OF_CT");
            tableMapping.ColumnMappings.Add("PARTIAL_FACTOR", "PARTIAL_FACTOR");
            tableMapping.ColumnMappings.Add("MULTIPLY", "MULTIPLY");
            tableMapping.ColumnMappings.Add("VIRTUAL", "VIRTUAL");
            tableMapping.ColumnMappings.Add("MAX", "MAX");
            tableMapping.ColumnMappings.Add("MIN", "MIN");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[METERS] WHERE (([DB_UNIQUE_ID] = @Original_DB_UNIQUE_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DB_UNIQUE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DB_UNIQUE_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[METERS] ([DB_UNIQUE_ID], [NAME], [TREE_NO], [METER_TYPE], [USER_NO], [ADRESS], [CONCENTRATOR], [INSTALLATION_DATE], [DETAILS], [SERIAL_NO], [METER_ID], [PARAMETER], [COMMUNICATION], [BASE_VALUE], [PULSE_RATIO], [CT_RATIO1], [CT_RATIO2], [NUMBER_OF_CT], [PARTIAL_FACTOR], [MULTIPLY], [VIRTUAL], [MAX], [MIN]) VALUES (@DB_UNIQUE_ID, @NAME, @TREE_NO, @METER_TYPE, @USER_NO, @ADRESS, @CONCENTRATOR, @INSTALLATION_DATE, @DETAILS, @SERIAL_NO, @METER_ID, @PARAMETER, @COMMUNICATION, @BASE_VALUE, @PULSE_RATIO, @CT_RATIO1, @CT_RATIO2, @NUMBER_OF_CT, @PARTIAL_FACTOR, @MULTIPLY, @VIRTUAL, @MAX, @MIN)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DB_UNIQUE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DB_UNIQUE_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER_TYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADRESS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CONCENTRATOR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CONCENTRATOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INSTALLATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INSTALLATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DETAILS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DETAILS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SERIAL_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SERIAL_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARAMETER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARAMETER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMMUNICATION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMMUNICATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BASE_VALUE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BASE_VALUE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PULSE_RATIO", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PULSE_RATIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CT_RATIO1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CT_RATIO1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CT_RATIO2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CT_RATIO2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NUMBER_OF_CT", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NUMBER_OF_CT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARTIAL_FACTOR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARTIAL_FACTOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MULTIPLY", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MULTIPLY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VIRTUAL", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VIRTUAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MIN", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[METERS] SET [DB_UNIQUE_ID] = @DB_UNIQUE_ID, [NAME] = @NAME, [TREE_NO] = @TREE_NO, [METER_TYPE] = @METER_TYPE, [USER_NO] = @USER_NO, [ADRESS] = @ADRESS, [CONCENTRATOR] = @CONCENTRATOR, [INSTALLATION_DATE] = @INSTALLATION_DATE, [DETAILS] = @DETAILS, [SERIAL_NO] = @SERIAL_NO, [METER_ID] = @METER_ID, [PARAMETER] = @PARAMETER, [COMMUNICATION] = @COMMUNICATION, [BASE_VALUE] = @BASE_VALUE, [PULSE_RATIO] = @PULSE_RATIO, [CT_RATIO1] = @CT_RATIO1, [CT_RATIO2] = @CT_RATIO2, [NUMBER_OF_CT] = @NUMBER_OF_CT, [PARTIAL_FACTOR] = @PARTIAL_FACTOR, [MULTIPLY] = @MULTIPLY, [VIRTUAL] = @VIRTUAL, [MAX] = @MAX, [MIN] = @MIN WHERE (([DB_UNIQUE_ID] = @Original_DB_UNIQUE_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DB_UNIQUE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DB_UNIQUE_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER_TYPE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@USER_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "USER_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADRESS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CONCENTRATOR", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CONCENTRATOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@INSTALLATION_DATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "INSTALLATION_DATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DETAILS", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DETAILS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SERIAL_NO", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SERIAL_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER_ID", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER_ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARAMETER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARAMETER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@COMMUNICATION", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "COMMUNICATION", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BASE_VALUE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BASE_VALUE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PULSE_RATIO", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PULSE_RATIO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CT_RATIO1", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CT_RATIO1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CT_RATIO2", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CT_RATIO2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NUMBER_OF_CT", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NUMBER_OF_CT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARTIAL_FACTOR", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARTIAL_FACTOR", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MULTIPLY", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MULTIPLY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VIRTUAL", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VIRTUAL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MAX", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MAX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MIN", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DB_UNIQUE_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DB_UNIQUE_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT DB_UNIQUE_ID, NAME, TREE_NO, METER_TYPE, USER_NO, ADRESS, CONCENTRATOR, INSTALLATION_DATE, DETAILS, SERIAL_NO, METER_ID, PARAMETER, COMMUNICATION, BASE_VALUE, PULSE_RATIO, CT_RATIO1, CT_RATIO2, NUMBER_OF_CT, PARTIAL_FACTOR, MULTIPLY, VIRTUAL, MAX, MIN FROM dbo.METERS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.METERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.METERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.METERSDataTable dataTable = new GadirDataSet.METERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.METERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "METERS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DB_UNIQUE_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DB_UNIQUE_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    int DB_UNIQUE_ID, 
                    string NAME, 
                    global::System.Nullable<int> TREE_NO, 
                    global::System.Nullable<int> METER_TYPE, 
                    global::System.Nullable<int> USER_NO, 
                    string ADRESS, 
                    string CONCENTRATOR, 
                    global::System.Nullable<global::System.DateTime> INSTALLATION_DATE, 
                    string DETAILS, 
                    string SERIAL_NO, 
                    string METER_ID, 
                    global::System.Nullable<int> PARAMETER, 
                    global::System.Nullable<int> COMMUNICATION, 
                    global::System.Nullable<int> BASE_VALUE, 
                    global::System.Nullable<double> PULSE_RATIO, 
                    global::System.Nullable<short> CT_RATIO1, 
                    global::System.Nullable<short> CT_RATIO2, 
                    global::System.Nullable<byte> NUMBER_OF_CT, 
                    global::System.Nullable<double> PARTIAL_FACTOR, 
                    global::System.Nullable<double> MULTIPLY, 
                    global::System.Nullable<short> VIRTUAL, 
                    global::System.Nullable<double> MAX, 
                    global::System.Nullable<double> MIN) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DB_UNIQUE_ID));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((TREE_NO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((int)(TREE_NO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((METER_TYPE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(METER_TYPE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((USER_NO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(USER_NO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ADRESS == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ADRESS));
            }
            if ((CONCENTRATOR == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CONCENTRATOR));
            }
            if ((INSTALLATION_DATE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(INSTALLATION_DATE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DETAILS == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(DETAILS));
            }
            if ((SERIAL_NO == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(SERIAL_NO));
            }
            if ((METER_ID == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(METER_ID));
            }
            if ((PARAMETER.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(PARAMETER.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((COMMUNICATION.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(COMMUNICATION.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((BASE_VALUE.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(BASE_VALUE.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((PULSE_RATIO.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((double)(PULSE_RATIO.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CT_RATIO1.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((short)(CT_RATIO1.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CT_RATIO2.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[16].Value = ((short)(CT_RATIO2.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((NUMBER_OF_CT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[17].Value = ((byte)(NUMBER_OF_CT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PARTIAL_FACTOR.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((double)(PARTIAL_FACTOR.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((MULTIPLY.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[19].Value = ((double)(MULTIPLY.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((VIRTUAL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((short)(VIRTUAL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((MAX.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[21].Value = ((double)(MAX.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((MIN.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[22].Value = ((double)(MIN.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int DB_UNIQUE_ID, 
                    string NAME, 
                    global::System.Nullable<int> TREE_NO, 
                    global::System.Nullable<int> METER_TYPE, 
                    global::System.Nullable<int> USER_NO, 
                    string ADRESS, 
                    string CONCENTRATOR, 
                    global::System.Nullable<global::System.DateTime> INSTALLATION_DATE, 
                    string DETAILS, 
                    string SERIAL_NO, 
                    string METER_ID, 
                    global::System.Nullable<int> PARAMETER, 
                    global::System.Nullable<int> COMMUNICATION, 
                    global::System.Nullable<int> BASE_VALUE, 
                    global::System.Nullable<double> PULSE_RATIO, 
                    global::System.Nullable<short> CT_RATIO1, 
                    global::System.Nullable<short> CT_RATIO2, 
                    global::System.Nullable<byte> NUMBER_OF_CT, 
                    global::System.Nullable<double> PARTIAL_FACTOR, 
                    global::System.Nullable<double> MULTIPLY, 
                    global::System.Nullable<short> VIRTUAL, 
                    global::System.Nullable<double> MAX, 
                    global::System.Nullable<double> MIN, 
                    int Original_DB_UNIQUE_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DB_UNIQUE_ID));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((TREE_NO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(TREE_NO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((METER_TYPE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(METER_TYPE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((USER_NO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(USER_NO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ADRESS == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ADRESS));
            }
            if ((CONCENTRATOR == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CONCENTRATOR));
            }
            if ((INSTALLATION_DATE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(INSTALLATION_DATE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DETAILS == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(DETAILS));
            }
            if ((SERIAL_NO == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(SERIAL_NO));
            }
            if ((METER_ID == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(METER_ID));
            }
            if ((PARAMETER.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(PARAMETER.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((COMMUNICATION.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(COMMUNICATION.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((BASE_VALUE.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(BASE_VALUE.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((PULSE_RATIO.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(PULSE_RATIO.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((CT_RATIO1.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((short)(CT_RATIO1.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((CT_RATIO2.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((short)(CT_RATIO2.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((NUMBER_OF_CT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((byte)(NUMBER_OF_CT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((PARTIAL_FACTOR.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(PARTIAL_FACTOR.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((MULTIPLY.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(MULTIPLY.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((VIRTUAL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((short)(VIRTUAL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            if ((MAX.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(MAX.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            if ((MIN.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(MIN.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_DB_UNIQUE_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string NAME, 
                    global::System.Nullable<int> TREE_NO, 
                    global::System.Nullable<int> METER_TYPE, 
                    global::System.Nullable<int> USER_NO, 
                    string ADRESS, 
                    string CONCENTRATOR, 
                    global::System.Nullable<global::System.DateTime> INSTALLATION_DATE, 
                    string DETAILS, 
                    string SERIAL_NO, 
                    string METER_ID, 
                    global::System.Nullable<int> PARAMETER, 
                    global::System.Nullable<int> COMMUNICATION, 
                    global::System.Nullable<int> BASE_VALUE, 
                    global::System.Nullable<double> PULSE_RATIO, 
                    global::System.Nullable<short> CT_RATIO1, 
                    global::System.Nullable<short> CT_RATIO2, 
                    global::System.Nullable<byte> NUMBER_OF_CT, 
                    global::System.Nullable<double> PARTIAL_FACTOR, 
                    global::System.Nullable<double> MULTIPLY, 
                    global::System.Nullable<short> VIRTUAL, 
                    global::System.Nullable<double> MAX, 
                    global::System.Nullable<double> MIN, 
                    int Original_DB_UNIQUE_ID) {
            return this.Update(Original_DB_UNIQUE_ID, NAME, TREE_NO, METER_TYPE, USER_NO, ADRESS, CONCENTRATOR, INSTALLATION_DATE, DETAILS, SERIAL_NO, METER_ID, PARAMETER, COMMUNICATION, BASE_VALUE, PULSE_RATIO, CT_RATIO1, CT_RATIO2, NUMBER_OF_CT, PARTIAL_FACTOR, MULTIPLY, VIRTUAL, MAX, MIN, Original_DB_UNIQUE_ID);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PARAMETERSTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PARAMETERSTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PARAMETERS";
            tableMapping.ColumnMappings.Add("CODE", "CODE");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("IsElectric", "IsElectric");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[PARAMETERS] WHERE (([CODE] = @Original_CODE))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[PARAMETERS] ([CODE], [NAME], [IsElectric]) VALUES (@CODE, @NAM" +
                "E, @IsElectric)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsElectric", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsElectric", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[PARAMETERS] SET [CODE] = @CODE, [NAME] = @NAME, [IsElectric] = @IsE" +
                "lectric WHERE (([CODE] = @Original_CODE))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsElectric", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsElectric", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CODE", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CODE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CODE, NAME, IsElectric FROM dbo.PARAMETERS";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.PARAMETERSDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.PARAMETERSDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.PARAMETERSDataTable dataTable = new GadirDataSet.PARAMETERSDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.PARAMETERSDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PARAMETERS");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_CODE) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int CODE, string NAME, global::System.Nullable<bool> IsElectric) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(CODE));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((IsElectric.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(IsElectric.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int CODE, string NAME, global::System.Nullable<bool> IsElectric, int Original_CODE) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(CODE));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((IsElectric.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(IsElectric.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_CODE));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, global::System.Nullable<bool> IsElectric, int Original_CODE) {
            return this.Update(Original_CODE, NAME, IsElectric, Original_CODE);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TREETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TREETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TREE";
            tableMapping.ColumnMappings.Add("TREE_NO", "TREE_NO");
            tableMapping.ColumnMappings.Add("NAME", "NAME");
            tableMapping.ColumnMappings.Add("TREE_LEVEL", "TREE_LEVEL");
            tableMapping.ColumnMappings.Add("PARENT", "PARENT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TREE] WHERE (([TREE_NO] = @Original_TREE_NO))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TREE] ([TREE_NO], [NAME], [TREE_LEVEL], [PARENT]) VALUES (@TRE" +
                "E_NO, @NAME, @TREE_LEVEL, @PARENT)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_LEVEL", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_LEVEL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARENT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARENT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TREE] SET [TREE_NO] = @TREE_NO, [NAME] = @NAME, [TREE_LEVEL] = @TRE" +
                "E_LEVEL, [PARENT] = @PARENT WHERE (([TREE_NO] = @Original_TREE_NO))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NAME", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TREE_LEVEL", global::System.Data.SqlDbType.SmallInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_LEVEL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PARENT", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PARENT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TREE_NO", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TREE_NO", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TREE_NO, NAME, TREE_LEVEL, PARENT FROM dbo.TREE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.TREEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.TREEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.TREEDataTable dataTable = new GadirDataSet.TREEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.TREEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TREE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TREE_NO) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TREE_NO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TREE_NO, string NAME, global::System.Nullable<short> TREE_LEVEL, global::System.Nullable<int> PARENT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TREE_NO));
            if ((NAME == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((TREE_LEVEL.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((short)(TREE_LEVEL.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PARENT.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((int)(PARENT.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int TREE_NO, string NAME, global::System.Nullable<short> TREE_LEVEL, global::System.Nullable<int> PARENT, int Original_TREE_NO) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TREE_NO));
            if ((NAME == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(NAME));
            }
            if ((TREE_LEVEL.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(TREE_LEVEL.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((PARENT.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(PARENT.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_TREE_NO));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string NAME, global::System.Nullable<short> TREE_LEVEL, global::System.Nullable<int> PARENT, int Original_TREE_NO) {
            return this.Update(Original_TREE_NO, NAME, TREE_LEVEL, PARENT, Original_TREE_NO);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ISRAEL_READINGTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ISRAEL_READINGTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ISRAEL_READING";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("METER", "METER");
            tableMapping.ColumnMappings.Add("RES", "RES");
            tableMapping.ColumnMappings.Add("RES3", "RES3");
            tableMapping.ColumnMappings.Add("DDATE", "DDATE");
            tableMapping.ColumnMappings.Add("PEAK", "PEAK");
            tableMapping.ColumnMappings.Add("HIGH", "HIGH");
            tableMapping.ColumnMappings.Add("LOW", "LOW");
            tableMapping.ColumnMappings.Add("D", "D");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ISRAEL_READING] WHERE (([ID] = @Original_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ISRAEL_READING] ([METER], [RES], [RES3], [DDATE], [PEAK], [HIG" +
                "H], [LOW], [D]) VALUES (@METER, @RES, @RES3, @DDATE, @PEAK, @HIGH, @LOW, @D)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES3", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PEAK", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PEAK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HIGH", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HIGH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOW", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@D", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "D", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ISRAEL_READING] SET [METER] = @METER, [RES] = @RES, [RES3] = @RES3," +
                " [DDATE] = @DDATE, [PEAK] = @PEAK, [HIGH] = @HIGH, [LOW] = @LOW, [D] = @D WHERE " +
                "(([ID] = @Original_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@METER", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "METER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RES3", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RES3", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DDATE", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DDATE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PEAK", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PEAK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HIGH", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HIGH", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOW", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOW", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@D", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "D", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["ngadirdoradosConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, METER, RES, RES3, DDATE, PEAK, HIGH, LOW, D FROM dbo.ISRAEL_READING";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(GadirDataSet.ISRAEL_READINGDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual GadirDataSet.ISRAEL_READINGDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            GadirDataSet.ISRAEL_READINGDataTable dataTable = new GadirDataSet.ISRAEL_READINGDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet.ISRAEL_READINGDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(GadirDataSet dataSet) {
            return this.Adapter.Update(dataSet, "ISRAEL_READING");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int METER, byte RES, byte RES3, System.DateTime DDATE, double PEAK, double HIGH, double LOW, global::System.Nullable<double> D) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(METER));
            this.Adapter.InsertCommand.Parameters[1].Value = ((byte)(RES));
            this.Adapter.InsertCommand.Parameters[2].Value = ((byte)(RES3));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(DDATE));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(PEAK));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(HIGH));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(LOW));
            if ((D.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((double)(D.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int METER, byte RES, byte RES3, System.DateTime DDATE, double PEAK, double HIGH, double LOW, global::System.Nullable<double> D, int Original_ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(METER));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((byte)(RES));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((byte)(RES3));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(DDATE));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(PEAK));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(HIGH));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(LOW));
            if ((D.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(D.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private ALARM_LISTTableAdapter _aLARM_LISTTableAdapter;
        
        private USERSTableAdapter _uSERSTableAdapter;
        
        private ALARM_STATUSTableAdapter _aLARM_STATUSTableAdapter;
        
        private ALARM_TYPETableAdapter _aLARM_TYPETableAdapter;
        
        private COMUNICATION_TYPETableAdapter _cOMUNICATION_TYPETableAdapter;
        
        private CONCENTRATORSTableAdapter _cONCENTRATORSTableAdapter;
        
        private HOLIDAYSTableAdapter _hOLIDAYSTableAdapter;
        
        private ISRAEL_ELECTRICTableAdapter _iSRAEL_ELECTRICTableAdapter;
        
        private METER_TYPETableAdapter _mETER_TYPETableAdapter;
        
        private METERSTableAdapter _mETERSTableAdapter;
        
        private PARAMETERSTableAdapter _pARAMETERSTableAdapter;
        
        private TREETableAdapter _tREETableAdapter;
        
        private ISRAEL_READINGTableAdapter _iSRAEL_READINGTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ALARM_LISTTableAdapter ALARM_LISTTableAdapter {
            get {
                return this._aLARM_LISTTableAdapter;
            }
            set {
                this._aLARM_LISTTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public USERSTableAdapter USERSTableAdapter {
            get {
                return this._uSERSTableAdapter;
            }
            set {
                this._uSERSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ALARM_STATUSTableAdapter ALARM_STATUSTableAdapter {
            get {
                return this._aLARM_STATUSTableAdapter;
            }
            set {
                this._aLARM_STATUSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ALARM_TYPETableAdapter ALARM_TYPETableAdapter {
            get {
                return this._aLARM_TYPETableAdapter;
            }
            set {
                this._aLARM_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public COMUNICATION_TYPETableAdapter COMUNICATION_TYPETableAdapter {
            get {
                return this._cOMUNICATION_TYPETableAdapter;
            }
            set {
                this._cOMUNICATION_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public CONCENTRATORSTableAdapter CONCENTRATORSTableAdapter {
            get {
                return this._cONCENTRATORSTableAdapter;
            }
            set {
                this._cONCENTRATORSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public HOLIDAYSTableAdapter HOLIDAYSTableAdapter {
            get {
                return this._hOLIDAYSTableAdapter;
            }
            set {
                this._hOLIDAYSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ISRAEL_ELECTRICTableAdapter ISRAEL_ELECTRICTableAdapter {
            get {
                return this._iSRAEL_ELECTRICTableAdapter;
            }
            set {
                this._iSRAEL_ELECTRICTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public METER_TYPETableAdapter METER_TYPETableAdapter {
            get {
                return this._mETER_TYPETableAdapter;
            }
            set {
                this._mETER_TYPETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public METERSTableAdapter METERSTableAdapter {
            get {
                return this._mETERSTableAdapter;
            }
            set {
                this._mETERSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public PARAMETERSTableAdapter PARAMETERSTableAdapter {
            get {
                return this._pARAMETERSTableAdapter;
            }
            set {
                this._pARAMETERSTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TREETableAdapter TREETableAdapter {
            get {
                return this._tREETableAdapter;
            }
            set {
                this._tREETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public ISRAEL_READINGTableAdapter ISRAEL_READINGTableAdapter {
            get {
                return this._iSRAEL_READINGTableAdapter;
            }
            set {
                this._iSRAEL_READINGTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._aLARM_LISTTableAdapter != null) 
                            && (this._aLARM_LISTTableAdapter.Connection != null))) {
                    return this._aLARM_LISTTableAdapter.Connection;
                }
                if (((this._uSERSTableAdapter != null) 
                            && (this._uSERSTableAdapter.Connection != null))) {
                    return this._uSERSTableAdapter.Connection;
                }
                if (((this._aLARM_STATUSTableAdapter != null) 
                            && (this._aLARM_STATUSTableAdapter.Connection != null))) {
                    return this._aLARM_STATUSTableAdapter.Connection;
                }
                if (((this._aLARM_TYPETableAdapter != null) 
                            && (this._aLARM_TYPETableAdapter.Connection != null))) {
                    return this._aLARM_TYPETableAdapter.Connection;
                }
                if (((this._cOMUNICATION_TYPETableAdapter != null) 
                            && (this._cOMUNICATION_TYPETableAdapter.Connection != null))) {
                    return this._cOMUNICATION_TYPETableAdapter.Connection;
                }
                if (((this._cONCENTRATORSTableAdapter != null) 
                            && (this._cONCENTRATORSTableAdapter.Connection != null))) {
                    return this._cONCENTRATORSTableAdapter.Connection;
                }
                if (((this._hOLIDAYSTableAdapter != null) 
                            && (this._hOLIDAYSTableAdapter.Connection != null))) {
                    return this._hOLIDAYSTableAdapter.Connection;
                }
                if (((this._iSRAEL_ELECTRICTableAdapter != null) 
                            && (this._iSRAEL_ELECTRICTableAdapter.Connection != null))) {
                    return this._iSRAEL_ELECTRICTableAdapter.Connection;
                }
                if (((this._mETER_TYPETableAdapter != null) 
                            && (this._mETER_TYPETableAdapter.Connection != null))) {
                    return this._mETER_TYPETableAdapter.Connection;
                }
                if (((this._mETERSTableAdapter != null) 
                            && (this._mETERSTableAdapter.Connection != null))) {
                    return this._mETERSTableAdapter.Connection;
                }
                if (((this._pARAMETERSTableAdapter != null) 
                            && (this._pARAMETERSTableAdapter.Connection != null))) {
                    return this._pARAMETERSTableAdapter.Connection;
                }
                if (((this._tREETableAdapter != null) 
                            && (this._tREETableAdapter.Connection != null))) {
                    return this._tREETableAdapter.Connection;
                }
                if (((this._iSRAEL_READINGTableAdapter != null) 
                            && (this._iSRAEL_READINGTableAdapter.Connection != null))) {
                    return this._iSRAEL_READINGTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._aLARM_LISTTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._uSERSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._aLARM_STATUSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._aLARM_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cOMUNICATION_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._cONCENTRATORSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._hOLIDAYSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._iSRAEL_ELECTRICTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mETER_TYPETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._mETERSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._pARAMETERSTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tREETableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._iSRAEL_READINGTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(GadirDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cONCENTRATORSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.CONCENTRATORS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cONCENTRATORSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._cOMUNICATION_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.COMUNICATION_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._cOMUNICATION_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._pARAMETERSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PARAMETERS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pARAMETERSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mETER_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.METER_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mETER_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tREETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TREE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    this.SortSelfReferenceRows(updatedRows, dataSet.Relations["FK_TREE_TREE"], false);
                    result = (result + this._tREETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._mETERSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.METERS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._mETERSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._iSRAEL_READINGTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ISRAEL_READING.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._iSRAEL_READINGTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._iSRAEL_ELECTRICTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ISRAEL_ELECTRIC.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._iSRAEL_ELECTRICTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._uSERSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.USERS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._uSERSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._aLARM_LISTTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ALARM_LIST.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aLARM_LISTTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._aLARM_STATUSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ALARM_STATUS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aLARM_STATUSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._hOLIDAYSTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.HOLIDAYS.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._hOLIDAYSTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._aLARM_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.ALARM_TYPE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._aLARM_TYPETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(GadirDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._cONCENTRATORSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.CONCENTRATORS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cONCENTRATORSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._cOMUNICATION_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.COMUNICATION_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._cOMUNICATION_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._pARAMETERSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PARAMETERS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pARAMETERSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mETER_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.METER_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mETER_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tREETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TREE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    this.SortSelfReferenceRows(addedRows, dataSet.Relations["FK_TREE_TREE"], false);
                    result = (result + this._tREETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._mETERSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.METERS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._mETERSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._iSRAEL_READINGTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ISRAEL_READING.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._iSRAEL_READINGTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._iSRAEL_ELECTRICTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ISRAEL_ELECTRIC.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._iSRAEL_ELECTRICTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._uSERSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.USERS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._uSERSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._aLARM_LISTTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ALARM_LIST.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aLARM_LISTTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._aLARM_STATUSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ALARM_STATUS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aLARM_STATUSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._hOLIDAYSTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.HOLIDAYS.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._hOLIDAYSTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._aLARM_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.ALARM_TYPE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._aLARM_TYPETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(GadirDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._aLARM_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ALARM_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aLARM_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._hOLIDAYSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.HOLIDAYS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._hOLIDAYSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._aLARM_STATUSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ALARM_STATUS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aLARM_STATUSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._aLARM_LISTTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ALARM_LIST.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._aLARM_LISTTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._uSERSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.USERS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._uSERSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._iSRAEL_ELECTRICTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ISRAEL_ELECTRIC.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._iSRAEL_ELECTRICTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._iSRAEL_READINGTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.ISRAEL_READING.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._iSRAEL_READINGTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mETERSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.METERS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mETERSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tREETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TREE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    this.SortSelfReferenceRows(deletedRows, dataSet.Relations["FK_TREE_TREE"], true);
                    result = (result + this._tREETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._mETER_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.METER_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._mETER_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._pARAMETERSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PARAMETERS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pARAMETERSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cOMUNICATION_TYPETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.COMUNICATION_TYPE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cOMUNICATION_TYPETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._cONCENTRATORSTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.CONCENTRATORS.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._cONCENTRATORSTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(GadirDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._aLARM_LISTTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aLARM_LISTTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._uSERSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._uSERSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._aLARM_STATUSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aLARM_STATUSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._aLARM_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._aLARM_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cOMUNICATION_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cOMUNICATION_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._cONCENTRATORSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._cONCENTRATORSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._hOLIDAYSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._hOLIDAYSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._iSRAEL_ELECTRICTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._iSRAEL_ELECTRICTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mETER_TYPETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mETER_TYPETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._mETERSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._mETERSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._pARAMETERSTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pARAMETERSTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tREETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tREETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._iSRAEL_READINGTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._iSRAEL_READINGTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._aLARM_LISTTableAdapter != null)) {
                    revertConnections.Add(this._aLARM_LISTTableAdapter, this._aLARM_LISTTableAdapter.Connection);
                    this._aLARM_LISTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._aLARM_LISTTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._aLARM_LISTTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aLARM_LISTTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aLARM_LISTTableAdapter.Adapter);
                    }
                }
                if ((this._uSERSTableAdapter != null)) {
                    revertConnections.Add(this._uSERSTableAdapter, this._uSERSTableAdapter.Connection);
                    this._uSERSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._uSERSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._uSERSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._uSERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._uSERSTableAdapter.Adapter);
                    }
                }
                if ((this._aLARM_STATUSTableAdapter != null)) {
                    revertConnections.Add(this._aLARM_STATUSTableAdapter, this._aLARM_STATUSTableAdapter.Connection);
                    this._aLARM_STATUSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._aLARM_STATUSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._aLARM_STATUSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aLARM_STATUSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aLARM_STATUSTableAdapter.Adapter);
                    }
                }
                if ((this._aLARM_TYPETableAdapter != null)) {
                    revertConnections.Add(this._aLARM_TYPETableAdapter, this._aLARM_TYPETableAdapter.Connection);
                    this._aLARM_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._aLARM_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._aLARM_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._aLARM_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._aLARM_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._cOMUNICATION_TYPETableAdapter != null)) {
                    revertConnections.Add(this._cOMUNICATION_TYPETableAdapter, this._cOMUNICATION_TYPETableAdapter.Connection);
                    this._cOMUNICATION_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cOMUNICATION_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cOMUNICATION_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cOMUNICATION_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cOMUNICATION_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._cONCENTRATORSTableAdapter != null)) {
                    revertConnections.Add(this._cONCENTRATORSTableAdapter, this._cONCENTRATORSTableAdapter.Connection);
                    this._cONCENTRATORSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._cONCENTRATORSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._cONCENTRATORSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._cONCENTRATORSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._cONCENTRATORSTableAdapter.Adapter);
                    }
                }
                if ((this._hOLIDAYSTableAdapter != null)) {
                    revertConnections.Add(this._hOLIDAYSTableAdapter, this._hOLIDAYSTableAdapter.Connection);
                    this._hOLIDAYSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._hOLIDAYSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._hOLIDAYSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._hOLIDAYSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._hOLIDAYSTableAdapter.Adapter);
                    }
                }
                if ((this._iSRAEL_ELECTRICTableAdapter != null)) {
                    revertConnections.Add(this._iSRAEL_ELECTRICTableAdapter, this._iSRAEL_ELECTRICTableAdapter.Connection);
                    this._iSRAEL_ELECTRICTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._iSRAEL_ELECTRICTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._iSRAEL_ELECTRICTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._iSRAEL_ELECTRICTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._iSRAEL_ELECTRICTableAdapter.Adapter);
                    }
                }
                if ((this._mETER_TYPETableAdapter != null)) {
                    revertConnections.Add(this._mETER_TYPETableAdapter, this._mETER_TYPETableAdapter.Connection);
                    this._mETER_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mETER_TYPETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mETER_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mETER_TYPETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mETER_TYPETableAdapter.Adapter);
                    }
                }
                if ((this._mETERSTableAdapter != null)) {
                    revertConnections.Add(this._mETERSTableAdapter, this._mETERSTableAdapter.Connection);
                    this._mETERSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._mETERSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._mETERSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._mETERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._mETERSTableAdapter.Adapter);
                    }
                }
                if ((this._pARAMETERSTableAdapter != null)) {
                    revertConnections.Add(this._pARAMETERSTableAdapter, this._pARAMETERSTableAdapter.Connection);
                    this._pARAMETERSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pARAMETERSTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pARAMETERSTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pARAMETERSTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pARAMETERSTableAdapter.Adapter);
                    }
                }
                if ((this._tREETableAdapter != null)) {
                    revertConnections.Add(this._tREETableAdapter, this._tREETableAdapter.Connection);
                    this._tREETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tREETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tREETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tREETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tREETableAdapter.Adapter);
                    }
                }
                if ((this._iSRAEL_READINGTableAdapter != null)) {
                    revertConnections.Add(this._iSRAEL_READINGTableAdapter, this._iSRAEL_READINGTableAdapter.Connection);
                    this._iSRAEL_READINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._iSRAEL_READINGTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._iSRAEL_READINGTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._iSRAEL_READINGTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._iSRAEL_READINGTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._aLARM_LISTTableAdapter != null)) {
                    this._aLARM_LISTTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._aLARM_LISTTableAdapter]));
                    this._aLARM_LISTTableAdapter.Transaction = null;
                }
                if ((this._uSERSTableAdapter != null)) {
                    this._uSERSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._uSERSTableAdapter]));
                    this._uSERSTableAdapter.Transaction = null;
                }
                if ((this._aLARM_STATUSTableAdapter != null)) {
                    this._aLARM_STATUSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._aLARM_STATUSTableAdapter]));
                    this._aLARM_STATUSTableAdapter.Transaction = null;
                }
                if ((this._aLARM_TYPETableAdapter != null)) {
                    this._aLARM_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._aLARM_TYPETableAdapter]));
                    this._aLARM_TYPETableAdapter.Transaction = null;
                }
                if ((this._cOMUNICATION_TYPETableAdapter != null)) {
                    this._cOMUNICATION_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cOMUNICATION_TYPETableAdapter]));
                    this._cOMUNICATION_TYPETableAdapter.Transaction = null;
                }
                if ((this._cONCENTRATORSTableAdapter != null)) {
                    this._cONCENTRATORSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._cONCENTRATORSTableAdapter]));
                    this._cONCENTRATORSTableAdapter.Transaction = null;
                }
                if ((this._hOLIDAYSTableAdapter != null)) {
                    this._hOLIDAYSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._hOLIDAYSTableAdapter]));
                    this._hOLIDAYSTableAdapter.Transaction = null;
                }
                if ((this._iSRAEL_ELECTRICTableAdapter != null)) {
                    this._iSRAEL_ELECTRICTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._iSRAEL_ELECTRICTableAdapter]));
                    this._iSRAEL_ELECTRICTableAdapter.Transaction = null;
                }
                if ((this._mETER_TYPETableAdapter != null)) {
                    this._mETER_TYPETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mETER_TYPETableAdapter]));
                    this._mETER_TYPETableAdapter.Transaction = null;
                }
                if ((this._mETERSTableAdapter != null)) {
                    this._mETERSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._mETERSTableAdapter]));
                    this._mETERSTableAdapter.Transaction = null;
                }
                if ((this._pARAMETERSTableAdapter != null)) {
                    this._pARAMETERSTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pARAMETERSTableAdapter]));
                    this._pARAMETERSTableAdapter.Transaction = null;
                }
                if ((this._tREETableAdapter != null)) {
                    this._tREETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tREETableAdapter]));
                    this._tREETableAdapter.Transaction = null;
                }
                if ((this._iSRAEL_READINGTableAdapter != null)) {
                    this._iSRAEL_READINGTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._iSRAEL_READINGTableAdapter]));
                    this._iSRAEL_READINGTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591