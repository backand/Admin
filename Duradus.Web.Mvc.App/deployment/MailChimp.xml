<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MailChimp</name></assembly>
<members>
<member name="M:MailChimp.ExportApi.List(System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.MemberStatus},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.SegmentOptions},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Exports/dumps members of a list and all of their associated details.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to get members from.</param>
 <param name="status">[optional] The status to get members for.
 <para>Defaults to subscribed.</para></param>
 <param name="segmentOpts">[optional] Pull only a certain Segment of your list.
 <para>For help with what this object should contain refer to
 <see cref="MailChimp.MCApi.CampaignSegmentTest"/></para></param>
 <param name="since">[optional] Return members whose data has changed since a GMT timestamp.</param>
 <returns>Parsed list data</returns>
</member>
<member name="M:MailChimp.ExportApi.List(System.String,MailChimp.Types.Opt{MailChimp.Types.List.MemberStatus},MailChimp.Types.Opt{MailChimp.Types.Campaign.SegmentOptions},MailChimp.Types.Opt{System.DateTime})">
 <summary>Exports/dumps members of a list and all of their associated details.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to get members from.</param>
 <param name="status">[optional] The status to get members for.
 <para>Defaults to subscribed.</para></param>
 <param name="segmentOpts">[optional] Pull only a certain Segment of your list.
 <para>For help with what this object should contain refer to
 <see cref="MailChimp.MCApi.CampaignSegmentTest"/>.</para></param>
 <param name="since">[optional] Return members whose data has changed since a GMT timestamp.</param>
 <returns>Parsed list data.</returns>
</member>
<member name="M:MailChimp.ExportApi.EcommOrders(Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Exports/dumps all ecommerce orders for an account.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="since">[optional] Returns orders since a GMT timestamp.</param>
 <returns>Parsed ecommerce orders data.</returns>
</member>
<member name="M:MailChimp.ExportApi.EcommOrders(MailChimp.Types.Opt{System.DateTime})">
 <summary>Exports/dumps all ecommerce orders for an account.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="since">[optional] Returns orders since a GMT timestamp.</param>
 <returns>Parsed ecommerce orders data.</returns>
</member>
<member name="M:MailChimp.ExportApi.CampaignSubscriberActivity(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Exports/dumps all Subscriber Activity for the requested campaign.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The campaign id to retrieve stats for.</param>
 <param name="includeEmpty">[optional] If set to true a record for every email
 address sent to will be returned even if there is no activity data.
 <para>Defaults to false.</para></param>
 <param name="since">[optional] Returns activity recorded since a GMT timestamp.</param>
 <returns>Parsed subscribers activity data.</returns>
</member>
<member name="M:MailChimp.ExportApi.CampaignSubscriberActivity(System.String,MailChimp.Types.Opt{System.Boolean},MailChimp.Types.Opt{System.DateTime})">
 <summary>Exports/dumps all Subscriber Activity for the requested campaign.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The campaign id to retrieve stats for.</param>
 <param name="includeEmpty">[optional] If set to true a record for every email
 address sent to will be returned even if there is no activity data.
 <para>Defaults to false.</para></param>
 <param name="since">[optional] Returns activity recorded since a GMT timestamp.</param>
 <returns>Parsed subscribers activity data.</returns>
</member>
<member name="">

</member>
<member name="T:MailChimp.ExportApi">
 <summary>MailChimp Export API wrapper.</summary>
</member>
<member name="M:MailChimp.MCApi.Templates(Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Template.Types},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Template.Inactives},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Retrieves various templates available in the system,
 allowing some thing similar to our template gallery to be created.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="templateTypes">[optional] The types of templates to return.</param>
 <param name="inactives">[optional] Options to control how inactive templates
  are returned, if at all.</param>
 <param name="category">[optional] For Gallery templates only,
 limit to a specific template category.</param>
 <returns>The matching templates data.</returns>
</member>
<member name="M:MailChimp.MCApi.Templates(MailChimp.Types.Opt{MailChimp.Types.Template.Types},MailChimp.Types.Opt{MailChimp.Types.Template.Inactives},MailChimp.Types.Opt{System.String})">
 <summary>Retrieves various templates available in the system,
 allowing some thing similar to our template gallery to be created.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="templateTypes">[optional] The types of templates to return.</param>
 <param name="inactives">[optional] Options to control how inactive templates
 are returned, if at all.</param>
 <param name="category">[optional] For Gallery templates only,
 limit to a specific template category.</param>
 <returns>The matching templates data.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateUpdate(System.Int32,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Replaces the content of a user template, NOT campaign content.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="templateID">The id of the user template to update.</param>
 <param name="name">[optional] The name for the template -
 names must be unique and a max of 50 bytes.</param>
 <param name="html">[optional] A string specifying the entire template to be created.
 <para>This is NOT campaign content. They are intended to utilize our template language.</para></param>
 <returns>True if the template was updated, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateUpdate(System.Int32,MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.String})">
 <summary>Replaces the content of a user template, NOT campaign content.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="templateID">The id of the user template to update.</param>
 <param name="name">[optional] The name for the template -
 names must be unique and a max of 50 bytes.</param>
 <param name="html">[optional] A string specifying the entire template to be created.
 <para>This is NOT campaign content. They are intended to utilize our template language.</para></param>
 <returns>True if the template was updated, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateUndel(System.Int32)">
 <summary>Undelete (reactivate) a user template.</summary>
 <param name="templateID">The id of the user template to reactivate.</param>
 <returns>True if the template was reactivated, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateInfo(System.Int32,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Template.Type})">
 <summary>Pulls details for a specific template to help support editing.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="templateID">The id of the user template to get info for.</param>
 <param name="templateType">[optional] The template type to load.
 <para>Defaults to user.</para></param>
 <returns>Template info to be used when editing.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateInfo(System.Int32,MailChimp.Types.Opt{MailChimp.Types.Template.Type})">
 <summary>Pulls details for a specific template to help support editing.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="templateID">The id of the user template to get info for.</param>
 <param name="templateType">[optional] The template type to load.
 <para>Defaults to user.</para></param>
 <returns>Template info to be used when editing.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateDel(System.Int32)">
 <summary>Deletes (deactivate) a user template.</summary>
 <param name="templateID">The id of the user template to delete.</param>
 <returns>True if the template was deleted, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.TemplateAdd(System.String,System.String)">
 <summary>Creates a new user template, NOT campaign content.
 These templates can then be applied while creating campaigns.</summary>
 <param name="name">The name for the template - names must be unique and a max of 50 bytes.</param>
 <param name="html">A string specifying the entire template to be created.
 <para>This is NOT campaign content. They are intended to utilize our template language.</para></param>
 <returns>The new template id, otherwise an error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.SearchMembers(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Searches account wide or on a specific list using the specified query terms.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="query">Terms to search on.</param>
 <param name="listID">[optional] The list id to limit the search to.</param>
 <param name="offset">[optional] The paging offset to use if more than 100 records match.</param>
 <returns>Both exact matches and partial matches over a full search.</returns>
</member>
<member name="M:MailChimp.MCApi.SearchMembers(System.String,MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.Int32})">
 <summary>Searches account wide or on a specific list using the specified query terms.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="query">Terms to search on.</param>
 <param name="listID">[optional] The list id to limit the search to.</param>
 <param name="offset">[optional] The paging offset to use if more than 100 records match.</param>
 <returns>Both exact matches and partial matches over a full search.</returns>
</member>
<member name="M:MailChimp.MCApi.SearchCampaigns(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Tuple{System.String,System.String}})">
 <summary>Search all campaigns for the specified query terms.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="query">Terms to search on.</param>
 <param name="offset">[optional] The paging offset to use if more than 100 records match.</param>
 <param name="snipRange">[optional] By default clear text is returned.
 To have the match highlighted (like a strong HTML tag), this parameter must be passed.</param>
 <returns>An object containing the total matches and current results.</returns>
</member>
<member name="M:MailChimp.MCApi.SearchCampaigns(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Tuple{System.String,System.String}})">
 <summary>Search all campaigns for the specified query terms.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="query">Terms to search on.</param>
 <param name="offset">[optional] The paging offset to use if more than 100 records match.</param>
 <param name="snipRange">[optional] By default clear text is returned.
 To have the match highlighted (like a strong HTML tag), this parameter must be passed.</param>
 <returns>An object containing the total matches and current results.</returns>
</member>
<member name="M:MailChimp.MCApi.Ping">
 <summary>"Ping" the MailChimp API - a simple method you can call that will
 return a constant value as long as everything is good.</summary>
 <returns>"Everything's Chimpy!" if everything is ok, otherwise returns an error message.</returns>
</member>
<member name="M:MailChimp.MCApi.ListsForEmail(System.String)">
 <summary>Retrieves all List IDs a member is subscribed to.</summary>
 <param name="email">The email address to unsubscribe or the email "id" returned from
 listMemberInfo, Webhooks, and Campaigns.</param>
 <returns>A list of list_ids the member is subscribed to.</returns>
</member>
<member name="M:MailChimp.MCApi.Lists(Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.Filter},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.SortField},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.SortDirection})">
 <summary>Retrieves all of the lists defined for your user account.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="filters">[optional] A filter object to apply to this query.</param>
 <param name="start">[optional] Control paging of lists, start results at this list #.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] Control paging of lists, number of lists to return with each call.
 <para>Defaults to 25 (max=100).</para></param>
 <param name="sortField">[optional] A sorting parameter e.g. creation date or
 display order in the web app.</param>
 <param name="sortDir">[optional] Sort direction.<para>Defaults to 'Desc'.</para></param>
 <returns>A count of all matching lists and the specific ones for the current page.</returns>
</member>
<member name="M:MailChimp.MCApi.Lists(MailChimp.Types.Opt{MailChimp.Types.List.Filter},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{MailChimp.Types.List.SortField},MailChimp.Types.Opt{MailChimp.Types.SortDirection})">
 <summary>Retrieves all of the lists defined for your user account.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="filters">[optional] A filter object to apply to this query.</param>
 <param name="start">[optional] Control paging of lists, start results at this list #.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] Control paging of lists, number of lists to return with each call.
 <para>Defaults to 25 (max=100).</para></param>
 <param name="sortField">[optional] A sorting parameter e.g. creation date or
 display order in the web app.</param>
 <param name="sortDir">[optional] Sort direction.<para>Defaults to 'Desc'.</para></param>
 <returns>A count of all matching lists and the specific ones for the current page.</returns>
</member>
<member name="M:MailChimp.MCApi.ListWebhooks(System.String)">
 <summary>Returns the Webhooks configured for the given list.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of webhooks.</returns>
</member>
<member name="M:MailChimp.MCApi.ListWebhookDel(System.String,System.String)">
 <summary>Deletes an existing Webhook URL from a given list.</summary>
 <param name="listID">The list id to connect to.</param>
 <param name="url">The URL of a Webhook on this list.</param>
 <returns>True if the call succeeds, otherwise an exception will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListWebhookAdd(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.WebhookActions},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.WebhookSources})">
 <summary>Adds a new Webhook URL for the given list.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="url">A valid URL for the Webhook.
 <para>A url may only exist on a list once.</para></param>
 <param name="actions">[optional] Actions to fire this Webhook for.</param>
 <param name="sources">[optional] Sources to fire this Webhook for.</param>
 <returns>True if the call succeeds, otherwise an exception will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListWebhookAdd(System.String,System.String,MailChimp.Types.Opt{MailChimp.Types.List.WebhookActions},MailChimp.Types.Opt{MailChimp.Types.List.WebhookSources})">
 <summary>Adds a new Webhook URL for the given list.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="url">A valid URL for the Webhook.
 <para>A url may only exist on a list once.</para></param>
 <param name="actions">[optional] Actions to fire this Webhook for.</param>
 <param name="sources">[optional] Sources to fire this Webhook for.</param>
 <returns>True if the call succeeds, otherwise an exception will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListUpdateMember(System.String,System.String,MailChimp.Types.List.Merges,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.EmailType},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Edits the email address, merge fields, and interest groups for a list member.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="email">The email address or member id to update.</param>
 <param name="merges">New merges to update the member with.</param>
 <param name="emailType">[optional] The email type preference for the member.</param>
 <param name="replaceInterests">[optional] Flag to determine whether we replace the interest groups.
 <para>Defaults to true.</para></param>
 <returns>True on success, false on failure.</returns>
</member>
<member name="M:MailChimp.MCApi.ListUpdateMember(System.String,System.String,MailChimp.Types.List.Merges,MailChimp.Types.Opt{MailChimp.Types.List.EmailType},MailChimp.Types.Opt{System.Boolean})">
 <summary>Edits the email address, merge fields, and interest groups for a list member.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="email">The email address or member id to update.</param>
 <param name="merges">New merges to update the member with.</param>
 <param name="emailType">[optional] The email type preference for the member.</param>
 <param name="replaceInterests">[optional] Flag to determine whether we replace the interest groups.
 <para>Defaults to true.</para></param>
 <returns>True on success, false on failure.</returns>
</member>
<member name="M:MailChimp.MCApi.ListUnsubscribe(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.UnsubscribeOptions})">
 <summary>Unsubscribe the given email address from the list.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="email">The email address or member id to unsubscribe.</param>
 <param name="options">[optional] Unsubscription options.</param>
 <returns>True on success, false on failure.</returns>
</member>
<member name="M:MailChimp.MCApi.ListUnsubscribe(System.String,System.String,MailChimp.Types.Opt{MailChimp.Types.List.UnsubscribeOptions})">
 <summary>Unsubscribes the given email address from the list.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="email">The email address or member id to unsubscribe.</param>
 <param name="options">[optional] Unsubscription options.</param>
 <returns>True on success, false on failure.</returns>
</member>
<member name="M:MailChimp.MCApi.ListSubscribe(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.Merges},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.SubscribeOptions})">
 <summary>Subscribes the provided email to a list.</summary>
 <remarks>By default this sends a confirmation email -
 you will not see new members until the link contained in it is clicked!
 <para>F# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="email">The email address to subscribe.</param>
 <param name="merges">[optional] Merges for the email.</param>
 <param name="options">[optional] Other subscription options.</param>
 <returns>True on success, false on failure.</returns>
</member>
<member name="M:MailChimp.MCApi.ListSubscribe(System.String,System.String,MailChimp.Types.Opt{MailChimp.Types.List.Merges},MailChimp.Types.Opt{MailChimp.Types.List.SubscribeOptions})">
 <summary>Subscribes the provided email to a list.</summary>
 <remarks>By default this sends a confirmation email -
 you will not see new members until the link contained in it is clicked!
 <para>C# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="email">The email address to subscribe.</param>
 <param name="merges">[optional] Merges for the email.</param>
 <param name="options">[optional] Other subscription options.</param>
 <returns>True on success, false on failure.</returns>
</member>
<member name="M:MailChimp.MCApi.ListStaticSegments(System.String)">
 <summary>Retrieves all of the Static Segments for a list.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of parameters for each static segment.</returns>
</member>
<member name="M:MailChimp.MCApi.ListStaticSegmentReset(System.String,System.Int32)">
 <summary>Resets a static segment - removes all members from the static segment.</summary>
 <remarks>This does not actually affect list member data.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="segID">The id of the static segment to reset.</param>
 <returns>True if it worked, otherwise an error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListStaticSegmentMembersDel(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Removes list members from a static segment.</summary>
 <remarks>It is suggested that you limit batch size to no more than 10,000 addresses per call.
 <para>Email addresses must exist on the list in order to be included -
 this will not unsubscribe them from the list!</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="segID">The id of the static segment to modify.</param>
 <param name="batch">Email addresses and/or unique_ids to remove from the segment.</param>
 <returns>The total number of successful updates/errors data.</returns>
</member>
<member name="M:MailChimp.MCApi.ListStaticSegmentMembersAdd(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Adds list members to a static segment.</summary>
 <remarks>It is suggested that you limit batch size to no more than 10,000 addresses per call.
 <para>Email addresses must exist on the list in order to be included -
 this will not subscribe them to the list!</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="segID">The id of the static segment to modify.</param>
 <param name="batch">Email addresses and/or unique_ids to add to the segment.</param>
 <returns>The total number of successful updates/errors data.</returns>
</member>
<member name="M:MailChimp.MCApi.ListStaticSegmentDel(System.String,System.Int32)">
 <summary>Deletes a static segment.</summary>
 <remarks>This will, of course, remove any member affiliations with the segment.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="segID">The id of the static segment to delete.</param>
 <returns>True if it worked, otherwise an error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListStaticSegmentAdd(System.String,System.String)">
 <summary>Saves a segment against a list for later use.</summary>
 <remarks>There is no limit to the number of segments which can be saved.
 Static Segments are not tied to any merge data, interest groups, etc. They essentially allow
 you to configure an unlimited number of custom segments which will have standard performance.
 <para>When using proper segments, Static Segments are one of the available options for
 segmentation just as if you used a merge var (and they can be used with other segmentation options),
 though performance may degrade at that point.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <returns>The id of the new segment, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMergeVars(System.String)">
 <summary>Gets the list of merge tags for a given list,
 including their name, tag, and required setting.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of merge tags.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMergeVarUpdate(System.String,System.String,MailChimp.Types.List.MergeVarOptions)">
 <summary>Updates most parameters for a merge tag on a given list.</summary>
 <remarks>You cannot currently change the merge type.</remarks>
 <param name="listID">The list id to connect to.</param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMergeVarReset(System.String,System.String)">
 <summary>Completely resets all data stored in a merge var on a list.</summary>
 <remarks>All data is removed and this action can not be undone.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="tag">The merge tag to reset.</param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMergeVarDel(System.String,System.String)">
 <summary>Deletes a merge tag from a given list and all its members.</summary>
 <remarks>The data is removed from all members as well!
 On large lists this method may seem a bit slower than calls you typically make.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="tag">The merge tag to delete.</param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMergeVarAdd(System.String,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.MergeVarOptions})">
 <summary>Adds a new merge tag to a given list.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="tag">The merge tag to add, e.g. FNAME.</param>
 <param name="name">The long description of the tag being added, used for user displays.</param>
 <param name="options">[optional] Various options for this merge var.</param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMergeVarAdd(System.String,System.String,System.String,MailChimp.Types.Opt{MailChimp.Types.List.MergeVarOptions})">
 <summary>Adds a new merge tag to a given list.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="tag">The merge tag to add, e.g. FNAME.</param>
 <param name="name">The long description of the tag being added, used for user displays.</param>
 <param name="options">[optional] Various options for this merge var.</param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMembers(System.String,MailChimp.Types.List.MemberStatus,Microsoft.FSharp.Core.FSharpOption{System.DateTime},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.SortDirection})">
 <summary>Gets all of the list members for a list that are of a particular status.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="status">The status to get members for.</param>
 <param name="since">[optional] Pull all members whose status has changed or
 whose profile (updated) has changed since this date/time (GMT).</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0)</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100, upper limit set at 15000</para></param>
 <param name="sortDir">[optional] Sort direction.<para>Defaults to 'Asc'.</para></param>
 <returns>The total records match and matching list member data for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMembers(System.String,MailChimp.Types.List.MemberStatus,MailChimp.Types.Opt{System.DateTime},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{MailChimp.Types.SortDirection})">
 <summary>Gets all of the list members for a list that are of a particular status.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="status">The status to get members for.</param>
 <param name="since">[optional] Pull all members whose status has changed or
 whose profile (updated) has changed since this date/time (GMT).</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0)</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100, upper limit set at 15000</para></param>
 <param name="sortDir">[optional] Sort direction.<para>Defaults to 'Asc'.</para></param>
 <returns>The total records match and matching list member data for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMemberInfo(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Gets all the information for particular member of a list.</summary>
 <param name="listID">The list id to connect to.</param>
 <param name="emails">A sequence of up to 50 email addresses or members id(s)
 to get information for.</param>
 <returns>Members info.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMemberInfo(System.String,System.String)">
 <summary>Gets all the information for particular member of a list.</summary>
 <param name="listID">The list id to connect to.</param>
 <param name="email">Email address or member id to get information for.</param>
 <returns>Member's info.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMemberActivity(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Gets the most recent 100 activities for particular list members
 (open, click, bounce, unsub, abuse, sent to).</summary>
 <param name="listID">The list id to connect to.</param>
 <param name="emails">A sequence of up to 50 email addresses or members id(s)
 to get information for.</param>
 <returns>Members activity info.</returns>
</member>
<member name="M:MailChimp.MCApi.ListMemberActivity(System.String,System.String)">
 <summary>Gets the most recent 100 activities for particular list members
 (open, click, bounce, unsub, abuse, sent to).</summary>
 <param name="listID">The list id to connect to.</param>
 <param name="email">Email address or member id to get information for.</param>
 <returns>Member's activity info.</returns>
</member>
<member name="M:MailChimp.MCApi.ListLocations(System.String)">
 <summary>Retrieves the locations (countries) that the list's subscribers have been tagged to
 based on geocoding their IP address.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of locations.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupings(System.String)">
 <summary>Gets the list of interest groupings for a given list, including the label,
 form information, and included groups for each.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of interest groups for the list.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupingUpdate(System.Int32,System.Object)">
 <summary>Updates an existing Interest Grouping.</summary>
 <param name="groupingID">The interest grouping id.</param>
 <param name="value">The new value of the field - either string or GroupingType.
 <para>Grouping names must be unique - only "hidden" and "checkboxes" grouping types
 can be converted between each other.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupingDel(System.Int32)">
 <summary>Deletes an existing Interest Grouping.</summary>
 <remarks>This will permanently delete all contained interest groups and
 will remove those selections from all list members.</remarks>
 <param name="groupingID">The interest grouping id.</param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupingAdd(System.String,System.String,MailChimp.Types.List.GroupingType,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Adds a new Interest Grouping.</summary>
 <remarks>If interest groups for the List are not yet enabled,
 adding the first grouping will automatically turn them on.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="name">The interest grouping to add - grouping names must be unique.</param>
 <param name="groupingType">The type of the grouping to add.</param>
 <param name="groups">The seq of initial group names to be added.
 <para>At least 1 is required and the names must be unique within a grouping.
 If the number takes you over the 60 group limit, an error will be thrown.</para></param>
 <returns>The new grouping id if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupUpdate(System.String,System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Changes the name of an Interest Group.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="oldName">The interest group name to be changed.</param>
 <param name="newName">The new interest group name to be set.</param>
 <param name="groupingID">[optional] The grouping of the interest group name to be changed.
 <para>If not supplied, the first grouping on the list is used.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupUpdate(System.String,System.String,System.String,MailChimp.Types.Opt{System.Int32})">
 <summary>Changes the name of an Interest Group.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="oldName">The interest group name to be changed.</param>
 <param name="newName">The new interest group name to be set.</param>
 <param name="groupingID">[optional] The grouping of the interest group name to be changed.
 <para>If not supplied, the first grouping on the list is used.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupDel(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Deletes a single Interest Group.</summary>
 <remarks>If the last group for a list is deleted, this will also turn groups for the list off.
 <para>F# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="name">The interest group to delete</param>
 <param name="groupingID">[optional] The grouping to delete the group from.
 <para>If not supplied, the first grouping on the list is used.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupDel(System.String,System.String,MailChimp.Types.Opt{System.Int32})">
 <summary>Deletes a single Interest Group.</summary>
 <remarks>If the last group for a list is deleted, this will also turn groups for the list off.
 <para>C# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="name">The interest group to delete</param>
 <param name="groupingID">[optional] The grouping to delete the group from.
 <para>If not supplied, the first grouping on the list is used.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupAdd(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Adds a single Interest Group.</summary>
 <remarks>If interest groups for the List are not yet enabled,
 adding the first group will automatically turn them on.
 <para>F# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="name">The interest group to add - group names must be unique within a grouping.</param>
 <param name="groupingID">[optional] The grouping to add the new group to.
 <para>If not supplied, the first grouping on the list is used.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListInterestGroupAdd(System.String,System.String,MailChimp.Types.Opt{System.Int32})">
 <summary>Adds a single Interest Group.</summary>
 <remarks>If interest groups for the List are not yet enabled,
 adding the first group will automatically turn them on.
 <para>C# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="name">The interest group to add - group names must be unique within a grouping.</param>
 <param name="groupingID">[optional] The grouping to add the new group to.
 <para>If not supplied, the first grouping on the list is used.</para></param>
 <returns>True if the request succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ListGrowthHistory(System.String)">
 <summary>Access the Growth History by Month for a given list.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of growth history items.</returns>
</member>
<member name="M:MailChimp.MCApi.ListClients(System.String)">
 <summary>Retrieves the clients that the list's subscribers have been
 tagged as being used based on user agents seen.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The desktop and mobile user agents in use on the list.</returns>
</member>
<member name="M:MailChimp.MCApi.ListBatchUnsubscribe(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.UnsubscribeOptions})">
 <summary>Unsubscribes a batch of email addresses to a list.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="batch">A sequence of email addresses to unsubscribe.</param>
 <param name="options">[optional] Unsubscription options.</param>
 <returns>Result counts and any errors that occurred.</returns>
</member>
<member name="M:MailChimp.MCApi.ListBatchUnsubscribe(System.String,System.Collections.Generic.IEnumerable{System.String},MailChimp.Types.Opt{MailChimp.Types.List.UnsubscribeOptions})">
 <summary>Unsubscribes a batch of email addresses to a list.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="batch">A sequence of email addresses to unsubscribe.</param>
 <param name="options">[optional] Unsubscription options.</param>
 <returns>Result counts and any errors that occurred.</returns>
</member>
<member name="M:MailChimp.MCApi.ListBatchSubscribe(System.String,System.Collections.Generic.IEnumerable{MailChimp.Types.List.Merges},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.List.SubscribeOptions})">
 <summary>Subscribes a batch of email addresses to a list at once.</summary>
 <remarks>Maximum batch sizes vary based on the amount of data in each record,
 though you should cap them at 5k - 10k records, depending on your experience.
 These calls are also long, so be sure you increase your timeout values.
 <para>F# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="batch">A sequence of merges for each email to subscribe.</param>
 <param name="options">[optional] Other subscription options.</param>
 <returns>Result counts and any errors that occurred.</returns>
</member>
<member name="M:MailChimp.MCApi.ListBatchSubscribe(System.String,System.Collections.Generic.IEnumerable{MailChimp.Types.List.Merges},MailChimp.Types.Opt{MailChimp.Types.List.SubscribeOptions})">
 <summary>Subscribes a batch of email addresses to a list at once.</summary>
 <remarks>Maximum batch sizes vary based on the amount of data in each record,
 though you should cap them at 5k - 10k records, depending on your experience.
 These calls are also long, so be sure you increase your timeout values.
 <para>C# specific optional parameters.</para></remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="batch">A sequence of merges for each email to subscribe.</param>
 <param name="options">[optional] Other subscription options.</param>
 <returns>Result counts and any errors that occurred.</returns>
</member>
<member name="M:MailChimp.MCApi.ListActivity(System.String)">
 <summary>Access up to the previous 180 days of daily detailed
 aggregated activity stats for a given list.</summary>
 <param name="listID">The list id to connect to.</param>
 <returns>The list of activity items.</returns>
</member>
<member name="M:MailChimp.MCApi.ListAbuseReports(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Gets all email addresses that complained about a given campaign.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0)</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 500, upper limit set at 1000</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The total of all reports and the specific reports reports this page.</returns>
</member>
<member name="M:MailChimp.MCApi.ListAbuseReports(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.DateTime})">
 <summary>Gets all email addresses that complained about a given campaign.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="listID">The list id to connect to.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0)</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 500, upper limit set at 1000</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The total of all reports and the specific reports reports this page.</returns>
</member>
<member name="M:MailChimp.MCApi.InlineCss(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Sends your HTML content to have the CSS inlined and
 optionally remove the original styles.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="html">Your HTML content.</param>
 <param name="stripCss">[optional] Whether you want the
 CSS {style} tags stripped from the returned document.
 <para>Defaults to false.</para></param>
 <returns>Your HTML content with all CSS inlined, just like if MailChimp sent it.</returns>
</member>
<member name="M:MailChimp.MCApi.InlineCss(System.String,MailChimp.Types.Opt{System.Boolean})">
 <summary>Sends your HTML content to have the CSS inlined and
 optionally remove the original styles.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="html">Your HTML content.</param>
 <param name="stripCss">[optional] Whether you want the
 CSS {style} tags stripped from the returned document.
 <para>Defaults to false.</para></param>
 <returns>Your HTML content with all CSS inlined, just like if MailChimp sent it.</returns>
</member>
<member name="M:MailChimp.MCApi.GmonkeyMembers">
 <summary>Retrieves all Golden Monkey(s) for an account</summary>
 <returns>Golden Monkeys data.</returns>
</member>
<member name="M:MailChimp.MCApi.GmonkeyDel(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Removes Golden Monkey(s).</summary>
 <param name="listID">The id of the List to remove members from.</param>
 <param name="emails">A sequence of email addresses (max 50)
 to attempt to remove from Golden Monkeys.</param>
 <returns>The number of success and unsuccesfull deletes.</returns>
</member>
<member name="M:MailChimp.MCApi.GmonkeyAdd(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Adds Golden Monkey(s).</summary>
 <param name="listID">The id of the List to add members to.</param>
 <param name="emails">A sequence of email addresses (max 50)
 to attempt to flag as Golden Monkeys.</param>
 <returns>The number of success and unsuccesfull adds.</returns>
</member>
<member name="M:MailChimp.MCApi.GmonkeyActivity">
 <summary>Retrieves all Activity (opens/clicks) for Golden Monkeys over the past 10 days.</summary>
 <returns>Golden Monkeys activity data.</returns>
</member>
<member name="M:MailChimp.MCApi.GetVerifiedDomains">
 <summary>Retrieve all domains verification records for an account.</summary>
 <returns>Records of domains verification has been attempted for.</returns>
</member>
<member name="M:MailChimp.MCApi.GetAccountDetails(MailChimp.Types.Helper.DetailType[])">
 <summary>Retrieves lots of account information including payments made,
 plan info, some account stats, installed modules, contact info, and more.</summary>
 <remarks>No private information like Credit Card numbers is available.</remarks>
 <param name="exclude">[params] Allows controlling which extra arrays are returned
 since they can slow down calls.</param>
 <returns>Record containing the details for the account tied to this API Key.</returns>
</member>
<member name="M:MailChimp.MCApi.GenerateText(MailChimp.Types.Campaign.ContentType,System.Object)">
 <summary>Convertes HTML content to a text-only format.
 <para>You can send: plain HTML, an array of Template content, an existing Campaign id,
 or an existing Template Id.</para></summary>
 <remarks>This will not save anything to or update any of your lists,
 campaigns, or templates.</remarks>
 <param name="contentType">The type of content to parse.</param>
 <param name="content">The content to use.
 <para>For "html" expects a single string value,
 "template" expects an array like you send to campaignCreate,
 "url" expects a valid and public URL to pull from, "cid" expects a valid Campaign Id,
 and "tid" expects a valid Template Id on your account.</para></param>
 <returns>The content pass in converted to text.</returns>
</member>
<member name="M:MailChimp.MCApi.Folders(Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Folder.Type})">
 <summary>Retrieves all the folders for a user account.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>The list of folders.</returns>
</member>
<member name="M:MailChimp.MCApi.Folders(MailChimp.Types.Opt{MailChimp.Types.Folder.Type})">
 <summary>Retrieves all the folders for a user account.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>The list of folders.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderUpdate(System.Int32,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Folder.Type})">
 <summary>Updates the name of a folder for campaigns or autoresponders.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="folderID">The folder ID to update.</param>
 <param name="name">A new, unique name for the folder (max 100 bytes).</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>True if the delete worked, otherwise an exception is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderUpdate(System.Int32,System.String,MailChimp.Types.Opt{MailChimp.Types.Folder.Type})">
 <summary>Updates the name of a folder for campaigns or autoresponders.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="folderID">The folder ID to update.</param>
 <param name="name">A new, unique name for the folder (max 100 bytes).</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>True if the delete worked, otherwise an exception is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderDel(System.Int32,MailChimp.Types.Opt{MailChimp.Types.Folder.Type})">
 <remarks>This will simply make campaigns in the folder appear unfiled, they are not removed.
 <para>C# specific optional parameters.</para></remarks>
 <param name="folderID">The folder ID to update.</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>True if the delete worked, otherwise an exception is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderDel(System.Int32,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Folder.Type})">
 <summary>Deletes a campaign or autoresponder folder.</summary>
 <remarks>This will simply make campaigns in the folder appear unfiled, they are not removed.
 <para>F# specific optional parameters.</para></remarks>
 <param name="folderID">The folder ID to update.</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>True if the delete worked, otherwise an exception is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderDel(System.Int32,MailChimp.Types.Opt{MailChimp.Types.Folder.Type})">
 <summary>Deletes a campaign or autoresponder folder.</summary>
 <remarks>This will simply make campaigns in the folder appear unfiled, they are not removed.
 <para>C# specific optional parameters.</para></remarks>
 <param name="folderID">The folder ID to update.</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>True if the delete worked, otherwise an exception is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderAdd(System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Folder.Type})">
 <summary>Adds a new folder to file campaigns or autoresponders in.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="name">A unique name for a folder (max 100 bytes).</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>The id of the newly created folders.</returns>
</member>
<member name="M:MailChimp.MCApi.FolderAdd(System.String,MailChimp.Types.Opt{MailChimp.Types.Folder.Type})">
 <summary>Adds a new folder to file campaigns or autoresponders in.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="name">A unique name for a folder (max 100 bytes).</param>
 <param name="folderType">[optional] The type of folders to return.
 <para>Defaults to "campaign".</para></param>
 <returns>The id of the newly created folders.</returns>
</member>
<member name="M:MailChimp.MCApi.EcommOrders(Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Retrieves the Ecommerce Orders for an account.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0)</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100, upper limit set at 500</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The total matching orders and the specific orders for the requested page.</returns>
</member>
<member name="M:MailChimp.MCApi.EcommOrders(MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.DateTime})">
 <summary>Retrieves the Ecommerce Orders for an account.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0)</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100, upper limit set at 500</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The total matching orders and the specific orders for the requested page.</returns>
</member>
<member name="M:MailChimp.MCApi.EcommOrderDel(System.String,System.String)">
 <summary>Deletes Ecommerce Order Information used for segmentation.</summary>
 <remarks>This will generally be used by ecommerce package plugins
 that MailChimp provides or by 3rd part system developers.</remarks>
 <param name="storeID">The store id the order belongs to.</param>
 <param name="orderID">The order id (generated by the store) to delete.</param>
 <returns>True if the order is deleted, otherwise error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.EcommOrderAdd(MailChimp.Types.Ecommerce.Order)">
 <summary>Imports Ecommerce Order Information to be used for Segmentation.</summary>
 <remarks>This will generally be used by ecommerce package plugins
 that MailChimp provides or by 3rd part system developers.</remarks>
 <param name="order">Information pertaining to the order that has completed.</param>
 <returns>True if the data is saved, otherwise error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ChimpChatter">
 <summary>Returns the current Chimp Chatter messages for an account.</summary>
 <returns>A list of chatter messages and properties.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignsForEmail2(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Retrieves all Campaigns IDs along with additional data
 (verbose) a member was sent.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="email">The email address to unsubscribe or the email "id" returned from
 listMemberInfo, Webhooks, and Campaigns.</param>
 <param name="listID">[optional] A list id to limit the campaigns to.</param>
 <returns>A list of campaign ids along with additional data the member received.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignsForEmail2(System.String,MailChimp.Types.Opt{System.String})">
 <summary>Retrieves all Campaigns IDs along with additional data
 (verbose) a member was sent.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="email">The email address to unsubscribe or the email "id" returned from
 listMemberInfo, Webhooks, and Campaigns.</param>
 <param name="listID">[optional] A list_id to limit the campaigns to.</param>
 <returns>A list of campaign_ids along with additional data the member received.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignsForEmail(System.String,Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Retrieves all Campaigns IDs a member was sent.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="email">The email address to unsubscribe or the email "id" returned from
 listMemberInfo, Webhooks, and Campaigns.</param>
 <param name="listID">[optional] A list_id to limit the campaigns to.</param>
 <returns>A list of campaign_ids the member received.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignsForEmail(System.String,MailChimp.Types.Opt{System.String})">
 <summary>Retrieves all Campaigns IDs a member was sent.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="email">The email address to unsubscribe or the email "id" returned from
 listMemberInfo, Webhooks, and Campaigns.</param>
 <param name="listID">[optional] A list_id to limit the campaigns to</param>
 <returns>A list of campaign_ids the member received.</returns>
</member>
<member name="M:MailChimp.MCApi.Campaigns(Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.Filter},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets the list of campaigns and their details matching the specified filters.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="filters">[optional] A filter object to apply to this query.</param>
 <param name="start">[optional] Control paging of campaigns, start results at this campaign #.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] Control paging of campaigns, number of lists to return with each call.
 <para>Defaults to 25 (max=1000).</para></param>
 <returns>A count of all matching campaigns and the specific ones for the current page.</returns>
</member>
<member name="M:MailChimp.MCApi.Campaigns(MailChimp.Types.Opt{MailChimp.Types.Campaign.Filter},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Gets the list of campaigns and their details matching the specified filters.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="filters">[optional] A filter object to apply to this query.</param>
 <param name="start">[optional] Control paging of campaigns, start results at this campaign #.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] Control paging of campaigns, number of lists to return with each call.
 <para>Defaults to 25 (max=1000).</para></param>
 <returns>A count of all matching campaigns and the specific ones for the current page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignUpdate(System.String,System.String,System.Object)">
 <summary>Updates just about any setting for a campaign that has not been sent.</summary>
 <param name="campaignID">The Campaign ID to update.</param>
 <param name="name">The parameter name to update.</param>
 <param name="value">An appropriate value for the parameter.</param>
 <returns>True if the update succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignUnsubscribes(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets all unsubscribed email addresses for a given campaign.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull unsubsribes for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total of all unsubscribed emails and the specific emails for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignUnsubscribes(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Gets all unsubscribed email addresses for a given campaign.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull unsubsribes for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total of all unsubscribed emails and the specific emails for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignUnschedule(System.String)">
 <summary>Unschedules a campaign that is scheduled to be sent in the future.</summary>
 <param name="campaignID">The Campaign ID to unschedule.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignTemplateContent(System.String)">
 <summary>Gets the HTML template content sections for a campaign.</summary>
 <param name="campaignID">The Campaign ID to get content for.</param>
 <returns>All content section for the campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignStats(System.String)">
 <summary>Given a list and a campaign, gets all the relevant campaign statistics.</summary>
 <param name="campaignID">The Campaign ID to pull stats for.</param>
 <returns>The statistics for this campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignShareReport(System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.ShareReportOptions})">
 <summary>Gets the URL to a customized VIP Report for the specified campaign and
 optionally send an email to someone with links to it.</summary>
 <remarks>Subsequent calls will overwrite anything already set for the same campign (eg, the password).
 <para>C# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to share a report for.</param>
 <param name="options">[optional] Various parameters which can be used to configure the shared report</param>
 <returns>Details for the shared report.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignShareReport(System.String,MailChimp.Types.Opt{MailChimp.Types.Campaign.ShareReportOptions})">
 <summary>Gets the URL to a customized VIP Report for the specified campaign and
 optionally send an email to someone with links to it.</summary>
 <remarks>Subsequent calls will overwrite anything already set for the same campign (eg, the password).
 <para>C# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to share a report for.</param>
 <param name="options">[optional] Various parameters which can be used to configure the shared report</param>
 <returns>Details for the shared report.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignSendTest(System.String,System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.TestEmailType})">
 <summary>Sends a test of this campaign to the provided email address.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to send.</param>
 <param name="emails">A sequence of email address to receive the test message.</param>
 <param name="sendType">[optional] The email format (html/text).
 <para>By default both formats are sent.</para></param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignSendTest(System.String,System.Collections.Generic.IEnumerable{System.String},MailChimp.Types.Opt{MailChimp.Types.Campaign.TestEmailType})">
 <summary>Sends a test of this campaign to the provided email address.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to send.</param>
 <param name="emails">A sequence of email address to receive the test message.</param>
 <param name="sendType">[optional] The email format (html/text).
 <para>By default both formats are sent.</para></param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignSendNow(System.String)">
 <summary>Sends a given campaign immediately. For RSS campaigns, this will 'start' them.</summary>
 <param name="campaignID">The Campaign ID to send.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignSegmentTest(System.String,MailChimp.Types.Campaign.SegmentOptions)">
 <summary>Allows one to test their segmentation rules before creating a campaign using them.</summary>
 <param name="listID">The list to test segmentation on.</param>
 <param name="options">Segmentation options.</param>
 <returns>The total number of subscribers matching your segmentation options.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignScheduleBatch(System.String,System.DateTime,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Schedule a campaign to be sent in batches sometime in the future.</summary>
 <remarks>Only valid for 'regular' campaigns.
 <para>F# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to schedule.</param>
 <param name="scheduleTime">The time (GMT) to schedule the campaign.</param>
 <param name="numBatches">[optional] The number of batches between 2 and 26 to send.
 <para>Defaults to 2.</para></param>
 <param name="staggerMins">[optional] The number of minutes between each batch -
 5, 10, 15, 20, 25, 30, or 60.<para>Defaults to 5.</para></param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignScheduleBatch(System.String,System.DateTime,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Schedule a campaign to be sent in batches sometime in the future.</summary>
 <remarks>Only valid for 'regular' campaigns.
 <para>C# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to schedule.</param>
 <param name="scheduleTime">The time (GMT) to schedule the campaign.</param>
 <param name="numBatches">[optional] The number of batches between 2 and 26 to send.
 <para>Defaults to 2.</para></param>
 <param name="staggerMins">[optional] The number of minutes between each batch -
 5, 10, 15, 20, 25, 30, or 60.<para>Defaults to 5.</para></param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignSchedule(System.String,System.DateTime,Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Schedules a campaign to be sent in the future.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to schedule.</param>
 <param name="scheduleTime">The time (GMT) to schedule the campaign.</param>
 <param name="scheduleTimeB">[optional] The time (GMT) to schedule Group B
 of an A/B Split 'schedule' campaign.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignSchedule(System.String,System.DateTime,MailChimp.Types.Opt{System.DateTime})">
 <summary>Schedules a campaign to be sent in the future.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to schedule.</param>
 <param name="scheduleTime">The time (GMT) to schedule the campaign.</param>
 <param name="scheduleTimeB">[optional] The time (GMT) to schedule Group B
 of an A/B Split 'schedule' campaign.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignResume(System.String)">
 <summary>Resumes sending an AutoResponder or RSS campaign.</summary>
 <param name="campaignID">The Campaign ID to resume sending of.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignReplicate(System.String)">
 <summary>Replicates a campaign.</summary>
 <param name="campaignID">The Campaign ID to replicate.</param>
 <returns>The id of the replicated Campaign created, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignPause(System.String)">
 <summary>Pauses an AutoResponder or RSS campaign from sending.</summary>
 <param name="campaignID">The Campaign ID to pause.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignOpenedAIM(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Retrieves the list of email addresses that opened a given campaign
 with how many times they opened.</summary>
 <remarks>This AIM function is free and does not actually require the AIM module to be installed.
 <para>F# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to get opens for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total records matched and the specific records for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignOpenedAIM(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Retrieves the list of email addresses that opened a given campaign
 with how many times they opened.</summary>
 <remarks>This AIM function is free and does not actually require the AIM module to be installed.
 <para>C# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to get opens for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total records matched and the specific records for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignNotOpenedAIM(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Retrieves the list of email addresses that did not open a given campaign.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get no opens for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total records matched and the specific records for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignNotOpenedAIM(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Retrieves the list of email addresses that did not open a given campaign.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get no opens for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total records matched and the specific records for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignMembers(System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.Stats.SendStatus},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Gets all email addresses the campaign was successfully sent to.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull members for.</param>
 <param name="status">[optional] The status to pull .
 <para>By default, all records are returned.</para></param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>A total of all matching emails and the specific emails for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignMembers(System.String,MailChimp.Types.Opt{MailChimp.Types.Campaign.Stats.SendStatus},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Gets all email addresses the campaign was successfully sent to.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull members for.</param>
 <param name="status">[optional] The status to pull .
 <para>By default, all records are returned.</para></param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>A total of all matching emails and the specific emails for this page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignGeoOpensForCountry(System.String,System.String)">
 <summary>Retrieves the countries and number of opens tracked for each.</summary>
 <remarks>Email address are not returned.</remarks>
 <param name="campaignID">The Campaign ID to pull geo opens for.</param>
 <param name="countryCode">An ISO3166 2 digit country code.</param>
 <returns>The list of of regions within the provided country where opens occurred.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignGeoOpens(System.String)">
 <summary>Retrieves the countries and number of opens tracked for each.</summary>
 <remarks>Email address are not returned.</remarks>
 <param name="campaignID">The Campaign ID to pull geo opens for.</param>
 <returns>The list of countries where opens occurred.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEmailStatsAIMAll(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Given a campaign and correct paging limits, returns the entire click and open
 history with timestamps, ordered by time, for every user a campaign was delivered to.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get stats for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100 (max=1000).</para></param>
 <returns>The entire click and open history with timestamps, ordered by time.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEmailStatsAIMAll(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Given a campaign and correct paging limits, returns the entire click and open
 history with timestamps, ordered by time, for every user a campaign was delivered to.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get stats for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100 (max=1000).</para></param>
 <returns>The entire click and open history with timestamps, ordered by time.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEmailStatsAIM(System.String,System.Collections.Generic.IEnumerable{System.String})">
 <summary>Given a campaign and email address, returns the entire
 click and open history with timestamps, ordered by time.</summary>
 <param name="campaignID">The Campaign ID to get stats for.</param>
 <param name="emails">A sequence of up to 50 email addresses to check or the email "id".</param>
 <returns>The entire click and open history with timestamps, ordered by time.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEmailDomainPerformance(System.String)">
 <summary>Gets the top 5 performing email domains for this campaign.</summary>
 <param name="campaignID">The Campaign ID to pull email domain performance for.</param
 <returns>The list of email domains and their associated stats.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEepUrlStats(System.String)">
 <summary>Retrieves the tracked eepurl mentions on Twitter.</summary>
 <param name="campaignID">The Campaign ID to pull stats for.</param>
 <returns>Tweets, clicks, and referrers related to using the campaign's eepurl.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEcommOrders(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Retrieves the Ecommerce Orders tracked by campaignEcommOrderAdd().</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull orders for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100 (max=500).</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The total matching orders and the specific orders for the requested page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEcommOrders(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.DateTime})">
 <summary>Retrieves the Ecommerce Orders tracked by campaignEcommOrderAdd().</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull orders for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 100 (max=500).</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The total matching orders and the specific orders for the requested page.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignEcommOrderAdd(MailChimp.Types.Ecommerce.Order)">
 <summary>Attaches Ecommerce Order Information to a Campaign.</summary>
 <remarks>This will generally be used by ecommerce package plugins
 provided by us or by 3rd part system developers.</remarks>
 <param name="order">Information pertaining to the order that has completed.</param>
 <returns>True if the data is saved, otherwise an error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignDelete(System.String)">
 <summary>Deletes a campaign.</summary>
 <param name="campaignID">The Campaign ID to delete.</param>
 <returns>True if the delete succeeds, otherwise an error will be thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignCreate(MailChimp.Types.Campaign.Type,MailChimp.Types.Campaign.Options,MailChimp.Types.Campaign.Content.Base,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.SegmentOptions},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Campaign.TypeOptions.Base})">
 <summary>Creates a new draft campaign to send.</summary>
 <remarks>You can not have more than 32,000 campaigns in your account.
 <para>F# specific optional parameters.</para></remarks>
 <param name="campaignType">The Campaign Type to create.</param>
 <param name="options">The standard options for this campaign.</param>
 <param name="content">The content for this campaign.</param>
 <param name="segmentOpts">[optional] Segmentation options of this campaign.</param>
 <param name="typeOpts">[optional] Type options for this campaign.</param>
 <returns>The ID for the created campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignCreate(MailChimp.Types.Campaign.Type,MailChimp.Types.Campaign.Options,MailChimp.Types.Campaign.Content.Base,MailChimp.Types.Opt{MailChimp.Types.Campaign.SegmentOptions},MailChimp.Types.Opt{MailChimp.Types.Campaign.TypeOptions.Base})">
 <summary>Creates a new draft campaign to send.</summary>
 <remarks>You can not have more than 32,000 campaigns in your account.
 <para>C# specific optional parameters.</para></remarks>
 <param name="campaignType">The Campaign Type to create.</param>
 <param name="options">The standard options for this campaign.</param>
 <param name="content">The content for this campaign.</param>
 <param name="segmentOpts">[optional] Segmentation options of this campaign.</param>
 <param name="typeOpts">[optional] Type options for this campaign.</param>
 <returns>The ID for the created campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignContent(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Gets the content (both html and text) for a campaign either as it would appear
 in the campaign archive or as the raw, original content.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get content for.</param>
 <param name="forArchive">[optional] Controls whether we return the
 Archive version (true) or the Raw version (false).<para>Defaults to true.</para></param>
 <returns>All content for the campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignContent(System.String,MailChimp.Types.Opt{System.Boolean})">
 <summary>Gets the content (both html and text) for a campaign either as it would appear
 in the campaign archive or as the raw, original content.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get content for.</param>
 <param name="forArchive">[optional] Controls whether we return the
 Archive version (true) or the Raw version (false).<para>Defaults to true.</para></param>
 <returns>All content for the campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignClickStats(System.String)">
 <summary>Gets a list of the urls being tracked, and their click counts for a given campaign.</summary>
 <param name="campaignID">The Campaign ID to pull stats for.</param>
 <returns>The dict of urls and their associated statsistics.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignClickDetailAIM(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Returns the list of email addresses that clicked on a
 given url, and how many times they clicked.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get click stats for.</param>
 <param name="url">The URL of the link that was clicked on.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total records matched and the specific records for this page</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignClickDetailAIM(System.String,System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32})">
 <summary>Returns the list of email addresses that clicked on a
 given url, and how many times they clicked.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to get click stats for.</param>
 <param name="url">The URL of the link that was clicked on.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 1000 (max=15000).</para></param>
 <returns>The total records matched and the specific records for this page</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignBounceMessages(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Retrieves the full bounce messages for the given campaign.</summary>
 <remarks>This can return very large amounts of data depending on how large the campaign was and how
 much cruft the bounce provider returned. Also, message over 30 days old are subject to being removed.
 <para>F# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to pull bounces for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 25 (max=50).</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The full bounce messages for this campaign along.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignBounceMessages(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.DateTime})">
 <summary>Retrieves the full bounce messages for the given campaign.</summary>
 <remarks>This can return very large amounts of data depending on how large the campaign was and how
 much cruft the bounce provider returned. Also, message over 30 days old are subject to being removed.
 <para>C# specific optional parameters.</para></remarks>
 <param name="campaignID">The Campaign ID to pull bounces for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 25 (max=50).</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The full bounce messages for this campaign along.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignBounceMessage(System.String,System.String)">
 <summary>Retrieves the most recent full bounce message for a specific
 email address on the given campaign.</summary>
 <remarks>Messages over 30 days old are subject to being removed.</remarks>
 <param name="campaignID">The Campaign ID to pull bounces for.</param>
 <param name="email">The email address or unique id of the member to pull a bounce message for.</param>
 <returns>The full bounce message for this email+campaign along with some extra data.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignAnalytics(System.String)">
 <summary>Retrieves the Google Analytics data we've collected for this campaign.</summary>
 <remarks>Requires Google Analytics Add-on to be installed and configured.</remarks>
 <param name="campaignID">The Campaign ID to pull bounces for.</param>
 <returns>Analytics for the passed campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignAdvice(System.String)">
 <summary>Retrieves the text presented in our app for how a campaign performed and
 any advice we may have for you - best suited for display in customized reports pages.</summary>
 <remarks>Some messages will contain HTML - clean tags as necessary.</remarks>
 <param name="campaignID">The Campaign ID to pull advice text for.</param>
 <returns>The list of advice messages.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignAbuseReports(System.String,Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.Int32},Microsoft.FSharp.Core.FSharpOption{System.DateTime})">
 <summary>Gets all email addresses that complained about a given campaign.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull abuse reports for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 500 (max=1000).</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The list ofthe abuse reports for this campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CampaignAbuseReports(System.String,MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.Int32},MailChimp.Types.Opt{System.DateTime})">
 <summary>Gets all email addresses that complained about a given campaign.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="campaignID">The Campaign ID to pull abuse reports for.</param>
 <param name="start">[optional] For large data sets, the page number to start at.
 <para>Defaults to 1st page of data (page 0).</para></param>
 <param name="limit">[optional] For large data sets, the number of results to return.
 <para>Defaults to 500 (max=1000).</para></param>
 <param name="since">[optional] Pull only messages since this time (GMT).</param>
 <returns>The list ofthe abuse reports for this campaign.</returns>
</member>
<member name="M:MailChimp.MCApi.CallServer``1(System.String,MailChimp.Types.Opt{MailChimp.Types.Input})">
 <summary>Executes a custom call to the MailChimp server.</summary>
 <param name="methodName">Method name.</param>
 <param name="p">[optional] Input data.</param>
 <returns>Deserialized result.</returns>
</member>
<member name="M:MailChimp.MCApi.ApiKeys(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Retrieves a list of all MailChimp API Keys for this User.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="user">Your MailChimp user name.</param>
 <param name="pwd">Your MailChimp password.</param>
 <param name="expired">[optional] Whether or not to include expired keys.
 <para>Defaults to false.</para></param>
 <returns>A list of API keys.</returns>
</member>
<member name="M:MailChimp.MCApi.ApiKeys(System.String,System.String,MailChimp.Types.Opt{System.Boolean})">
 <summary>Retrieves a list of all MailChimp API Keys for this User.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="user">Your MailChimp user name.</param>
 <param name="pwd">Your MailChimp password.</param>
 <param name="expired">[optional] Whether or not to include expired keys.
 <para>Defaults to false.</para></param>
 <returns>A list of API keys.</returns>
</member>
<member name="M:MailChimp.MCApi.ApiKeyExpire(System.String,System.String)">
 <summary>Expires a Specific API Key.</summary>
 <remarks>If you expire all of your keys,
 just visit your API dashboard to create a new one.</remarks>
 <param name="user">Your MailChimp user name.</param>
 <param name="pwd">Your MailChimp password.</param>
 <returns>True if it succeeded, otherwise an error is thrown.</returns>
</member>
<member name="M:MailChimp.MCApi.ApiKeyAdd(System.String,System.String)">
 <summary>Adds an API Key to your account.
 MailChimp will generate a new key for you and return it.</summary>
 <param name="user">Your MailChimp user name.</param>
 <param name="pwd">Your MailChimp password.</param>
 <returns>A new API Key that can be immediately used.</returns>
</member>
<member name="">

</member>
<member name="T:MailChimp.MCApi">
 <summary>MailChimp API wrapper.</summary>
</member>
<member name="M:MailChimp.MandrillApi.WhitelistDel(System.String)">
 <summary>Removes an email address from the whitelist.</summary>
 <remarks>Whitelist section.</remarks>
 <param name="email">An email address to remove from the whitelist.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WhitelistAdd(System.String)">
 <summary>Adds an email to an email rejection whitelist.</summary>
 <remarks>Whitelist section.
 <para>If the address is currently on your blacklist, that blacklist entry
 will be removed automatically.</para></remarks>
 <param name="email">An email address to add to the whitelist.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Whitelist(MailChimp.Types.Opt{System.String})">
 <summary>Retrieves your email rejection whitelist.</summary>
 <remarks>Whitelist section.</remarks>
 <param name="email">[optional] An email address or prefix to search by.</param>
 <returns>The information for each rejection whitelist entry (up to 1000 items).</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhooksList">
 <summary>Gets the list of all webhooks defined on the account.</summary>
 <remarks>Webhooks section.</remarks>
 <returns>The webhooks associated with the account.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhookUpdate(System.Int32,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{MailChimp.Types.Mandrill.EventType}})">
 <summary>Updates an existing webhook.</summary>
 <remarks>Webhooks section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="id">The unique identifier of a webhook belonging to this account.</param>
 <param name="url">The URL to POST batches of events.</param>
 <param name="description">[optional] a description of the webhook.</param>
 <param name="events">[optional] A list of events that will be posted to the webhook.</param>
 <returns>The information for the updated webhook.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhookUpdate(System.Int32,System.String,MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.Collections.Generic.IEnumerable{MailChimp.Types.Mandrill.EventType}})">
 <summary>Updates an existing webhook.</summary>
 <remarks>Webhooks section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="id">The unique identifier of a webhook belonging to this account.</param>
 <param name="url">The URL to POST batches of events.</param>
 <param name="description">[optional] a description of the webhook.</param>
 <param name="events">[optional] A list of events that will be posted to the webhook.</param>
 <returns>The information for the updated webhook.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhookInfo(System.Int32)">
 <summary>Returns the data about an existing webhook.</summary>
 <remarks>Webhooks section.</remarks>
 <param name="id">The unique identifier of a webhook belonging to this account.</param>
 <returns>The information about the webhook.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhookDel(System.Int32)">
 <summary>Deletes an existing webhook.</summary>
 <remarks>Webhooks section.</remarks>
 <param name="id">The unique identifier of a webhook belonging to this account.</param>
 <returns>The information for the deleted webhook.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhookAdd(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{MailChimp.Types.Mandrill.EventType}})">
 <summary>Adds a new webhook.</summary>
 <remarks>Webhooks section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="url">The URL to POST batches of events.</param>
 <param name="description">[optional] a description of the webhook.</param>
 <param name="events">[optional] A list of events that will be posted to the webhook.</param>
 <returns>The information about the new webhook.</returns>
</member>
<member name="M:MailChimp.MandrillApi.WebhookAdd(System.String,MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.Collections.Generic.IEnumerable{MailChimp.Types.Mandrill.EventType}})">
 <summary>Adds a new webhook.</summary>
 <remarks>Webhooks section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="url">The URL to POST batches of events.</param>
 <param name="description">[optional] a description of the webhook.</param>
 <param name="events">[optional] A list of events that will be posted to the webhook.</param>
 <returns>The information about the new webhook.</returns>
</member>
<member name="M:MailChimp.MandrillApi.UserInfo">
 <summary>Returns the information about the API-connected user.</summary>
 <remarks>Users section.</remarks>
 <returns>The user information including username, key, reputation, quota,
 and historical sending stats.</returns>
</member>
<member name="M:MailChimp.MandrillApi.UrlsTimeSeries(System.String)">
 <summary>Return the recent history (hourly stats for the last 30 days) for a url.</summary>
 <remarks>Urls section.</remarks>
 <param name="url">An existing url.</param>
 <returns>The list of history information.</returns>
</member>
<member name="M:MailChimp.MandrillApi.UrlsSearch(System.String)">
 <summary>Returns the 100 most clicked URLs that match the given search query.</summary>
 <remarks>Urls section.</remarks>
 <param name="query">A search query.</param>
 <returns>The 100 most clicked URLs matching the search query.</returns>
</member>
<member name="M:MailChimp.MandrillApi.UrlsList">
 <summary>Gets the 100 most clicked URLs.</summary>
 <remarks>Urls section.</remarks>
 <returns>The 100 most clicked URLs and their stats.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplatesTimeSeries(System.String)">
 <summary>Returns the recent history (hourly stats for the last 30 days) for a template.</summary>
 <remarks>Templates section.</remarks>
 <param name="name">The name of an existing template.</param>
 <returns>The list of history information.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplatesList">
 <summary>Returns a list of all the templates available to this user.</summary>
 <remarks>Templates section.</remarks>
 <returns>A list of information about each template.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateUpdate(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Updates the code for an existing template.</summary>
 <remarks>Templates section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="name">The name of an existing template.</param>
 <param name="code">The HTML code for the template with
 mc:edit attributes for the editable elements.</param>
 <param name="publish">[optional] Flag indicating whether to update the draft
 version of the template without publishing.</param>
 <returns>The template that was updated.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateUpdate(System.String,System.String,MailChimp.Types.Opt{System.Boolean})">
 <summary>Updates the code for an existing template.</summary>
 <remarks>Templates section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="name">The name of an existing template.</param>
 <param name="code">The HTML code for the template with
 mc:edit attributes for the editable elements.</param>
 <param name="publish">[optional] Flag indicating whether to update the draft
 version of the template without publishing.</param>
 <returns>The template that was updated.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateRender(System.String,MailChimp.Types.Mandrill.NameContentList{System.String},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Mandrill.NameContentList{System.String}})">
 <summary>Injects content and optionally merge fields into a template,
 returning the resulting HTML.</summary>
 <remarks>Templates section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="templateName">The name of an existing template.</param>
 <param name="templateContent">A sequence of template content to send.</param>
 <param name="mergeVars">[optional] Merge variables to use for injecting merge
 field content. If this is not provided, no merge fields will be replaced.</param>
 <returns>The result of rendering the given template
 with the contentand merge field values injected.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateRender(System.String,MailChimp.Types.Mandrill.NameContentList{System.String},MailChimp.Types.Opt{MailChimp.Types.Mandrill.NameContentList{System.String}})">
 <summary>Injects content and optionally merge fields into a template,
 returning the resulting HTML.</summary>
 <remarks>Templates section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="templateName">The name of an existing template.</param>
 <param name="templateContent">A sequence of template content to send.</param>
 <param name="mergeVars">[optional] Merge variables to use for injecting merge
 field content. If this is not provided, no merge fields will be replaced.</param>
 <returns>The result of rendering the given template
 with the contentand merge field values injected.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplatePublish(System.String)">
 <summary>Publish the content for the template.
 <para>Any new messages sent using this template will start using
 the content that was previously in draft.</para></summary>
 <remarks>Templates section.</remarks>
 <param name="name">The name of an existing template.</param>
 <returns>The template that was deleted.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateInfo(System.String)">
 <summary>Gets the information for an existing template.</summary>
 <remarks>Templates section.</remarks>
 <param name="name">The name of an existing template.</param>
 <returns>The requested template information.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateDel(System.String)">
 <summary>Deletes a template.</summary>
 <remarks>Templates section.</remarks>
 <param name="name">The name of an existing template.</param>
 <returns>The template that was deleted.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateAdd(System.String,System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Adds a new template.</summary>
 <remarks>Templates section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="name">The name for the new template - must be unique.</param>
 <param name="code">The HTML code for the template with
 mc:edit attributes for the editable elements.</param>
 <param name="publish">[optional] Flag indicating whether to add a draft
 template without publishing.</param>
 <returns>The information about the new template.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TemplateAdd(System.String,System.String,MailChimp.Types.Opt{System.Boolean})">
 <summary>Adds a new template.</summary>
 <remarks>Templates section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="name">The name for the new template - must be unique.</param>
 <param name="code">The HTML code for the template with
 mc:edit attributes for the editable elements.</param>
 <param name="publish">[optional] Flag indicating whether to add a draft
 template without publishing.</param>
 <returns>The information about the new template.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TagsTimeSeries(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Returns the recent history (hourly stats for the last 30 days) for a tag.</summary>
 <remarks>Tags section.
 <para>If no parameter was supplied, returns the recent history for all tags.</para>
 <para>F# specific optional parameters.</para></remarks>
 <param name="tag">[optional] An existing tag name.</param>
 <returns>The list of history information.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TagsTimeSeries(MailChimp.Types.Opt{System.String})">
 <summary>Returns the recent history (hourly stats for the last 30 days) for a tag.</summary>
 <remarks>Tags section.
 <para>If no parameter was supplied, returns the recent history for all tags.</para>
 <para>C# specific optional parameters.</para></remarks>
 <param name="tag">[optional] An existing tag name.</param>
 <returns>The list of history information.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TagsList">
 <summary>Returns all of the user-defined tag information.</summary>
 <remarks>Tags section.</remarks>
 <returns>A list of user-defined tags.</returns>
</member>
<member name="M:MailChimp.MandrillApi.TagInfo(System.String)">
 <summary>Returns more detailed information about a single tag,
 including aggregates of recent stats.</summary>
 <remarks>Tags section.</remarks>
 <param name="tag">An existing tag name.</param>
 <returns>The detailed information on the tag.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendersTimeSeries(System.String)">
 <summary>Returns the recent history (hourly stats for the last 30 days) for a sender.</summary>
 <remarks>Senders section.</remarks>
 <param name="address">The email address of the sender.</param>
 <returns>The list of history information.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendersList">
 <summary>Returns the senders that have tried to use this account.</summary>
 <remarks>Senders section.</remarks>
 <returns>A list of sender data, one for each sending addresses used by the account.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendersDomains">
 <summary>Returnss the sender domains that have been added to this account.</summary>
 <remarks>Senders section.</remarks>
 <returns>A list of sender domain data, one for each sending domain used by the account.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Senders">
 <summary>Returns the senders that have tried to use this account,
 both verified and unverified.</summary>
 <remarks>Users section.</remarks>
 <returns>A list of sender data, one for each sending addresses used by the account.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SenderInfo(System.String)">
 <summary>Returns more detailed information about a single sender,
 including aggregates of recent stats</summary>
 <remarks>Senders section.</remarks>
 <param name="address">The email address of the sender.</param>
 <returns>The detailed information on the sender.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendTemplate(System.String,MailChimp.Types.Mandrill.NameContentList{System.String},MailChimp.Types.Mandrill.Messages.Message,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Sends a new transactional message through Mandrill using a template.</summary>
 <remarks>Messages section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="templateName">The name of a template that exists in the user's account.</param>
 <param name="templateContent">A sequence of template content to send.</param>
 <param name="message">The information on the message to send.</param>
 <param name="async">[optional] Enables background sending mode
 that is optimized for bulk sending.</param>
 <returns>Sending status for each email address.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendTemplate(System.String,MailChimp.Types.Mandrill.NameContentList{System.String},MailChimp.Types.Mandrill.Messages.Message,MailChimp.Types.Opt{System.Boolean})">
 <summary>Sends a new transactional message through Mandrill using a template.</summary>
 <remarks>Messages section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="templateName">The name of a template that exists in the user's account.</param>
 <param name="templateContent">A sequence of template content to send.</param>
 <param name="message">The information on the message to send.</param>
 <param name="async">[optional] Enables background sending mode
 that is optimized for bulk sending.</param>
 <returns>Sending status for each email address.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendRaw(System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Takes a raw MIME document for a message, and sends it
 exactly as if it were sent over the SMTP protocol.</summary>
 <remarks>Messages section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="message">The full MIME document of an email message.</param>
 <param name="fromEmail">[optional] Defines the sender address -
 otherwise the address found in the provided headers will be used.</param>
 <param name="fromName">[optional] The sender alias.</param>
 <param name="toEmails">[optional] A lits of the recipients to receive the message -
 otherwise the To, Cc, and Bcc headers provided in the document will be used.</param>
 <param name="async">[optional] Enables background sending mode
 that is optimized for bulk sending.</param>
 <returns>Sending status for each email address.</returns>
</member>
<member name="M:MailChimp.MandrillApi.SendRaw(System.String,MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.Collections.Generic.IEnumerable{System.String}},MailChimp.Types.Opt{System.Boolean})">
 <summary>Takes a raw MIME document for a message, and sends it
 exactly as if it were sent over the SMTP protocol.</summary>
 <remarks>Messages section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="message">The full MIME document of an email message.</param>
 <param name="fromEmail">[optional] Defines the sender address -
 otherwise the address found in the provided headers will be used.</param>
 <param name="fromName">[optional] The sender alias.</param>
 <param name="toEmails">[optional] A list of recipients to receive the message -
 otherwise the To, Cc, and Bcc headers provided in the document will be used.</param>
 <param name="async">[optional] Enables background sending mode
 that is optimized for bulk sending.</param>
 <returns>Sending status for each email address.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Send(MailChimp.Types.Mandrill.Messages.Message,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Sends a new transactional message through Mandrill.</summary>
 <remarks>Messages section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="message">The information on the message to send.</param>
 <param name="async">[optional] Enables background sending mode
 that is optimized for bulk sending.</param>
 <returns>Sending status for each email address.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Send(MailChimp.Types.Mandrill.Messages.Message,MailChimp.Types.Opt{System.Boolean})">
 <summary>Sends a new transactional message through Mandrill.</summary>
 <remarks>Messages section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="message">The information on the message to send.</param>
 <param name="async">[optional] Enables background sending mode
 that is optimized for bulk sending.</param>
 <returns>Sending status for each email address.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Ping">
 <summary>Validate an API key and respond to a ping.</summary>
 <remarks>Users section.</remarks>
 <returns>"PONG" if everything is ok.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Parse(System.String)">
 <summary>Parse the full MIME document for an email message,
 returning the content of the message broken into its constituent pieces.</summary>
 <remarks>Messages section.</remarks>
 <param name="message">The full MIME document of an email message.</param>
 <returns>The parsed messag.</returns>
</member>
<member name="M:MailChimp.MandrillApi.MessagesSearch(System.String,Microsoft.FSharp.Core.FSharpOption{System.DateTime},Microsoft.FSharp.Core.FSharpOption{System.DateTime},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>Searches the content of recently sent messages and
 optionally narrow by date range, tags and senders.</summary>
 <remarks>Messages section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="query">The search terms to find matching messages for.</param>
 <param name="dateFrom">[optional] Start date.</param>
 <param name="dateTo">[optional] End date.</param>
 <param name="tags">[optional] An array of tag names to narrow the search to,
 will return messages that contain ANY of the tags.</param>
 <param name="senders">[optional] An array of sender addresses to narrow the search to,
 will return messages sent by ANY of the senders.</param>
 <param name="limit">[optional] The maximum number of results to return,
 <para>Defaults to 100, 1000 is the maximum.</para></param>
 <returns>The list of matching messages.</returns>
</member>
<member name="M:MailChimp.MandrillApi.MessagesSearch(System.String,MailChimp.Types.Opt{System.DateTime},MailChimp.Types.Opt{System.DateTime},MailChimp.Types.Opt{System.Collections.Generic.IEnumerable{System.String}},MailChimp.Types.Opt{System.Collections.Generic.IEnumerable{System.String}},MailChimp.Types.Opt{System.Int32})">
 <summary>Searches the content of recently sent messages and
 optionally narrow by date range, tags and senders.</summary>
 <remarks>Messages section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="query">The search terms to find matching messages for.</param>
 <param name="dateFrom">[optional] Start date.</param>
 <param name="dateTo">[optional] End date.</param>
 <param name="tags">[optional] An array of tag names to narrow the search to,
 will return messages that contain ANY of the tags.</param>
 <param name="senders">[optional] An array of sender addresses to narrow the search to,
 will return messages sent by ANY of the senders.</param>
 <param name="limit">[optional] The maximum number of results to return,
 <para>Defaults to 100, 1000 is the maximum.</para></param>
 <returns>The list of matching messages.</returns>
</member>
<member name="M:MailChimp.MandrillApi.InboundSendRaw(System.String,Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.String}},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Takes a raw MIME document for a message, and sends it
 exactly as if it were sent over the SMTP protocol.</summary>
 <remarks>Inbound section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="message">The full MIME document of an email message.</param>
 <param name="toEmails">[optional] A list of recipients - otherwise To, Cc, and Bcc
 headers provided in the document will be used.</param>
 <param name="mailFrom">[optional] The address specified in the MAIL FROM stage
 of the SMTP conversation. Required for the SPF check.</param>
 <param name="helo">[optional] The identification provided by the client mta in
 the MTA state of the SMTP conversation. Required for the SPF check.</param>
 <param name="clientAddress">[optional] The remote MTA's ip address.
 Required for the SPF check.</param>
 <returns>The information for each recipient in the message (usually one)
 that matched an inbound route.</returns>
</member>
<member name="M:MailChimp.MandrillApi.InboundSendRaw(System.String,MailChimp.Types.Opt{System.Collections.Generic.IEnumerable{System.String}},MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.String})">
 <summary>Takes a raw MIME document for a message, and sends it
 exactly as if it were sent over the SMTP protocol.</summary>
 <remarks>Inbound section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="message">The full MIME document of an email message.</param>
 <param name="toEmails">[optional] A list of recipients - otherwise To, Cc, and Bcc
 headers provided in the document will be used.</param>
 <param name="mailFrom">[optional] The address specified in the MAIL FROM stage
 of the SMTP conversation. Required for the SPF check.</param>
 <param name="helo">[optional] The identification provided by the client mta in
 the MTA state of the SMTP conversation. Required for the SPF check.</param>
 <param name="clientAddress">[optional] The remote MTA's ip address.
 Required for the SPF check.</param>
 <returns>The information for each recipient in the message (usually one)
 that matched an inbound route.</returns>
</member>
<member name="M:MailChimp.MandrillApi.InboundRoutes(System.String)">
 <summary>Gets the list of the mailbox routes defined for an inbound domain.</summary>
 <remarks>Inbound section.</remarks>
 <param name="domain">The domain to check.</param>
 <returns>The routes associated with the domain.</returns>
</member>
<member name="M:MailChimp.MandrillApi.InboundDomains">
 <summary>Gets the list of the domains configured for inbound delivery.</summary>
 <remarks>Inbound section.</remarks>
 <returns>The inbound domains associated with the account.</returns>
</member>
<member name="M:MailChimp.MandrillApi.CallServer``1(System.String,MailChimp.Types.Opt{MailChimp.Types.Input})">
 <summary>Executes a custom call to the Mandrill server.</summary>
 <param name="methodName">Method name.</param>
 <param name="p">[optional] Input data.</param>
 <returns>Deserialized result.</returns>
</member>
<member name="M:MailChimp.MandrillApi.BlacklistDel(System.String)">
 <summary>Removes an email address from the blacklist.</summary>
 <remarks>Blacklist section.
 <para>There is no limit to how many rejections you can remove from your blacklist,</para>
 <para>but keep in mind that each deletion has an affect on your reputation.</para></remarks>
 <param name="email">An email address to remove from the blacklist.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MandrillApi.BlacklistAdd(System.String)">
 <summary>Adds an email to an email rejection blacklist.</summary>
 <remarks>Blacklist section.
 <para> Addresses that you add manually will never expire and there is no
 reputation penalty for removing them from your blacklist.</para>
 <para>Attempting to blacklist an address that has been whitelisted will
 have no effect.</para></remarks>
 <param name="email">An email address to add to the blacklist.</param>
 <returns>True on success.</returns>
</member>
<member name="M:MailChimp.MandrillApi.Blacklist(Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>Retrieves your email rejection blacklist.</summary>
 <remarks>Blacklist section.
 <para>F# specific optional parameters.</para></remarks>
 <param name="email">[optional] An email address or prefix to search by.</param>
 <param name="includeExpired">[optional] Whether to include rejections
 that have already expired.</param>
 <returns>The information for each rejection blacklist entry (up to 1000 items).</returns>
</member>
<member name="M:MailChimp.MandrillApi.Blacklist(MailChimp.Types.Opt{System.String},MailChimp.Types.Opt{System.Boolean})">
 <summary>Retrieves your email rejection blacklist.</summary>
 <remarks>Rejects section.
 <para>C# specific optional parameters.</para></remarks>
 <param name="email">[optional] An email address or prefix to search by.</param>
 <param name="includeExpired">[optional] Whether to include rejections
 that have already expired.</param>
 <returns>The information for each rejection blacklist entry (up to 1000 items).</returns>
</member>
<member name="">

</member>
<member name="T:MailChimp.MandrillApi">
 <summary>Mandrill API wrapper.</summary>
</member>
<member name="P:MailChimp.WebhooksListener.Key(System.String)">
 <summary>Gets or sets the secret key, which is added to the Webhook URL querystring.
 <para>Example: http://{host}/{path}/?key={key}</para></summary>
 <example>http://{host}/{path}/?key={key}</example>
</member>
<member name="P:MailChimp.WebhooksListener.IgnoreWriteExceptions(System.Boolean)">
 <summary>Gets or sets a Boolean value that specifies whether your application receives
 exceptions that occur when an Listener sends the response to the client.
 <para>Default is false.</para></summary>
</member>
<member name="M:MailChimp.WebhooksListener.remove_WebhookReceived(MailChimp.Types.Webhooks.WebhooksEventHandler)">
 <summary>Occurs when valid webhook is received.</summary>
</member>
<member name="M:MailChimp.WebhooksListener.remove_InvalidRequest(MailChimp.Types.Webhooks.ErrorEventHandler)">
 <summary>Occurs when invalid request is received.</summary>
</member>
<member name="P:MailChimp.WebhooksListener.WebhookReceived">
 <summary>Occurs when valid webhook is received.</summary>
</member>
<member name="P:MailChimp.WebhooksListener.Prefixes">
 <summary>Gets the Uniform Resource Identifier (URI) prefixes
 handled by this Listener object.</summary>
</member>
<member name="P:MailChimp.WebhooksListener.Key">
 <summary>Gets or sets the secret key, which is added to the Webhook URL querystring.
 <para>Example: http://{host}/{path}/?key={key}</para></summary>
 <example>http://{host}/{path}/?key={key}</example>
</member>
<member name="P:MailChimp.WebhooksListener.IsListening">
 <summary>Gets a value that indicates whether Listener has been started.</summary>
</member>
<member name="P:MailChimp.WebhooksListener.InvalidRequest">
 <summary>Occurs when invalid request is received.</summary>
</member>
<member name="P:MailChimp.WebhooksListener.IgnoreWriteExceptions">
 <summary>Gets or sets a Boolean value that specifies whether your application receives
 exceptions that occur when an Listener sends the response to the client.
 <para>Default is false.</para></summary>
</member>
<member name="M:MailChimp.WebhooksListener.add_WebhookReceived(MailChimp.Types.Webhooks.WebhooksEventHandler)">
 <summary>Occurs when valid webhook is received.</summary>
</member>
<member name="M:MailChimp.WebhooksListener.add_InvalidRequest(MailChimp.Types.Webhooks.ErrorEventHandler)">
 <summary>Occurs when invalid request is received.</summary>
</member>
<member name="M:MailChimp.WebhooksListener.Stop">
 <summary>Causes this instance to stop receiving incoming requests.</summary>
</member>
<member name="M:MailChimp.WebhooksListener.Start">
 <summary>Allows this instance to receive incoming requests asynchronously.</summary>
</member>
<member name="M:MailChimp.WebhooksListener.Close">
 <summary>Shuts down the Listener object.</summary>
</member>
<member name="M:MailChimp.WebhooksListener.Abort">
 <summary>Shuts down the Listener object immediately,
 discarding all currently queued requests.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.WebhooksListener">
 <summary>Webhooks listener. A server that listens for POST request from MailChimp.
 <para>If the server receives a valid request from MailChimp the received data is
 parsed and an event, which can be handled in a custom application, is emitted.</para></summary>
 <remarks>Implements <see cref="System.Net.HttpListener"/>.
 <para>Incoming requests are processed asynchronously.</para></remarks>
</member>
<member name="P:MailChimp.Types.ApiBase.Timeout(System.Int32)">
 <summary>Gets or sets the web request time-out value in seconds.</summary>
 <remarks>Defaults to 300.</remarks>
</member>
<member name="P:MailChimp.Types.ApiBase.Secure(System.Boolean)">
 <summary>Gets or sets a value indicating whether to turn HTTPS on.</summary>
</member>
<member name="P:MailChimp.Types.ApiBase.ApiKey(System.String)">
 <summary>Gets or sets the key to access the API with.</summary>
</member>
<member name="P:MailChimp.Types.ApiBase.UserAgent">
 <summary>Gets the value of the User-agent HTTP header.</summary>
</member>
<member name="P:MailChimp.Types.ApiBase.Timeout">
 <summary>Gets or sets the web request time-out value in seconds.</summary>
 <remarks>Defaults to 300.</remarks>
</member>
<member name="P:MailChimp.Types.ApiBase.Secure">
 <summary>Gets or sets a value indicating whether to turn HTTPS on.</summary>
</member>
<member name="P:MailChimp.Types.ApiBase.OutputFormat">
 <summary>Gets the default output format.</summary
</member>
<member name="P:MailChimp.Types.ApiBase.KeyParam">
 <summary>Gets the API key parameter name.</summary
</member>
<member name="P:MailChimp.Types.ApiBase.HasDataCenter">
 <summary>Gets a value indicating whether
 the API url has data center parameter.</summary>
</member>
<member name="P:MailChimp.Types.ApiBase.DataCenter">
 <summary>Gets the data center retrieved from the supplied API key.</summary>
</member>
<member name="P:MailChimp.Types.ApiBase.ApiUrl">
 <summary>Gets the API url format.</summary>
 <remarks>A url may contain the next format strings:
 <para>- {dc} - data center;</para>
 <para>- {method} - method name;</para>
 <para>- {fmt} - output format.</para></remarks>
</member>
<member name="P:MailChimp.Types.ApiBase.ApiKey">
 <summary>Gets or sets the key to access the API with.</summary>
</member>
<member name="M:MailChimp.Types.ApiBase.GetResponse(MailChimp.Types.WebMethod,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Format},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Input})">
 <summary>Executes serial call to the server.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="webMethod">The method for the request.</param>
 <param name="methodName">The name of method to call.</param>
 <param name="outFmt">[optional] Output format.</param>
 <param name="p">[optional] The data for the request.</param>
 <returns>A raw http response.</returns>
</member>
<member name="M:MailChimp.Types.ApiBase.GetResponse(MailChimp.Types.WebMethod,System.String,MailChimp.Types.Opt{MailChimp.Types.Format},MailChimp.Types.Opt{MailChimp.Types.Input})">
 <summary>Executes serial call to the server.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="webMethod">The method for the request.</param>
 <param name="methodName">The name of method to call.</param>
 <param name="outFmt">[optional] Output format.</param>
 <param name="p">[optional] The data for the request.</param>
 <returns>A raw http response.</returns>
</member>
<member name="M:MailChimp.Types.ApiBase.CallServer(MailChimp.Types.WebMethod,System.String,Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Format},Microsoft.FSharp.Core.FSharpOption{MailChimp.Types.Input})">
 <summary>Executes serial call to the server.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="webMethod">The method for the request.</param>
 <param name="methodName">The name of method to call.</param>
 <param name="outFmt">[optional] Output format.</param>
 <param name="p">[optional] The data for the request.</param>
 <returns>The status of the server's response and its content</returns>
</member>
<member name="M:MailChimp.Types.ApiBase.CallServer(MailChimp.Types.WebMethod,System.String,MailChimp.Types.Opt{MailChimp.Types.Format},MailChimp.Types.Opt{MailChimp.Types.Input})">
 <summary>Executes serial call to the server.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="webMethod">The method for the request.</param>
 <param name="methodName">The name of method to call.</param>
 <param name="outFmt">[optional] Output format.</param>
 <param name="p">[optional] The data for the request.</param>
 <returns>The status of the server's response and its content.</returns>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.ApiBase">
 <summary>MailChimp API base class.</summary>
 <remarks>Provides common functionality to all MailChimp APIs.</remarks>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MailChimp.Types.Error.Message">
 <summary>Gets a message that describes the current exception.</summary>
</member>
<member name="P:MailChimp.Types.Error.Code">
 <summary>Gets a value that is assigned to a specific exception.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Error">
 <summary>API error base class.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Format">
 <summary>Serialization format.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.IValue">
 <summary>Interface used to convert an object into query string parameter.</summary>
</member>
<member name="M:MailChimp.Types.Input.Remove(System.String)">
 <summary>Removes item with the specified key.</summary>
</member>
<member name="M:MailChimp.Types.Input.Merge(MailChimp.Types.IInput)">
 <summary>Merges current object with another one implementing IInput interface.</summary>
 <remarks>This will replace items with duplicate keys.</remarks>
</member>
<member name="M:MailChimp.Types.Input.Merge(MailChimp.Types.Input)">
 <summary>Merges current object with another one.</summary>
 <remarks>This will replace items with duoplicate keys.</remarks>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Input">
 <summary>Dictionary for the input data.</summary>
</member>
<member name="P:MailChimp.Types.LineReader.LineNum">
 <summary>Gets the current line number.</summary>
</member>
<member name="M:MailChimp.Types.LineReader.ReadLine">
 <summary>Reads a line from the underlying string.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.LineReader">
 <summary>Line reader class.</summary>
</member>
<member name="F:MailChimp.Types.MailChimp.Types.MCBool.Value">
 <summary>Gets the value of the current object.</summary>
</member>
<member name="M:MailChimp.Types.MCBool.op_Implicit(System.Boolean)">
 <summary>Implicit convertion operator.</summary>
</member>
<member name="M:MailChimp.Types.MCBool.op_Explicit(MailChimp.Types.MCBool)">
 <summary>Explicit convertion operator.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MCBool">
 <summary>Boolean implementing IXmlSerializable interface.</summary>
</member>
<member name="F:MailChimp.Types.MailChimp.Types.MCDateTime.Value">
 <summary>Gets the value of the current object.</summary>
</member>
<member name="M:MailChimp.Types.MCDateTime.op_Implicit(System.DateTime)">
 <summary>Implicit convertion operator.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MCDateTime">
 <summary>DateTime implementing IXmlSerializable interface.</summary>
</member>
<member name="M:MailChimp.Types.MCDict`1.ofSeq(System.Collections.Generic.IEnumerable{System.Tuple{System.String,`0}})">
 <summary>Creates MCDict from a sequence.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MCDict`1">
 <summary>Generic dictionary implementing IXmlSerializable interface.
 <para>Suitable for deserialization of MailChimp API array where keys are
 the local names of its elements.</para></summary>
</member>
<member name="M:MailChimp.Types.MCDict`2.ofSeq(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
 <summary>Creates MCDict from a sequence.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MCDict`2">
 <summary>Generic dictionary implementing IXmlSerializable interface.
 <para>Suitable for deserialization of MailChimp API array where keys are
 its elements attribute named "key".</para></summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MailChimp.Types.MCException.Response">
 <summary>Gets the response that the remote host returned.</summary>
</member>
<member name="P:MailChimp.Types.MCException.Error">
 <summary>Gets the error that caused the current exception.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MailChimp.Types.MCList`1.ofSeq(System.Collections.Generic.IEnumerable{`0})">
 <summary>Creates MCList from a sequence.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MCList`1">
 <summary>Generic list with customized CollectionDataContract attribute
 suitable for deserialization of MailChimp API array (item tag : 'struct').</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MailChimp.Types.MCNull`1.op_Implicit(`0)">
 <summary>Implicit convertion operator.</summary>
</member>
<member name="M:MailChimp.Types.MCNull`1.op_Explicit(MailChimp.Types.MCNull{`0})">
 <summary>Explicit convertion operator.</summary>
</member>
<member name="P:MailChimp.Types.MCNull`1.Value">
 <summary>Gets the value of the current object.</summary>
</member>
<member name="P:MailChimp.Types.MCNull`1.HasValue">
 <summary>Gets a value indicating whether the current object has a value.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MCNull`1">
 <summary>Represents an object whose underlying type is a value
 type that can also be assigned a null reference like a reference type.
 <para>Implements IXmlSerializable interface.</para></summary>
</member>
<member name="T:MailChimp.Types.MCSeq`1.Sq">
 <summary>The representation of a sequence</summary>
</member>
<member name="T:MailChimp.Types.MCSeq`1.Sn">
 <summary>The representation of a singleton</summary>
</member>
<member name="T:MailChimp.Types.MCSeq`1.Null">
 <summary>The representation of "No value"</summary>
</member>
<member name="M:MailChimp.Types.MCSeq`1.op_Implicit(System.Collections.Generic.IEnumerable{`0})">
 <summary>Implicit convertion from <c>Seq<'T></c>.</summary>
</member>
<member name="M:MailChimp.Types.MCSeq`1.op_Implicit(`0)">
 <summary>Implicit convertion from <c>'T</c>.</summary>
</member>
<member name="M:MailChimp.Types.MCSeq`1.op_Explicit(MailChimp.Types.MCSeq{`0})">
 <summary>Explicit convertion to <c>Seq<'T></c>.</summary>
 <exception cref="System.InvalidOperationException">Thrown when the value is not 'Sq' type.</exception>
</member>
<member name="M:MailChimp.Types.MCSeq`1.op_Explicit(MailChimp.Types.MCSeq{`0})">
 <summary>Explicit convertion to <c>'T</c>.</summary>
 <exception cref="System.InvalidOperationException">Thrown when the value is not 'Sn' type.</exception>
</member>
<member name="P:MailChimp.Types.MCSeq`1.SqValue">
 <summary>Gets the value represented by 'Sq' option (<c>Seq<'T></c>).</summary>
 <exception cref="System.InvalidOperationException">Thrown when the value is not 'Sq' type.</exception>
</member>
<member name="P:MailChimp.Types.MCSeq`1.SnValue">
 <summary>Gets the value represented by 'Sn' option (<c>'T</c>).</summary>
 <exception cref="System.InvalidOperationException">Thrown when the value is not 'Sn' type.</exception>
</member>
<member name="P:MailChimp.Types.MCSeq`1.Null">
 <summary>Creates a MCSeq value that is a 'Null' value.</summary>
</member>
<member name="M:MailChimp.Types.MCSeq`1.ToString">
 <summary>Returns a comma delimited String that represents the current MCSeq object.</summary>
 <remarks>The method escapes all commas unless they are postpended with backslash - ",\".</remarks>
</member>
<member name="M:MailChimp.Types.MCSeq`1.Create(System.Collections.Generic.IEnumerable{`0})">
 <summary>Creates a MCSeq value that is a 'Sq' value.</summary>
</member>
<member name="M:MailChimp.Types.MCSeq`1.Create(`0)">
 <summary>Creates a MCSeq value that is a 'Sn' value.</summary>
</member>
<member name="T:MailChimp.Types.MCSeq`1">
 <summary>The union type representing specialized sequence.
 It's string representation depends on the underlying type:
 <para>- Singleton value is converted as is;</para>
 <para>- Sequence value is converted to a comma delimited string.</para></summary>
 <remarks>Implements explicit/implicit convertion operators.</remarks>
</member>
<member name="M:MailChimp.Types.MVList`1.ofSeq(System.Collections.Generic.IEnumerable{`0})">
 <summary>Creates STSList from a sequence.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.MVList`1">
 <summary>Generic list with customized CollectionDataContract attribute
 suitable for deserialization of Mandrill API array (item tag: 'value').</summary>
</member>
<member name="M:MailChimp.Types.NestedDict.ParseQueryString(System.Collections.Specialized.NameValueCollection)">
 <summary>Converts a NameValueCollection into a NestedDict.</summary>
</member>
<member name="M:MailChimp.Types.NestedDict.ParseQueryString(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>Parses nested query string into a NestedDict.</summary>
</member>
<member name="M:MailChimp.Types.NestedDict.GetValue(System.String)">
 <summary>Gets the inner dict associated with the specified path.</summary>
 <param name="path">The path to the entry that contains the value to get.
 <para>Path format: "key0/key1/key2". Slash ('/') in the key name should be
 replaced with double slash ('//')</para></param>
</member>
<member name="M:MailChimp.Types.NestedDict.GetDict(System.String)">
 <summary>Gets the inner dict associated with the specified path.</summary>
 <param name="path">The path to the entry that contains the value to get.
 <para>Path format: "key0/key1/key2". Slash ('/') in the key name should be
 replaced with double slash ('//')</para></param>
</member>
<member name="M:MailChimp.Types.NestedDict.Get(System.String)">
 <summary>Gets the value associated with the specified path.</summary>
 <param name="path">The path to the entry that contains the value to get.
 <para>Path format: "key0/key1/key2". Slash ('/') in the key name should be
 replaced with double slash ('//')</para></param>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.NestedDict">
 <summary>Nested dictionary. A collection of associated String keys and values
 that can be either String or another NestedDict.
 <para>This type is used to parse nested query strings.</para></summary>
</member>
<member name="T:MailChimp.Types.NestedDictValue.Dict">
 <summary>The representation of <c>NestedDict</c> value.</summary>
</member>
<member name="T:MailChimp.Types.NestedDictValue.Value">
 <summary>The representation of <c>String</c> value.</summary>
</member>
<member name="T:MailChimp.Types.NestedDictValue.Empty">
 <summary>The representation of empty node.</summary>
</member>
<member name="M:MailChimp.Types.NestedDictValue.op_Implicit(MailChimp.Types.NestedDict)">
 <summary>Implicit convertion from NestedDict.</summary>
</member>
<member name="M:MailChimp.Types.NestedDictValue.op_Implicit(System.String)">
 <summary>Implicit convertion from String.</summary>
</member>
<member name="M:MailChimp.Types.NestedDictValue.op_Explicit(MailChimp.Types.NestedDictValue)">
 <summary>Explicit convertion to String.</summary>
 <exception cref="System.InvalidOperationException">Thrown when the value is not 'Dict' type.</exception>
</member>
<member name="M:MailChimp.Types.NestedDictValue.op_Explicit(MailChimp.Types.NestedDictValue)">
 <summary>Explicit convertion to String.</summary>
 <exception cref="System.InvalidOperationException">Thrown when the value is not 'Value' type.</exception>
</member>
<member name="T:MailChimp.Types.NestedDictValue">
 <summary>Nested dictionary entry value.</summary>
 <remarks>Implements explicit/implicit convertion operators.</remarks>
</member>
<member name="T:MailChimp.Types.Opt`1.Some">
 <summary>The representation of "Value of type 'T"</summary>
</member>
<member name="T:MailChimp.Types.Opt`1.None">
 <summary>The representation of "No value"</summary>
</member>
<member name="M:MailChimp.Types.Opt`1.op_Implicit(`0)">
 <summary>Implicit convertion operator.</summary>
</member>
<member name="M:MailChimp.Types.Opt`1.op_Explicit(MailChimp.Types.Opt{`0})">
 <summary>Explicit convertion operator.</summary>
 <exception cref="System.NullReferenceException">Thrown when the option is 'None'.</exception>
</member>
<member name="P:MailChimp.Types.Opt`1.Value">
 <summary>Get the value of a 'Some' option.</summary>
 <exception cref="System.NullReferenceException">Thrown when the option is 'None'.</exception>
</member>
<member name="P:MailChimp.Types.Opt`1.None">
 <summary>Creates an option value that is a 'None' value.</summary>
</member>
<member name="M:MailChimp.Types.Opt`1.Some(`0)">
 <summary>Creates an option value that is a 'Some' value.</summary>
</member>
<member name="T:MailChimp.Types.Opt`1">
 <summary>The type of optional values that implements explicit/implicit convertion operators.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.SortDirection">
 <summary>Sort direction.</summary>
</member>
<member name="">

</member>
<member name="P:MailChimp.Types.VarList`2.Value">
 <summary>Gets the value (<c>MCSeq<'T></c>) of the current object.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.VarList`2">
 <summary>Variable content list. Suitable for serialization of variable content
 that can be either a single value or a list of values.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.WebMethod">
 <summary>Web method. Either GET or POST.</summary>
</member>
<member name="T:MailChimp.Types.dv">
 <summary>Default value attribute abbreviation.</summary>
</member>
<member name="T:MailChimp.Types.httpst">
 <summary>HttpStatusCode abbreviation.</summary>
</member>
<member name="T:MailChimp.Types.mcnull`1">
 <summary>Represents an object whose underlying type is a value
 type that can also be assigned a null reference like a reference type.
 <para>Implements IXmlSerializable interface.</para></summary>
</member>
<member name="T:MailChimp.Types.mcseq`1">
 <summary>The union type representing specialized sequence.
 It's string representation depends on the underlying type:
 <para>- Singleton value is converted as is;</para>
 <para>- Sequence value is converted to a comma delimited string.</para></summary>
 <remarks>Implements explicit/implicit convertion operators.</remarks>
</member>
<member name="T:MailChimp.Types.op">
 <summary>Optional param attribute abbreviation.</summary>
</member>
<member name="T:MailChimp.Types.opt`1">
 <summary>Alternative to FSharp.Option implementing explicit/implicit convertion operators.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MailChimp.Types.Campaign.SegmentOptions.Parse(MailChimp.Types.Campaign.Match,MailChimp.Types.MCSeq{System.String})">
 <summary>Parses a sequence of condition strings.
 <para>Condition format: "field => op => value [=> extra]"</para></summary>
 <remarks>Value containing unescaped commas will be splitted into an array.</remarks>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Campaign.ReportData">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Campaign.Stats">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Campaign.Content">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Campaign.TypeOptions.Helper">

</member>
<member name="T:MailChimp.Types.Campaign.TypeOptions">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Campaign.CndParser">

</member>
<member name="T:MailChimp.Types.Campaign">

</member>
<member name="M:MailChimp.Types.Common.deserializeJson``1(System.Object)">
 <summary>Deserializes the specified object using JSon DataContractSerializer.</summary>
</member>
<member name="M:MailChimp.Types.Common.deserializeXml``1(System.Object)">
 <summary>Deserializes the specified object using Xml DataContractSerializer.</summary>
</member>
<member name="M:MailChimp.Types.Common.createJsonReader(System.String)">
 <summary>Creates XmlDictionaryReader from Json string.</summary>
</member>
<member name="M:MailChimp.Types.Common.prepareXml(System.String)">
 <summary>Sorts an xml document.</summary>
</member>
<member name="P:MailChimp.Types.Common.getTransform">
 <summary>Creates an Xsl Transform from the embedded resource.</summary>
</member>
<member name="M:MailChimp.Types.Common.getBytesASCII(System.String)">
 <summary>Encodes string into a sequence of bytes asing ASCII format.</summary>
</member>
<member name="M:MailChimp.Types.Common.getBytesUTF8(System.String)">
 <summary>Encodes string into a sequence of bytes using UTF8 format.</summary>
</member>
<member name="M:MailChimp.Types.Common.isoWeekDay(System.DayOfWeek)">
 <summary>Converts <c>System.DayOfWeek</c> to ISO-8601 weekday number.</summary>
</member>
<member name="M:MailChimp.Types.Common.convert``1(System.String)">
 <summary>Converts string to specified type.</summary>
</member>
<member name="M:MailChimp.Types.Common.xattr(System.String,System.Xml.XmlReader)">
 <summary>Gets the lowercase value of the attribute.</summary>
</member>
<member name="M:MailChimp.Types.Common.replace(System.Text.RegularExpressions.Regex,System.String,System.String)">
 <summary>Replaces strings that match a regular expression pattern
 with the specified replacement string.</summary>
</member>
<member name="M:MailChimp.Types.Common.regex(System.String)">
 <summary>Creates regex from pattern.</summary>
</member>
<member name="M:MailChimp.Types.Common.trim(System.String)">
 <summary>Removes all leading and trailing white-space characters
 from the current String object.</summary>
</member>
<member name="M:MailChimp.Types.Common.isNullOrEmpty(System.String)">
 <summary>Indicates whether the specified string is null or empty.</summary>
</member>
<member name="M:MailChimp.Types.Common.readStream(System.IO.Stream)">
 <summary>Reads a stream from the current position to the end.</summary>
</member>
<member name="M:MailChimp.Types.Common.getResource(System.String)">
 <summary>Gets an embedded resource.</summary>
</member>
<member name="T:MailChimp.Types.Common">
 <summary>Provides common functions used across the application.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Ecommerce">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Export">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Folder">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.GoldenMonkeys">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Helper">

</member>
<member name="M:MailChimp.Types.InputHelper.build(System.Object)">
 <summary>Creates an Input object.</summary>
 <remarks>Uses reflection and DataMember attributes to get keys and values
 to be inserted into the Input object.</remarks>
</member>
<member name="M:MailChimp.Types.InputHelper.split``1(System.String,System.String)">
 <summary>Splits string into an array using the specified delimiter.</summary>
 <remarks>When delimiter is comma, the method skips escaped commas and
 then unascapes them in the resulting array.
 <para>This behavior can be overridden by postpending commas with backslash - ",\".</para></remarks>
</member>
<member name="M:MailChimp.Types.InputHelper.joinSeq``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <summary>Creates delimited string from a sequence.</summary>
 <remarks>When delimiter is comma, the method escapes all commas in the input strings.
 <para>This behavior can be overridden by postpending commas with backslash - ",\".</para></remarks>
</member>
<member name="M:MailChimp.Types.InputHelper.dateTimeStr(System.DateTime)">
 <summary>Converts date/time to string formatted as "yyyy-MM-dd HH:mm:ss".</summary>
</member>
<member name="M:MailChimp.Types.InputHelper.dateStr(System.DateTime)">
 <summary>Converts date to string formatted as "yyyy:MM:dd".</summary>
</member>
<member name="T:MailChimp.Types.InputHelper">
 <summary>Internal helper methods.</summary>
</member>
<member name="M:MailChimp.Types.InputModule.buildQueryString(MailChimp.Types.Input)">
 <summary>Generates a URL-encoded query string.</summary>
</member>
<member name="M:MailChimp.Types.InputModule.ofSeq(System.Collections.IEnumerable)">
 <summary>Creates an Input object from a sequence.</summary>
</member>
<member name="M:MailChimp.Types.InputModule.ofDict(Microsoft.FSharp.Core.FSharpFunc{System.String,System.String},System.Collections.IDictionary)">
 <summary>Creates an Input object from a dictionary with the specified key function.</summary>
</member>
<member name="T:MailChimp.Types.InputModule">
 <summary>Provides operations on Input.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.List.Merges">
<summary>
 Represents a collection of merge fields.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.List">

</member>
<member name="M:MailChimp.Types.MCExceptionModule.callServerFail``1(System.Exception,System.Int32,System.String)">
 <summary>Server exception exception.</summary>
</member>
<member name="M:MailChimp.Types.MCExceptionModule.transformFail``1(System.Exception,System.String)">
 <summary>XML transform exception.</summary>
</member>
<member name="M:MailChimp.Types.MCExceptionModule.deserializeFail``1(System.Exception,System.String)">
 <summary>Deserialization exception.</summary>
</member>
<member name="T:MailChimp.Types.MCExceptionModule">
 <summary>Common exceptions module.</summary>
</member>
<member name="M:MailChimp.Types.MCSeqModule.parse``1(System.String)">
 <summary>Converts string to its MCSeq value.</summary>
 <param name="x">Comma delimited string to parse.
 If the input string contains comma, prepend or postpend it with backslash -"\," or ",\".</param>
 <remarks>The method unascapes any escaped comma unless it is postpended with backslash.</remarks>
</member>
<member name="M:MailChimp.Types.MCSeqModule.toArray``1(MailChimp.Types.MCSeq{``0})">
 <summary>Converts mcseq to an array.</summary>
</member>
<member name="M:MailChimp.Types.MCSeqModule.IsNull``1(MailChimp.Types.MCSeq{``0})">
 <summary>Checks whether the mcseq is a 'Null' value.</summary>
</member>
<member name="M:MailChimp.Types.MCSeqModule.IsSq``1(MailChimp.Types.MCSeq{``0})">
 <summary>Checks whether the mcseq is a 'Sq' value.</summary>
</member>
<member name="M:MailChimp.Types.MCSeqModule.IsSn``1(MailChimp.Types.MCSeq{``0})">
 <summary>Checks whether the mcseq is a 'Sn' value.</summary>
</member>
<member name="M:MailChimp.Types.MCSeqModule.Sq``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>Creates a MCSeq value that is a 'Sq' value.</summary>
</member>
<member name="M:MailChimp.Types.MCSeqModule.Sn``1(``0)">
 <summary>Creates a MCSeq value that is a 'Sn' value.</summary>
</member>
<member name="T:MailChimp.Types.MCSeqModule">
 <summary>Provides operations on MCSeq.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Mandrill.NameContentList`1">
<summary>
 Represents a collection of name-content pairs.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Mandrill.NameContentPair`1">
<summary>
 Defines a generic name/content pair.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Mandrill.Inbound">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:MailChimp.Types.Mandrill.Messages.ParsedMessage.ToMessage(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>Converts to 'Message' object that can be send using 'Send' method.</summary>
 <remarks>F# specific optional parameters.</remarks>
 <param name="headerFilter">[optional] Regex for headers filtering.
 <para>Defaults to "Reply-To|X-.+".</para></param>
</member>
<member name="M:MailChimp.Types.Mandrill.Messages.ParsedMessage.ToMessage(MailChimp.Types.Opt{System.String})">
 <summary>Converts to 'Message' object that can be send using 'Send' method.</summary>
 <remarks>C# specific optional parameters.</remarks>
 <param name="headerFilter">[optional] Regex for headers filtering.
 <para>Defaults to "Reply-To|X-.+".</para></param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Mandrill.Messages">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Mandrill.Rejections">

</member>
<member name="T:MailChimp.Types.Mandrill">

</member>
<member name="M:MailChimp.Types.Operators.defValue``1(MailChimp.Types.Opt{``0},``0)">
 <summary>Used to specify a default value for an optional argument
 in the implementation of a function.</summary>
</member>
<member name="M:MailChimp.Types.Operators.op_BangEquals``2(``0,``1)">
 <summary>Obj inequality operator.</summary>
</member>
<member name="M:MailChimp.Types.Operators.op_EqualsEquals``2(``0,``1)">
 <summary>Obj quality operator.</summary>
</member>
<member name="M:MailChimp.Types.Operators.op_AtQmark``1(``0,``0)">
 <summary>Replaces null object with the specified value.</summary>
</member>
<member name="M:MailChimp.Types.Operators.op_LessQmark``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Converts FSharp option to opt.</summary>
</member>
<member name="M:MailChimp.Types.Operators.op_GreaterQmark``1(MailChimp.Types.Opt{``0})">
 <summary>Converts opt to FSharp option.</summary>
</member>
<member name="T:MailChimp.Types.Operators">
 <summary>Module containing common operators.</summary>
</member>
<member name="M:MailChimp.Types.OptModule.ofOption``1(Microsoft.FSharp.Core.FSharpOption{``0})">
 <summary>Converts FSharp.Option to an opt object.</summary>
</member>
<member name="M:MailChimp.Types.OptModule.toOption``1(MailChimp.Types.Opt{``0})">
 <summary>Converts opt to a FSharp.Option object.</summary>
</member>
<member name="M:MailChimp.Types.OptModule.GetValue``1(MailChimp.Types.Opt{``0})">
 <summary>Gets the value of a 'Some' option.</summary>
</member>
<member name="M:MailChimp.Types.OptModule.IsSome``1(MailChimp.Types.Opt{``0})">
 <summary>Checks whether the option is a 'None' value.</summary>
</member>
<member name="M:MailChimp.Types.OptModule.IsNone``1(MailChimp.Types.Opt{``0})">
 <summary>Checks whether the option is a 'Some' value.</summary>
</member>
<member name="M:MailChimp.Types.OptModule.Some``1(``0)">
 <summary>Creates an option value that is a 'Some' value.</summary>
</member>
<member name="T:MailChimp.Types.OptModule">
 <summary>Provides operations on Opt.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Security">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Template">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:MailChimp.Types.Webhooks.WebhooksEventArgs.Type">
 <summary>Gets the type of the event.</summary>
</member>
<member name="P:MailChimp.Types.Webhooks.WebhooksEventArgs.Timestamp">
 <summary>Gets the timestamp of the event.</summary>
</member>
<member name="P:MailChimp.Types.Webhooks.WebhooksEventArgs.RequestData">
 <summary>Gets the raw request data.</summary>
</member>
<member name="P:MailChimp.Types.Webhooks.WebhooksEventArgs.Data">
 <summary>Gets the parsed request data.</summary>
</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Webhooks.WebhooksEventArgs">
 <summary>CLI compatible webhooks event args.</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:MailChimp.Types.Webhooks.WebhookType">
 <summary>Webhook type enum.</summary>
</member>
<member name="T:MailChimp.Types.Webhooks">

</member>
</members>
</doc>
