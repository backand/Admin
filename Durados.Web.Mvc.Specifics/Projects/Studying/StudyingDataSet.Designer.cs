//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Durados.Web.Mvc.Specifics.Projects.Studying {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StudyingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StudyingDataSet : global::System.Data.DataSet {
        
        private TableEstablishmentsOpenDateDataTable tableTableEstablishmentsOpenDate;
        
        private TYoramSchoolsDataTable tableTYoramSchools;
        
        private TAdministratorsDataTable tableTAdministrators;
        
        private TAdvertisingEstablishmentsDataTable tableTAdvertisingEstablishments;
        
        private TAreasCoursesDataTable tableTAreasCourses;
        
        private TArticlesDataTable tableTArticles;
        
        private TCategoriesDataTable tableTCategories;
        
        private TCoursesDataTable tableTCourses;
        
        private TEstablishmentsDataTable tableTEstablishments;
        
        private TLecturersDataTable tableTLecturers;
        
        private TMessagesDataTable tableTMessages;
        
        private TMessagesForSchoolDataTable tableTMessagesForSchool;
        
        private TPhonesListDataTable tableTPhonesList;
        
        private TPhotoGalleryDataTable tableTPhotoGallery;
        
        private TRegionsDataTable tableTRegions;
        
        private TReviewsDataTable tableTReviews;
        
        private TScholarshipsDataTable tableTScholarships;
        
        private TSubAreasCoursesDataTable tableTSubAreasCourses;
        
        private TTypeCoursesDataTable tableTTypeCourses;
        
        private TVisitorsMailsDataTable tableTVisitorsMails;
        
        private TVisitorsMessagesDataTable tableTVisitorsMessages;
        
        private TYoramCatsDataTable tableTYoramCats;
        
        private TLecturesAndCoursesDataTable tableTLecturesAndCourses;
        
        private global::System.Data.DataRelation relationFK_TableEstablishmentsOpenDate_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TAdvertisingEstablishments_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TAreasCourses_TCategories;
        
        private global::System.Data.DataRelation relationFK_TCourses_TCategories;
        
        private global::System.Data.DataRelation relationFK_TCourses_TDomainsCourses;
        
        private global::System.Data.DataRelation relationFK_TCourses_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TEstablishments_TRegions;
        
        private global::System.Data.DataRelation relationFK_TLecturers_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TMessages_TCourses;
        
        private global::System.Data.DataRelation relationFK_TMessages_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TMessagesForSchool_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TPhonesList_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TPhotoGallery_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TScholarships_TEstablishments;
        
        private global::System.Data.DataRelation relationFK_TSubAreasCourses_TAreasCourses;
        
        private global::System.Data.DataRelation relationFK_TLecturesAndCourses_TCourses;
        
        private global::System.Data.DataRelation relationFK_TLecturesAndCourses_TLecturers;
        
        private global::System.Data.DataRelation relationTCategories_TArticles;
        
        private global::System.Data.DataRelation relationTAreasCourses_TArticles;
        
        private global::System.Data.DataRelation relationTSubAreasCourses_TArticles;
        
        private global::System.Data.DataRelation relationTEstablishments_TArticles;
        
        private global::System.Data.DataRelation relationTSubAreasCourses_TCourses;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StudyingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StudyingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TableEstablishmentsOpenDate"] != null)) {
                    base.Tables.Add(new TableEstablishmentsOpenDateDataTable(ds.Tables["TableEstablishmentsOpenDate"]));
                }
                if ((ds.Tables["TYoramSchools"] != null)) {
                    base.Tables.Add(new TYoramSchoolsDataTable(ds.Tables["TYoramSchools"]));
                }
                if ((ds.Tables["TAdministrators"] != null)) {
                    base.Tables.Add(new TAdministratorsDataTable(ds.Tables["TAdministrators"]));
                }
                if ((ds.Tables["TAdvertisingEstablishments"] != null)) {
                    base.Tables.Add(new TAdvertisingEstablishmentsDataTable(ds.Tables["TAdvertisingEstablishments"]));
                }
                if ((ds.Tables["TAreasCourses"] != null)) {
                    base.Tables.Add(new TAreasCoursesDataTable(ds.Tables["TAreasCourses"]));
                }
                if ((ds.Tables["TArticles"] != null)) {
                    base.Tables.Add(new TArticlesDataTable(ds.Tables["TArticles"]));
                }
                if ((ds.Tables["TCategories"] != null)) {
                    base.Tables.Add(new TCategoriesDataTable(ds.Tables["TCategories"]));
                }
                if ((ds.Tables["TCourses"] != null)) {
                    base.Tables.Add(new TCoursesDataTable(ds.Tables["TCourses"]));
                }
                if ((ds.Tables["TEstablishments"] != null)) {
                    base.Tables.Add(new TEstablishmentsDataTable(ds.Tables["TEstablishments"]));
                }
                if ((ds.Tables["TLecturers"] != null)) {
                    base.Tables.Add(new TLecturersDataTable(ds.Tables["TLecturers"]));
                }
                if ((ds.Tables["TMessages"] != null)) {
                    base.Tables.Add(new TMessagesDataTable(ds.Tables["TMessages"]));
                }
                if ((ds.Tables["TMessagesForSchool"] != null)) {
                    base.Tables.Add(new TMessagesForSchoolDataTable(ds.Tables["TMessagesForSchool"]));
                }
                if ((ds.Tables["TPhonesList"] != null)) {
                    base.Tables.Add(new TPhonesListDataTable(ds.Tables["TPhonesList"]));
                }
                if ((ds.Tables["TPhotoGallery"] != null)) {
                    base.Tables.Add(new TPhotoGalleryDataTable(ds.Tables["TPhotoGallery"]));
                }
                if ((ds.Tables["TRegions"] != null)) {
                    base.Tables.Add(new TRegionsDataTable(ds.Tables["TRegions"]));
                }
                if ((ds.Tables["TReviews"] != null)) {
                    base.Tables.Add(new TReviewsDataTable(ds.Tables["TReviews"]));
                }
                if ((ds.Tables["TScholarships"] != null)) {
                    base.Tables.Add(new TScholarshipsDataTable(ds.Tables["TScholarships"]));
                }
                if ((ds.Tables["TSubAreasCourses"] != null)) {
                    base.Tables.Add(new TSubAreasCoursesDataTable(ds.Tables["TSubAreasCourses"]));
                }
                if ((ds.Tables["TTypeCourses"] != null)) {
                    base.Tables.Add(new TTypeCoursesDataTable(ds.Tables["TTypeCourses"]));
                }
                if ((ds.Tables["TVisitorsMails"] != null)) {
                    base.Tables.Add(new TVisitorsMailsDataTable(ds.Tables["TVisitorsMails"]));
                }
                if ((ds.Tables["TVisitorsMessages"] != null)) {
                    base.Tables.Add(new TVisitorsMessagesDataTable(ds.Tables["TVisitorsMessages"]));
                }
                if ((ds.Tables["TYoramCats"] != null)) {
                    base.Tables.Add(new TYoramCatsDataTable(ds.Tables["TYoramCats"]));
                }
                if ((ds.Tables["TLecturesAndCourses"] != null)) {
                    base.Tables.Add(new TLecturesAndCoursesDataTable(ds.Tables["TLecturesAndCourses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TableEstablishmentsOpenDateDataTable TableEstablishmentsOpenDate {
            get {
                return this.tableTableEstablishmentsOpenDate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TYoramSchoolsDataTable TYoramSchools {
            get {
                return this.tableTYoramSchools;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TAdministratorsDataTable TAdministrators {
            get {
                return this.tableTAdministrators;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TAdvertisingEstablishmentsDataTable TAdvertisingEstablishments {
            get {
                return this.tableTAdvertisingEstablishments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TAreasCoursesDataTable TAreasCourses {
            get {
                return this.tableTAreasCourses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TArticlesDataTable TArticles {
            get {
                return this.tableTArticles;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCategoriesDataTable TCategories {
            get {
                return this.tableTCategories;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TCoursesDataTable TCourses {
            get {
                return this.tableTCourses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TEstablishmentsDataTable TEstablishments {
            get {
                return this.tableTEstablishments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TLecturersDataTable TLecturers {
            get {
                return this.tableTLecturers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TMessagesDataTable TMessages {
            get {
                return this.tableTMessages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TMessagesForSchoolDataTable TMessagesForSchool {
            get {
                return this.tableTMessagesForSchool;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TPhonesListDataTable TPhonesList {
            get {
                return this.tableTPhonesList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TPhotoGalleryDataTable TPhotoGallery {
            get {
                return this.tableTPhotoGallery;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TRegionsDataTable TRegions {
            get {
                return this.tableTRegions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TReviewsDataTable TReviews {
            get {
                return this.tableTReviews;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TScholarshipsDataTable TScholarships {
            get {
                return this.tableTScholarships;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TSubAreasCoursesDataTable TSubAreasCourses {
            get {
                return this.tableTSubAreasCourses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TTypeCoursesDataTable TTypeCourses {
            get {
                return this.tableTTypeCourses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TVisitorsMailsDataTable TVisitorsMails {
            get {
                return this.tableTVisitorsMails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TVisitorsMessagesDataTable TVisitorsMessages {
            get {
                return this.tableTVisitorsMessages;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TYoramCatsDataTable TYoramCats {
            get {
                return this.tableTYoramCats;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TLecturesAndCoursesDataTable TLecturesAndCourses {
            get {
                return this.tableTLecturesAndCourses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StudyingDataSet cln = ((StudyingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TableEstablishmentsOpenDate"] != null)) {
                    base.Tables.Add(new TableEstablishmentsOpenDateDataTable(ds.Tables["TableEstablishmentsOpenDate"]));
                }
                if ((ds.Tables["TYoramSchools"] != null)) {
                    base.Tables.Add(new TYoramSchoolsDataTable(ds.Tables["TYoramSchools"]));
                }
                if ((ds.Tables["TAdministrators"] != null)) {
                    base.Tables.Add(new TAdministratorsDataTable(ds.Tables["TAdministrators"]));
                }
                if ((ds.Tables["TAdvertisingEstablishments"] != null)) {
                    base.Tables.Add(new TAdvertisingEstablishmentsDataTable(ds.Tables["TAdvertisingEstablishments"]));
                }
                if ((ds.Tables["TAreasCourses"] != null)) {
                    base.Tables.Add(new TAreasCoursesDataTable(ds.Tables["TAreasCourses"]));
                }
                if ((ds.Tables["TArticles"] != null)) {
                    base.Tables.Add(new TArticlesDataTable(ds.Tables["TArticles"]));
                }
                if ((ds.Tables["TCategories"] != null)) {
                    base.Tables.Add(new TCategoriesDataTable(ds.Tables["TCategories"]));
                }
                if ((ds.Tables["TCourses"] != null)) {
                    base.Tables.Add(new TCoursesDataTable(ds.Tables["TCourses"]));
                }
                if ((ds.Tables["TEstablishments"] != null)) {
                    base.Tables.Add(new TEstablishmentsDataTable(ds.Tables["TEstablishments"]));
                }
                if ((ds.Tables["TLecturers"] != null)) {
                    base.Tables.Add(new TLecturersDataTable(ds.Tables["TLecturers"]));
                }
                if ((ds.Tables["TMessages"] != null)) {
                    base.Tables.Add(new TMessagesDataTable(ds.Tables["TMessages"]));
                }
                if ((ds.Tables["TMessagesForSchool"] != null)) {
                    base.Tables.Add(new TMessagesForSchoolDataTable(ds.Tables["TMessagesForSchool"]));
                }
                if ((ds.Tables["TPhonesList"] != null)) {
                    base.Tables.Add(new TPhonesListDataTable(ds.Tables["TPhonesList"]));
                }
                if ((ds.Tables["TPhotoGallery"] != null)) {
                    base.Tables.Add(new TPhotoGalleryDataTable(ds.Tables["TPhotoGallery"]));
                }
                if ((ds.Tables["TRegions"] != null)) {
                    base.Tables.Add(new TRegionsDataTable(ds.Tables["TRegions"]));
                }
                if ((ds.Tables["TReviews"] != null)) {
                    base.Tables.Add(new TReviewsDataTable(ds.Tables["TReviews"]));
                }
                if ((ds.Tables["TScholarships"] != null)) {
                    base.Tables.Add(new TScholarshipsDataTable(ds.Tables["TScholarships"]));
                }
                if ((ds.Tables["TSubAreasCourses"] != null)) {
                    base.Tables.Add(new TSubAreasCoursesDataTable(ds.Tables["TSubAreasCourses"]));
                }
                if ((ds.Tables["TTypeCourses"] != null)) {
                    base.Tables.Add(new TTypeCoursesDataTable(ds.Tables["TTypeCourses"]));
                }
                if ((ds.Tables["TVisitorsMails"] != null)) {
                    base.Tables.Add(new TVisitorsMailsDataTable(ds.Tables["TVisitorsMails"]));
                }
                if ((ds.Tables["TVisitorsMessages"] != null)) {
                    base.Tables.Add(new TVisitorsMessagesDataTable(ds.Tables["TVisitorsMessages"]));
                }
                if ((ds.Tables["TYoramCats"] != null)) {
                    base.Tables.Add(new TYoramCatsDataTable(ds.Tables["TYoramCats"]));
                }
                if ((ds.Tables["TLecturesAndCourses"] != null)) {
                    base.Tables.Add(new TLecturesAndCoursesDataTable(ds.Tables["TLecturesAndCourses"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTableEstablishmentsOpenDate = ((TableEstablishmentsOpenDateDataTable)(base.Tables["TableEstablishmentsOpenDate"]));
            if ((initTable == true)) {
                if ((this.tableTableEstablishmentsOpenDate != null)) {
                    this.tableTableEstablishmentsOpenDate.InitVars();
                }
            }
            this.tableTYoramSchools = ((TYoramSchoolsDataTable)(base.Tables["TYoramSchools"]));
            if ((initTable == true)) {
                if ((this.tableTYoramSchools != null)) {
                    this.tableTYoramSchools.InitVars();
                }
            }
            this.tableTAdministrators = ((TAdministratorsDataTable)(base.Tables["TAdministrators"]));
            if ((initTable == true)) {
                if ((this.tableTAdministrators != null)) {
                    this.tableTAdministrators.InitVars();
                }
            }
            this.tableTAdvertisingEstablishments = ((TAdvertisingEstablishmentsDataTable)(base.Tables["TAdvertisingEstablishments"]));
            if ((initTable == true)) {
                if ((this.tableTAdvertisingEstablishments != null)) {
                    this.tableTAdvertisingEstablishments.InitVars();
                }
            }
            this.tableTAreasCourses = ((TAreasCoursesDataTable)(base.Tables["TAreasCourses"]));
            if ((initTable == true)) {
                if ((this.tableTAreasCourses != null)) {
                    this.tableTAreasCourses.InitVars();
                }
            }
            this.tableTArticles = ((TArticlesDataTable)(base.Tables["TArticles"]));
            if ((initTable == true)) {
                if ((this.tableTArticles != null)) {
                    this.tableTArticles.InitVars();
                }
            }
            this.tableTCategories = ((TCategoriesDataTable)(base.Tables["TCategories"]));
            if ((initTable == true)) {
                if ((this.tableTCategories != null)) {
                    this.tableTCategories.InitVars();
                }
            }
            this.tableTCourses = ((TCoursesDataTable)(base.Tables["TCourses"]));
            if ((initTable == true)) {
                if ((this.tableTCourses != null)) {
                    this.tableTCourses.InitVars();
                }
            }
            this.tableTEstablishments = ((TEstablishmentsDataTable)(base.Tables["TEstablishments"]));
            if ((initTable == true)) {
                if ((this.tableTEstablishments != null)) {
                    this.tableTEstablishments.InitVars();
                }
            }
            this.tableTLecturers = ((TLecturersDataTable)(base.Tables["TLecturers"]));
            if ((initTable == true)) {
                if ((this.tableTLecturers != null)) {
                    this.tableTLecturers.InitVars();
                }
            }
            this.tableTMessages = ((TMessagesDataTable)(base.Tables["TMessages"]));
            if ((initTable == true)) {
                if ((this.tableTMessages != null)) {
                    this.tableTMessages.InitVars();
                }
            }
            this.tableTMessagesForSchool = ((TMessagesForSchoolDataTable)(base.Tables["TMessagesForSchool"]));
            if ((initTable == true)) {
                if ((this.tableTMessagesForSchool != null)) {
                    this.tableTMessagesForSchool.InitVars();
                }
            }
            this.tableTPhonesList = ((TPhonesListDataTable)(base.Tables["TPhonesList"]));
            if ((initTable == true)) {
                if ((this.tableTPhonesList != null)) {
                    this.tableTPhonesList.InitVars();
                }
            }
            this.tableTPhotoGallery = ((TPhotoGalleryDataTable)(base.Tables["TPhotoGallery"]));
            if ((initTable == true)) {
                if ((this.tableTPhotoGallery != null)) {
                    this.tableTPhotoGallery.InitVars();
                }
            }
            this.tableTRegions = ((TRegionsDataTable)(base.Tables["TRegions"]));
            if ((initTable == true)) {
                if ((this.tableTRegions != null)) {
                    this.tableTRegions.InitVars();
                }
            }
            this.tableTReviews = ((TReviewsDataTable)(base.Tables["TReviews"]));
            if ((initTable == true)) {
                if ((this.tableTReviews != null)) {
                    this.tableTReviews.InitVars();
                }
            }
            this.tableTScholarships = ((TScholarshipsDataTable)(base.Tables["TScholarships"]));
            if ((initTable == true)) {
                if ((this.tableTScholarships != null)) {
                    this.tableTScholarships.InitVars();
                }
            }
            this.tableTSubAreasCourses = ((TSubAreasCoursesDataTable)(base.Tables["TSubAreasCourses"]));
            if ((initTable == true)) {
                if ((this.tableTSubAreasCourses != null)) {
                    this.tableTSubAreasCourses.InitVars();
                }
            }
            this.tableTTypeCourses = ((TTypeCoursesDataTable)(base.Tables["TTypeCourses"]));
            if ((initTable == true)) {
                if ((this.tableTTypeCourses != null)) {
                    this.tableTTypeCourses.InitVars();
                }
            }
            this.tableTVisitorsMails = ((TVisitorsMailsDataTable)(base.Tables["TVisitorsMails"]));
            if ((initTable == true)) {
                if ((this.tableTVisitorsMails != null)) {
                    this.tableTVisitorsMails.InitVars();
                }
            }
            this.tableTVisitorsMessages = ((TVisitorsMessagesDataTable)(base.Tables["TVisitorsMessages"]));
            if ((initTable == true)) {
                if ((this.tableTVisitorsMessages != null)) {
                    this.tableTVisitorsMessages.InitVars();
                }
            }
            this.tableTYoramCats = ((TYoramCatsDataTable)(base.Tables["TYoramCats"]));
            if ((initTable == true)) {
                if ((this.tableTYoramCats != null)) {
                    this.tableTYoramCats.InitVars();
                }
            }
            this.tableTLecturesAndCourses = ((TLecturesAndCoursesDataTable)(base.Tables["TLecturesAndCourses"]));
            if ((initTable == true)) {
                if ((this.tableTLecturesAndCourses != null)) {
                    this.tableTLecturesAndCourses.InitVars();
                }
            }
            this.relationFK_TableEstablishmentsOpenDate_TEstablishments = this.Relations["FK_TableEstablishmentsOpenDate_TEstablishments"];
            this.relationFK_TAdvertisingEstablishments_TEstablishments = this.Relations["FK_TAdvertisingEstablishments_TEstablishments"];
            this.relationFK_TAreasCourses_TCategories = this.Relations["FK_TAreasCourses_TCategories"];
            this.relationFK_TCourses_TCategories = this.Relations["FK_TCourses_TCategories"];
            this.relationFK_TCourses_TDomainsCourses = this.Relations["FK_TCourses_TDomainsCourses"];
            this.relationFK_TCourses_TEstablishments = this.Relations["FK_TCourses_TEstablishments"];
            this.relationFK_TEstablishments_TRegions = this.Relations["FK_TEstablishments_TRegions"];
            this.relationFK_TLecturers_TEstablishments = this.Relations["FK_TLecturers_TEstablishments"];
            this.relationFK_TMessages_TCourses = this.Relations["FK_TMessages_TCourses"];
            this.relationFK_TMessages_TEstablishments = this.Relations["FK_TMessages_TEstablishments"];
            this.relationFK_TMessagesForSchool_TEstablishments = this.Relations["FK_TMessagesForSchool_TEstablishments"];
            this.relationFK_TPhonesList_TEstablishments = this.Relations["FK_TPhonesList_TEstablishments"];
            this.relationFK_TPhotoGallery_TEstablishments = this.Relations["FK_TPhotoGallery_TEstablishments"];
            this.relationFK_TScholarships_TEstablishments = this.Relations["FK_TScholarships_TEstablishments"];
            this.relationFK_TSubAreasCourses_TAreasCourses = this.Relations["FK_TSubAreasCourses_TAreasCourses"];
            this.relationFK_TLecturesAndCourses_TCourses = this.Relations["FK_TLecturesAndCourses_TCourses"];
            this.relationFK_TLecturesAndCourses_TLecturers = this.Relations["FK_TLecturesAndCourses_TLecturers"];
            this.relationTCategories_TArticles = this.Relations["TCategories_TArticles"];
            this.relationTAreasCourses_TArticles = this.Relations["TAreasCourses_TArticles"];
            this.relationTSubAreasCourses_TArticles = this.Relations["TSubAreasCourses_TArticles"];
            this.relationTEstablishments_TArticles = this.Relations["TEstablishments_TArticles"];
            this.relationTSubAreasCourses_TCourses = this.Relations["TSubAreasCourses_TCourses"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StudyingDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTableEstablishmentsOpenDate = new TableEstablishmentsOpenDateDataTable();
            base.Tables.Add(this.tableTableEstablishmentsOpenDate);
            this.tableTYoramSchools = new TYoramSchoolsDataTable();
            base.Tables.Add(this.tableTYoramSchools);
            this.tableTAdministrators = new TAdministratorsDataTable();
            base.Tables.Add(this.tableTAdministrators);
            this.tableTAdvertisingEstablishments = new TAdvertisingEstablishmentsDataTable();
            base.Tables.Add(this.tableTAdvertisingEstablishments);
            this.tableTAreasCourses = new TAreasCoursesDataTable();
            base.Tables.Add(this.tableTAreasCourses);
            this.tableTArticles = new TArticlesDataTable();
            base.Tables.Add(this.tableTArticles);
            this.tableTCategories = new TCategoriesDataTable();
            base.Tables.Add(this.tableTCategories);
            this.tableTCourses = new TCoursesDataTable();
            base.Tables.Add(this.tableTCourses);
            this.tableTEstablishments = new TEstablishmentsDataTable();
            base.Tables.Add(this.tableTEstablishments);
            this.tableTLecturers = new TLecturersDataTable();
            base.Tables.Add(this.tableTLecturers);
            this.tableTMessages = new TMessagesDataTable();
            base.Tables.Add(this.tableTMessages);
            this.tableTMessagesForSchool = new TMessagesForSchoolDataTable();
            base.Tables.Add(this.tableTMessagesForSchool);
            this.tableTPhonesList = new TPhonesListDataTable();
            base.Tables.Add(this.tableTPhonesList);
            this.tableTPhotoGallery = new TPhotoGalleryDataTable();
            base.Tables.Add(this.tableTPhotoGallery);
            this.tableTRegions = new TRegionsDataTable();
            base.Tables.Add(this.tableTRegions);
            this.tableTReviews = new TReviewsDataTable();
            base.Tables.Add(this.tableTReviews);
            this.tableTScholarships = new TScholarshipsDataTable();
            base.Tables.Add(this.tableTScholarships);
            this.tableTSubAreasCourses = new TSubAreasCoursesDataTable();
            base.Tables.Add(this.tableTSubAreasCourses);
            this.tableTTypeCourses = new TTypeCoursesDataTable();
            base.Tables.Add(this.tableTTypeCourses);
            this.tableTVisitorsMails = new TVisitorsMailsDataTable();
            base.Tables.Add(this.tableTVisitorsMails);
            this.tableTVisitorsMessages = new TVisitorsMessagesDataTable();
            base.Tables.Add(this.tableTVisitorsMessages);
            this.tableTYoramCats = new TYoramCatsDataTable();
            base.Tables.Add(this.tableTYoramCats);
            this.tableTLecturesAndCourses = new TLecturesAndCoursesDataTable();
            base.Tables.Add(this.tableTLecturesAndCourses);
            this.relationFK_TableEstablishmentsOpenDate_TEstablishments = new global::System.Data.DataRelation("FK_TableEstablishmentsOpenDate_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTableEstablishmentsOpenDate.SchoolIdColumn}, false);
            this.Relations.Add(this.relationFK_TableEstablishmentsOpenDate_TEstablishments);
            this.relationFK_TAdvertisingEstablishments_TEstablishments = new global::System.Data.DataRelation("FK_TAdvertisingEstablishments_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTAdvertisingEstablishments.EstablishmentIdColumn}, false);
            this.Relations.Add(this.relationFK_TAdvertisingEstablishments_TEstablishments);
            this.relationFK_TAreasCourses_TCategories = new global::System.Data.DataRelation("FK_TAreasCourses_TCategories", new global::System.Data.DataColumn[] {
                        this.tableTCategories.CategoryIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTAreasCourses.CategoryIdColumn}, false);
            this.Relations.Add(this.relationFK_TAreasCourses_TCategories);
            this.relationFK_TCourses_TCategories = new global::System.Data.DataRelation("FK_TCourses_TCategories", new global::System.Data.DataColumn[] {
                        this.tableTCategories.CategoryIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTCourses.CategoryCourseColumn}, false);
            this.Relations.Add(this.relationFK_TCourses_TCategories);
            this.relationFK_TCourses_TDomainsCourses = new global::System.Data.DataRelation("FK_TCourses_TDomainsCourses", new global::System.Data.DataColumn[] {
                        this.tableTAreasCourses.DomainIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTCourses.AreaCourseColumn}, false);
            this.Relations.Add(this.relationFK_TCourses_TDomainsCourses);
            this.relationFK_TCourses_TEstablishments = new global::System.Data.DataRelation("FK_TCourses_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTCourses.SchoolIdCourseColumn}, false);
            this.Relations.Add(this.relationFK_TCourses_TEstablishments);
            this.relationFK_TEstablishments_TRegions = new global::System.Data.DataRelation("FK_TEstablishments_TRegions", new global::System.Data.DataColumn[] {
                        this.tableTRegions.RegionIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.RegionIdColumn}, false);
            this.Relations.Add(this.relationFK_TEstablishments_TRegions);
            this.relationFK_TLecturers_TEstablishments = new global::System.Data.DataRelation("FK_TLecturers_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTLecturers.LecturerEstablishmentIdColumn}, false);
            this.Relations.Add(this.relationFK_TLecturers_TEstablishments);
            this.relationFK_TMessages_TCourses = new global::System.Data.DataRelation("FK_TMessages_TCourses", new global::System.Data.DataColumn[] {
                        this.tableTCourses.CourseIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTMessages.CourseIdColumn}, false);
            this.Relations.Add(this.relationFK_TMessages_TCourses);
            this.relationFK_TMessages_TEstablishments = new global::System.Data.DataRelation("FK_TMessages_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTMessages.SchoolIdColumn}, false);
            this.Relations.Add(this.relationFK_TMessages_TEstablishments);
            this.relationFK_TMessagesForSchool_TEstablishments = new global::System.Data.DataRelation("FK_TMessagesForSchool_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTMessagesForSchool.SchoolIdColumn}, false);
            this.Relations.Add(this.relationFK_TMessagesForSchool_TEstablishments);
            this.relationFK_TPhonesList_TEstablishments = new global::System.Data.DataRelation("FK_TPhonesList_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTPhonesList.SchoolIdColumn}, false);
            this.Relations.Add(this.relationFK_TPhonesList_TEstablishments);
            this.relationFK_TPhotoGallery_TEstablishments = new global::System.Data.DataRelation("FK_TPhotoGallery_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTPhotoGallery.GallerySchoolIdColumn}, false);
            this.Relations.Add(this.relationFK_TPhotoGallery_TEstablishments);
            this.relationFK_TScholarships_TEstablishments = new global::System.Data.DataRelation("FK_TScholarships_TEstablishments", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTScholarships.SchoolIdColumn}, false);
            this.Relations.Add(this.relationFK_TScholarships_TEstablishments);
            this.relationFK_TSubAreasCourses_TAreasCourses = new global::System.Data.DataRelation("FK_TSubAreasCourses_TAreasCourses", new global::System.Data.DataColumn[] {
                        this.tableTAreasCourses.DomainIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTSubAreasCourses.AreaCoursesIdColumn}, false);
            this.Relations.Add(this.relationFK_TSubAreasCourses_TAreasCourses);
            this.relationFK_TLecturesAndCourses_TCourses = new global::System.Data.DataRelation("FK_TLecturesAndCourses_TCourses", new global::System.Data.DataColumn[] {
                        this.tableTCourses.CourseIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTLecturesAndCourses.CourseIdColumn}, false);
            this.Relations.Add(this.relationFK_TLecturesAndCourses_TCourses);
            this.relationFK_TLecturesAndCourses_TLecturers = new global::System.Data.DataRelation("FK_TLecturesAndCourses_TLecturers", new global::System.Data.DataColumn[] {
                        this.tableTLecturers.LecturerIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTLecturesAndCourses.LecturerIdColumn}, false);
            this.Relations.Add(this.relationFK_TLecturesAndCourses_TLecturers);
            this.relationTCategories_TArticles = new global::System.Data.DataRelation("TCategories_TArticles", new global::System.Data.DataColumn[] {
                        this.tableTCategories.CategoryIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTArticles.CategoryIdColumn}, false);
            this.Relations.Add(this.relationTCategories_TArticles);
            this.relationTAreasCourses_TArticles = new global::System.Data.DataRelation("TAreasCourses_TArticles", new global::System.Data.DataColumn[] {
                        this.tableTAreasCourses.DomainIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTArticles.AreaIdColumn}, false);
            this.Relations.Add(this.relationTAreasCourses_TArticles);
            this.relationTSubAreasCourses_TArticles = new global::System.Data.DataRelation("TSubAreasCourses_TArticles", new global::System.Data.DataColumn[] {
                        this.tableTSubAreasCourses.SubAreaCoursesIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTArticles.SubAreaIdColumn}, false);
            this.Relations.Add(this.relationTSubAreasCourses_TArticles);
            this.relationTEstablishments_TArticles = new global::System.Data.DataRelation("TEstablishments_TArticles", new global::System.Data.DataColumn[] {
                        this.tableTEstablishments.SchoolIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTArticles.EstablishmentIdColumn}, false);
            this.Relations.Add(this.relationTEstablishments_TArticles);
            this.relationTSubAreasCourses_TCourses = new global::System.Data.DataRelation("TSubAreasCourses_TCourses", new global::System.Data.DataColumn[] {
                        this.tableTSubAreasCourses.SubAreaCoursesIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTCourses.SubAreaCourseColumn}, false);
            this.Relations.Add(this.relationTSubAreasCourses_TCourses);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTableEstablishmentsOpenDate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTYoramSchools() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTAdministrators() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTAdvertisingEstablishments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTAreasCourses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTArticles() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCategories() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTCourses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTEstablishments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTLecturers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTMessages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTMessagesForSchool() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTPhonesList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTPhotoGallery() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTRegions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTReviews() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTScholarships() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTSubAreasCourses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTTypeCourses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTVisitorsMails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTVisitorsMessages() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTYoramCats() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTLecturesAndCourses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StudyingDataSet ds = new StudyingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TableEstablishmentsOpenDateRowChangeEventHandler(object sender, TableEstablishmentsOpenDateRowChangeEvent e);
        
        public delegate void TYoramSchoolsRowChangeEventHandler(object sender, TYoramSchoolsRowChangeEvent e);
        
        public delegate void TAdministratorsRowChangeEventHandler(object sender, TAdministratorsRowChangeEvent e);
        
        public delegate void TAdvertisingEstablishmentsRowChangeEventHandler(object sender, TAdvertisingEstablishmentsRowChangeEvent e);
        
        public delegate void TAreasCoursesRowChangeEventHandler(object sender, TAreasCoursesRowChangeEvent e);
        
        public delegate void TArticlesRowChangeEventHandler(object sender, TArticlesRowChangeEvent e);
        
        public delegate void TCategoriesRowChangeEventHandler(object sender, TCategoriesRowChangeEvent e);
        
        public delegate void TCoursesRowChangeEventHandler(object sender, TCoursesRowChangeEvent e);
        
        public delegate void TEstablishmentsRowChangeEventHandler(object sender, TEstablishmentsRowChangeEvent e);
        
        public delegate void TLecturersRowChangeEventHandler(object sender, TLecturersRowChangeEvent e);
        
        public delegate void TMessagesRowChangeEventHandler(object sender, TMessagesRowChangeEvent e);
        
        public delegate void TMessagesForSchoolRowChangeEventHandler(object sender, TMessagesForSchoolRowChangeEvent e);
        
        public delegate void TPhonesListRowChangeEventHandler(object sender, TPhonesListRowChangeEvent e);
        
        public delegate void TPhotoGalleryRowChangeEventHandler(object sender, TPhotoGalleryRowChangeEvent e);
        
        public delegate void TRegionsRowChangeEventHandler(object sender, TRegionsRowChangeEvent e);
        
        public delegate void TReviewsRowChangeEventHandler(object sender, TReviewsRowChangeEvent e);
        
        public delegate void TScholarshipsRowChangeEventHandler(object sender, TScholarshipsRowChangeEvent e);
        
        public delegate void TSubAreasCoursesRowChangeEventHandler(object sender, TSubAreasCoursesRowChangeEvent e);
        
        public delegate void TTypeCoursesRowChangeEventHandler(object sender, TTypeCoursesRowChangeEvent e);
        
        public delegate void TVisitorsMailsRowChangeEventHandler(object sender, TVisitorsMailsRowChangeEvent e);
        
        public delegate void TVisitorsMessagesRowChangeEventHandler(object sender, TVisitorsMessagesRowChangeEvent e);
        
        public delegate void TYoramCatsRowChangeEventHandler(object sender, TYoramCatsRowChangeEvent e);
        
        public delegate void TLecturesAndCoursesRowChangeEventHandler(object sender, TLecturesAndCoursesRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TableEstablishmentsOpenDateDataTable : global::System.Data.TypedTableBase<TableEstablishmentsOpenDateRow> {
            
            private global::System.Data.DataColumn columnOpenDateId;
            
            private global::System.Data.DataColumn columnOpenDateValue;
            
            private global::System.Data.DataColumn columnSchoolId;
            
            private global::System.Data.DataColumn columnComment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateDataTable() {
                this.TableName = "TableEstablishmentsOpenDate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableEstablishmentsOpenDateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TableEstablishmentsOpenDateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenDateIdColumn {
                get {
                    return this.columnOpenDateId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpenDateValueColumn {
                get {
                    return this.columnOpenDateValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdColumn {
                get {
                    return this.columnSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRow this[int index] {
                get {
                    return ((TableEstablishmentsOpenDateRow)(this.Rows[index]));
                }
            }
            
            public event TableEstablishmentsOpenDateRowChangeEventHandler TableEstablishmentsOpenDateRowChanging;
            
            public event TableEstablishmentsOpenDateRowChangeEventHandler TableEstablishmentsOpenDateRowChanged;
            
            public event TableEstablishmentsOpenDateRowChangeEventHandler TableEstablishmentsOpenDateRowDeleting;
            
            public event TableEstablishmentsOpenDateRowChangeEventHandler TableEstablishmentsOpenDateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTableEstablishmentsOpenDateRow(TableEstablishmentsOpenDateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRow AddTableEstablishmentsOpenDateRow(System.DateTime OpenDateValue, TEstablishmentsRow parentTEstablishmentsRowByFK_TableEstablishmentsOpenDate_TEstablishments, string Comment) {
                TableEstablishmentsOpenDateRow rowTableEstablishmentsOpenDateRow = ((TableEstablishmentsOpenDateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OpenDateValue,
                        null,
                        Comment};
                if ((parentTEstablishmentsRowByFK_TableEstablishmentsOpenDate_TEstablishments != null)) {
                    columnValuesArray[2] = parentTEstablishmentsRowByFK_TableEstablishmentsOpenDate_TEstablishments[0];
                }
                rowTableEstablishmentsOpenDateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTableEstablishmentsOpenDateRow);
                return rowTableEstablishmentsOpenDateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRow FindByOpenDateId(long OpenDateId) {
                return ((TableEstablishmentsOpenDateRow)(this.Rows.Find(new object[] {
                            OpenDateId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TableEstablishmentsOpenDateDataTable cln = ((TableEstablishmentsOpenDateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TableEstablishmentsOpenDateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOpenDateId = base.Columns["OpenDateId"];
                this.columnOpenDateValue = base.Columns["OpenDateValue"];
                this.columnSchoolId = base.Columns["SchoolId"];
                this.columnComment = base.Columns["Comment"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOpenDateId = new global::System.Data.DataColumn("OpenDateId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenDateId);
                this.columnOpenDateValue = new global::System.Data.DataColumn("OpenDateValue", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpenDateValue);
                this.columnSchoolId = new global::System.Data.DataColumn("SchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolId);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOpenDateId}, true));
                this.columnOpenDateId.AutoIncrement = true;
                this.columnOpenDateId.AutoIncrementSeed = -1;
                this.columnOpenDateId.AutoIncrementStep = -1;
                this.columnOpenDateId.AllowDBNull = false;
                this.columnOpenDateId.ReadOnly = true;
                this.columnOpenDateId.Unique = true;
                this.columnOpenDateValue.AllowDBNull = false;
                this.columnSchoolId.AllowDBNull = false;
                this.columnComment.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRow NewTableEstablishmentsOpenDateRow() {
                return ((TableEstablishmentsOpenDateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TableEstablishmentsOpenDateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TableEstablishmentsOpenDateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TableEstablishmentsOpenDateRowChanged != null)) {
                    this.TableEstablishmentsOpenDateRowChanged(this, new TableEstablishmentsOpenDateRowChangeEvent(((TableEstablishmentsOpenDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TableEstablishmentsOpenDateRowChanging != null)) {
                    this.TableEstablishmentsOpenDateRowChanging(this, new TableEstablishmentsOpenDateRowChangeEvent(((TableEstablishmentsOpenDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TableEstablishmentsOpenDateRowDeleted != null)) {
                    this.TableEstablishmentsOpenDateRowDeleted(this, new TableEstablishmentsOpenDateRowChangeEvent(((TableEstablishmentsOpenDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TableEstablishmentsOpenDateRowDeleting != null)) {
                    this.TableEstablishmentsOpenDateRowDeleting(this, new TableEstablishmentsOpenDateRowChangeEvent(((TableEstablishmentsOpenDateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTableEstablishmentsOpenDateRow(TableEstablishmentsOpenDateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TableEstablishmentsOpenDateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TYoramSchoolsDataTable : global::System.Data.TypedTableBase<TYoramSchoolsRow> {
            
            private global::System.Data.DataColumn columntheStudentSchoolId;
            
            private global::System.Data.DataColumn columnyoramSchoolId;
            
            private global::System.Data.DataColumn columnyoramSchoolName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsDataTable() {
                this.TableName = "TYoramSchools";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TYoramSchoolsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TYoramSchoolsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn theStudentSchoolIdColumn {
                get {
                    return this.columntheStudentSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yoramSchoolIdColumn {
                get {
                    return this.columnyoramSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yoramSchoolNameColumn {
                get {
                    return this.columnyoramSchoolName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsRow this[int index] {
                get {
                    return ((TYoramSchoolsRow)(this.Rows[index]));
                }
            }
            
            public event TYoramSchoolsRowChangeEventHandler TYoramSchoolsRowChanging;
            
            public event TYoramSchoolsRowChangeEventHandler TYoramSchoolsRowChanged;
            
            public event TYoramSchoolsRowChangeEventHandler TYoramSchoolsRowDeleting;
            
            public event TYoramSchoolsRowChangeEventHandler TYoramSchoolsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTYoramSchoolsRow(TYoramSchoolsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsRow AddTYoramSchoolsRow(int theStudentSchoolId, int yoramSchoolId, string yoramSchoolName) {
                TYoramSchoolsRow rowTYoramSchoolsRow = ((TYoramSchoolsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        theStudentSchoolId,
                        yoramSchoolId,
                        yoramSchoolName};
                rowTYoramSchoolsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTYoramSchoolsRow);
                return rowTYoramSchoolsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsRow FindBytheStudentSchoolIdyoramSchoolId(int theStudentSchoolId, int yoramSchoolId) {
                return ((TYoramSchoolsRow)(this.Rows.Find(new object[] {
                            theStudentSchoolId,
                            yoramSchoolId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TYoramSchoolsDataTable cln = ((TYoramSchoolsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TYoramSchoolsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntheStudentSchoolId = base.Columns["theStudentSchoolId"];
                this.columnyoramSchoolId = base.Columns["yoramSchoolId"];
                this.columnyoramSchoolName = base.Columns["yoramSchoolName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntheStudentSchoolId = new global::System.Data.DataColumn("theStudentSchoolId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntheStudentSchoolId);
                this.columnyoramSchoolId = new global::System.Data.DataColumn("yoramSchoolId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyoramSchoolId);
                this.columnyoramSchoolName = new global::System.Data.DataColumn("yoramSchoolName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyoramSchoolName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntheStudentSchoolId,
                                this.columnyoramSchoolId}, true));
                this.columntheStudentSchoolId.AllowDBNull = false;
                this.columnyoramSchoolId.AllowDBNull = false;
                this.columnyoramSchoolName.AllowDBNull = false;
                this.columnyoramSchoolName.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsRow NewTYoramSchoolsRow() {
                return ((TYoramSchoolsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TYoramSchoolsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TYoramSchoolsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TYoramSchoolsRowChanged != null)) {
                    this.TYoramSchoolsRowChanged(this, new TYoramSchoolsRowChangeEvent(((TYoramSchoolsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TYoramSchoolsRowChanging != null)) {
                    this.TYoramSchoolsRowChanging(this, new TYoramSchoolsRowChangeEvent(((TYoramSchoolsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TYoramSchoolsRowDeleted != null)) {
                    this.TYoramSchoolsRowDeleted(this, new TYoramSchoolsRowChangeEvent(((TYoramSchoolsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TYoramSchoolsRowDeleting != null)) {
                    this.TYoramSchoolsRowDeleting(this, new TYoramSchoolsRowChangeEvent(((TYoramSchoolsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTYoramSchoolsRow(TYoramSchoolsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TYoramSchoolsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TAdministratorsDataTable : global::System.Data.TypedTableBase<TAdministratorsRow> {
            
            private global::System.Data.DataColumn columnAdministratorId;
            
            private global::System.Data.DataColumn columnAdministratorUserName;
            
            private global::System.Data.DataColumn columnAdministratorPassword;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsDataTable() {
                this.TableName = "TAdministrators";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAdministratorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TAdministratorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministratorIdColumn {
                get {
                    return this.columnAdministratorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministratorUserNameColumn {
                get {
                    return this.columnAdministratorUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministratorPasswordColumn {
                get {
                    return this.columnAdministratorPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsRow this[int index] {
                get {
                    return ((TAdministratorsRow)(this.Rows[index]));
                }
            }
            
            public event TAdministratorsRowChangeEventHandler TAdministratorsRowChanging;
            
            public event TAdministratorsRowChangeEventHandler TAdministratorsRowChanged;
            
            public event TAdministratorsRowChangeEventHandler TAdministratorsRowDeleting;
            
            public event TAdministratorsRowChangeEventHandler TAdministratorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTAdministratorsRow(TAdministratorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsRow AddTAdministratorsRow(string AdministratorUserName, string AdministratorPassword) {
                TAdministratorsRow rowTAdministratorsRow = ((TAdministratorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AdministratorUserName,
                        AdministratorPassword};
                rowTAdministratorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTAdministratorsRow);
                return rowTAdministratorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsRow FindByAdministratorId(int AdministratorId) {
                return ((TAdministratorsRow)(this.Rows.Find(new object[] {
                            AdministratorId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TAdministratorsDataTable cln = ((TAdministratorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TAdministratorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdministratorId = base.Columns["AdministratorId"];
                this.columnAdministratorUserName = base.Columns["AdministratorUserName"];
                this.columnAdministratorPassword = base.Columns["AdministratorPassword"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdministratorId = new global::System.Data.DataColumn("AdministratorId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministratorId);
                this.columnAdministratorUserName = new global::System.Data.DataColumn("AdministratorUserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministratorUserName);
                this.columnAdministratorPassword = new global::System.Data.DataColumn("AdministratorPassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministratorPassword);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAdministratorId}, true));
                this.columnAdministratorId.AutoIncrement = true;
                this.columnAdministratorId.AutoIncrementSeed = -1;
                this.columnAdministratorId.AutoIncrementStep = -1;
                this.columnAdministratorId.AllowDBNull = false;
                this.columnAdministratorId.ReadOnly = true;
                this.columnAdministratorId.Unique = true;
                this.columnAdministratorUserName.AllowDBNull = false;
                this.columnAdministratorUserName.MaxLength = 20;
                this.columnAdministratorPassword.AllowDBNull = false;
                this.columnAdministratorPassword.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsRow NewTAdministratorsRow() {
                return ((TAdministratorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TAdministratorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TAdministratorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TAdministratorsRowChanged != null)) {
                    this.TAdministratorsRowChanged(this, new TAdministratorsRowChangeEvent(((TAdministratorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TAdministratorsRowChanging != null)) {
                    this.TAdministratorsRowChanging(this, new TAdministratorsRowChangeEvent(((TAdministratorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TAdministratorsRowDeleted != null)) {
                    this.TAdministratorsRowDeleted(this, new TAdministratorsRowChangeEvent(((TAdministratorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TAdministratorsRowDeleting != null)) {
                    this.TAdministratorsRowDeleting(this, new TAdministratorsRowChangeEvent(((TAdministratorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTAdministratorsRow(TAdministratorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TAdministratorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TAdvertisingEstablishmentsDataTable : global::System.Data.TypedTableBase<TAdvertisingEstablishmentsRow> {
            
            private global::System.Data.DataColumn columnAdvertisingId;
            
            private global::System.Data.DataColumn columnEstablishmentId;
            
            private global::System.Data.DataColumn columnCategoryCourses;
            
            private global::System.Data.DataColumn columnAreaCourses;
            
            private global::System.Data.DataColumn columnSubAreaCourses;
            
            private global::System.Data.DataColumn columnAdvertisingSlogan;
            
            private global::System.Data.DataColumn columnAdvertisingStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsDataTable() {
                this.TableName = "TAdvertisingEstablishments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAdvertisingEstablishmentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TAdvertisingEstablishmentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvertisingIdColumn {
                get {
                    return this.columnAdvertisingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstablishmentIdColumn {
                get {
                    return this.columnEstablishmentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryCoursesColumn {
                get {
                    return this.columnCategoryCourses;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaCoursesColumn {
                get {
                    return this.columnAreaCourses;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaCoursesColumn {
                get {
                    return this.columnSubAreaCourses;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvertisingSloganColumn {
                get {
                    return this.columnAdvertisingSlogan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdvertisingStatusColumn {
                get {
                    return this.columnAdvertisingStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRow this[int index] {
                get {
                    return ((TAdvertisingEstablishmentsRow)(this.Rows[index]));
                }
            }
            
            public event TAdvertisingEstablishmentsRowChangeEventHandler TAdvertisingEstablishmentsRowChanging;
            
            public event TAdvertisingEstablishmentsRowChangeEventHandler TAdvertisingEstablishmentsRowChanged;
            
            public event TAdvertisingEstablishmentsRowChangeEventHandler TAdvertisingEstablishmentsRowDeleting;
            
            public event TAdvertisingEstablishmentsRowChangeEventHandler TAdvertisingEstablishmentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTAdvertisingEstablishmentsRow(TAdvertisingEstablishmentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRow AddTAdvertisingEstablishmentsRow(TEstablishmentsRow parentTEstablishmentsRowByFK_TAdvertisingEstablishments_TEstablishments, long CategoryCourses, long AreaCourses, long SubAreaCourses, string AdvertisingSlogan, bool AdvertisingStatus) {
                TAdvertisingEstablishmentsRow rowTAdvertisingEstablishmentsRow = ((TAdvertisingEstablishmentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        CategoryCourses,
                        AreaCourses,
                        SubAreaCourses,
                        AdvertisingSlogan,
                        AdvertisingStatus};
                if ((parentTEstablishmentsRowByFK_TAdvertisingEstablishments_TEstablishments != null)) {
                    columnValuesArray[1] = parentTEstablishmentsRowByFK_TAdvertisingEstablishments_TEstablishments[0];
                }
                rowTAdvertisingEstablishmentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTAdvertisingEstablishmentsRow);
                return rowTAdvertisingEstablishmentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRow FindByAdvertisingId(long AdvertisingId) {
                return ((TAdvertisingEstablishmentsRow)(this.Rows.Find(new object[] {
                            AdvertisingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TAdvertisingEstablishmentsDataTable cln = ((TAdvertisingEstablishmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TAdvertisingEstablishmentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAdvertisingId = base.Columns["AdvertisingId"];
                this.columnEstablishmentId = base.Columns["EstablishmentId"];
                this.columnCategoryCourses = base.Columns["CategoryCourses"];
                this.columnAreaCourses = base.Columns["AreaCourses"];
                this.columnSubAreaCourses = base.Columns["SubAreaCourses"];
                this.columnAdvertisingSlogan = base.Columns["AdvertisingSlogan"];
                this.columnAdvertisingStatus = base.Columns["AdvertisingStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAdvertisingId = new global::System.Data.DataColumn("AdvertisingId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvertisingId);
                this.columnEstablishmentId = new global::System.Data.DataColumn("EstablishmentId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstablishmentId);
                this.columnCategoryCourses = new global::System.Data.DataColumn("CategoryCourses", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryCourses);
                this.columnAreaCourses = new global::System.Data.DataColumn("AreaCourses", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaCourses);
                this.columnSubAreaCourses = new global::System.Data.DataColumn("SubAreaCourses", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubAreaCourses);
                this.columnAdvertisingSlogan = new global::System.Data.DataColumn("AdvertisingSlogan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvertisingSlogan);
                this.columnAdvertisingStatus = new global::System.Data.DataColumn("AdvertisingStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdvertisingStatus);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAdvertisingId}, true));
                this.columnAdvertisingId.AutoIncrement = true;
                this.columnAdvertisingId.AutoIncrementSeed = -1;
                this.columnAdvertisingId.AutoIncrementStep = -1;
                this.columnAdvertisingId.AllowDBNull = false;
                this.columnAdvertisingId.ReadOnly = true;
                this.columnAdvertisingId.Unique = true;
                this.columnEstablishmentId.AllowDBNull = false;
                this.columnAdvertisingSlogan.AllowDBNull = false;
                this.columnAdvertisingSlogan.MaxLength = 200;
                this.columnAdvertisingStatus.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRow NewTAdvertisingEstablishmentsRow() {
                return ((TAdvertisingEstablishmentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TAdvertisingEstablishmentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TAdvertisingEstablishmentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TAdvertisingEstablishmentsRowChanged != null)) {
                    this.TAdvertisingEstablishmentsRowChanged(this, new TAdvertisingEstablishmentsRowChangeEvent(((TAdvertisingEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TAdvertisingEstablishmentsRowChanging != null)) {
                    this.TAdvertisingEstablishmentsRowChanging(this, new TAdvertisingEstablishmentsRowChangeEvent(((TAdvertisingEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TAdvertisingEstablishmentsRowDeleted != null)) {
                    this.TAdvertisingEstablishmentsRowDeleted(this, new TAdvertisingEstablishmentsRowChangeEvent(((TAdvertisingEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TAdvertisingEstablishmentsRowDeleting != null)) {
                    this.TAdvertisingEstablishmentsRowDeleting(this, new TAdvertisingEstablishmentsRowChangeEvent(((TAdvertisingEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTAdvertisingEstablishmentsRow(TAdvertisingEstablishmentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TAdvertisingEstablishmentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TAreasCoursesDataTable : global::System.Data.TypedTableBase<TAreasCoursesRow> {
            
            private global::System.Data.DataColumn columnDomainId;
            
            private global::System.Data.DataColumn columnCategoryId;
            
            private global::System.Data.DataColumn columnDomainName;
            
            private global::System.Data.DataColumn columnCommentDomain;
            
            private global::System.Data.DataColumn columnmetaDesc;
            
            private global::System.Data.DataColumn columnmetaKeywords;
            
            private global::System.Data.DataColumn columnareaTitle;
            
            private global::System.Data.DataColumn columnleadSlogan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesDataTable() {
                this.TableName = "TAreasCourses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAreasCoursesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TAreasCoursesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomainIdColumn {
                get {
                    return this.columnDomainId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomainNameColumn {
                get {
                    return this.columnDomainName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentDomainColumn {
                get {
                    return this.columnCommentDomain;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metaDescColumn {
                get {
                    return this.columnmetaDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metaKeywordsColumn {
                get {
                    return this.columnmetaKeywords;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn areaTitleColumn {
                get {
                    return this.columnareaTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn leadSloganColumn {
                get {
                    return this.columnleadSlogan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow this[int index] {
                get {
                    return ((TAreasCoursesRow)(this.Rows[index]));
                }
            }
            
            public event TAreasCoursesRowChangeEventHandler TAreasCoursesRowChanging;
            
            public event TAreasCoursesRowChangeEventHandler TAreasCoursesRowChanged;
            
            public event TAreasCoursesRowChangeEventHandler TAreasCoursesRowDeleting;
            
            public event TAreasCoursesRowChangeEventHandler TAreasCoursesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTAreasCoursesRow(TAreasCoursesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow AddTAreasCoursesRow(long DomainId, TCategoriesRow parentTCategoriesRowByFK_TAreasCourses_TCategories, string DomainName, string CommentDomain, string metaDesc, string metaKeywords, string areaTitle, string leadSlogan) {
                TAreasCoursesRow rowTAreasCoursesRow = ((TAreasCoursesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DomainId,
                        null,
                        DomainName,
                        CommentDomain,
                        metaDesc,
                        metaKeywords,
                        areaTitle,
                        leadSlogan};
                if ((parentTCategoriesRowByFK_TAreasCourses_TCategories != null)) {
                    columnValuesArray[1] = parentTCategoriesRowByFK_TAreasCourses_TCategories[0];
                }
                rowTAreasCoursesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTAreasCoursesRow);
                return rowTAreasCoursesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow FindByDomainId(long DomainId) {
                return ((TAreasCoursesRow)(this.Rows.Find(new object[] {
                            DomainId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TAreasCoursesDataTable cln = ((TAreasCoursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TAreasCoursesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDomainId = base.Columns["DomainId"];
                this.columnCategoryId = base.Columns["CategoryId"];
                this.columnDomainName = base.Columns["DomainName"];
                this.columnCommentDomain = base.Columns["CommentDomain"];
                this.columnmetaDesc = base.Columns["metaDesc"];
                this.columnmetaKeywords = base.Columns["metaKeywords"];
                this.columnareaTitle = base.Columns["areaTitle"];
                this.columnleadSlogan = base.Columns["leadSlogan"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDomainId = new global::System.Data.DataColumn("DomainId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainId);
                this.columnCategoryId = new global::System.Data.DataColumn("CategoryId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryId);
                this.columnDomainName = new global::System.Data.DataColumn("DomainName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainName);
                this.columnCommentDomain = new global::System.Data.DataColumn("CommentDomain", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommentDomain);
                this.columnmetaDesc = new global::System.Data.DataColumn("metaDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetaDesc);
                this.columnmetaKeywords = new global::System.Data.DataColumn("metaKeywords", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetaKeywords);
                this.columnareaTitle = new global::System.Data.DataColumn("areaTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnareaTitle);
                this.columnleadSlogan = new global::System.Data.DataColumn("leadSlogan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleadSlogan);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDomainId}, true));
                this.columnDomainId.AllowDBNull = false;
                this.columnDomainId.Unique = true;
                this.columnCategoryId.AllowDBNull = false;
                this.columnDomainName.AllowDBNull = false;
                this.columnDomainName.MaxLength = 50;
                this.columnCommentDomain.MaxLength = 2147483647;
                this.columnmetaDesc.AllowDBNull = false;
                this.columnmetaDesc.MaxLength = 1500;
                this.columnmetaKeywords.AllowDBNull = false;
                this.columnmetaKeywords.MaxLength = 1500;
                this.columnareaTitle.AllowDBNull = false;
                this.columnareaTitle.MaxLength = 500;
                this.columnleadSlogan.AllowDBNull = false;
                this.columnleadSlogan.MaxLength = 120;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow NewTAreasCoursesRow() {
                return ((TAreasCoursesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TAreasCoursesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TAreasCoursesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TAreasCoursesRowChanged != null)) {
                    this.TAreasCoursesRowChanged(this, new TAreasCoursesRowChangeEvent(((TAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TAreasCoursesRowChanging != null)) {
                    this.TAreasCoursesRowChanging(this, new TAreasCoursesRowChangeEvent(((TAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TAreasCoursesRowDeleted != null)) {
                    this.TAreasCoursesRowDeleted(this, new TAreasCoursesRowChangeEvent(((TAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TAreasCoursesRowDeleting != null)) {
                    this.TAreasCoursesRowDeleting(this, new TAreasCoursesRowChangeEvent(((TAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTAreasCoursesRow(TAreasCoursesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TAreasCoursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TArticlesDataTable : global::System.Data.TypedTableBase<TArticlesRow> {
            
            private global::System.Data.DataColumn columnArticleId;
            
            private global::System.Data.DataColumn columnArticleAuthorName;
            
            private global::System.Data.DataColumn columnEstablishmentId;
            
            private global::System.Data.DataColumn columnCategoryId;
            
            private global::System.Data.DataColumn columnAreaId;
            
            private global::System.Data.DataColumn columnSubAreaId;
            
            private global::System.Data.DataColumn columnArticleTitle;
            
            private global::System.Data.DataColumn columnArticleText;
            
            private global::System.Data.DataColumn columnArticleAuthorLink;
            
            private global::System.Data.DataColumn columnArticleImageFileName;
            
            private global::System.Data.DataColumn columnArticleDate;
            
            private global::System.Data.DataColumn columnisMainInCat;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesDataTable() {
                this.TableName = "TArticles";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TArticlesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TArticlesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleIdColumn {
                get {
                    return this.columnArticleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleAuthorNameColumn {
                get {
                    return this.columnArticleAuthorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstablishmentIdColumn {
                get {
                    return this.columnEstablishmentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaIdColumn {
                get {
                    return this.columnAreaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaIdColumn {
                get {
                    return this.columnSubAreaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleTitleColumn {
                get {
                    return this.columnArticleTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleTextColumn {
                get {
                    return this.columnArticleText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleAuthorLinkColumn {
                get {
                    return this.columnArticleAuthorLink;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleImageFileNameColumn {
                get {
                    return this.columnArticleImageFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArticleDateColumn {
                get {
                    return this.columnArticleDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isMainInCatColumn {
                get {
                    return this.columnisMainInCat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow this[int index] {
                get {
                    return ((TArticlesRow)(this.Rows[index]));
                }
            }
            
            public event TArticlesRowChangeEventHandler TArticlesRowChanging;
            
            public event TArticlesRowChangeEventHandler TArticlesRowChanged;
            
            public event TArticlesRowChangeEventHandler TArticlesRowDeleting;
            
            public event TArticlesRowChangeEventHandler TArticlesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTArticlesRow(TArticlesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow AddTArticlesRow(string ArticleAuthorName, TEstablishmentsRow parentTEstablishmentsRowByTEstablishments_TArticles, TCategoriesRow parentTCategoriesRowByTCategories_TArticles, TAreasCoursesRow parentTAreasCoursesRowByTAreasCourses_TArticles, TSubAreasCoursesRow parentTSubAreasCoursesRowByTSubAreasCourses_TArticles, string ArticleTitle, string ArticleText, string ArticleAuthorLink, string ArticleImageFileName, System.DateTime ArticleDate, bool isMainInCat) {
                TArticlesRow rowTArticlesRow = ((TArticlesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ArticleAuthorName,
                        null,
                        null,
                        null,
                        null,
                        ArticleTitle,
                        ArticleText,
                        ArticleAuthorLink,
                        ArticleImageFileName,
                        ArticleDate,
                        isMainInCat};
                if ((parentTEstablishmentsRowByTEstablishments_TArticles != null)) {
                    columnValuesArray[2] = parentTEstablishmentsRowByTEstablishments_TArticles[0];
                }
                if ((parentTCategoriesRowByTCategories_TArticles != null)) {
                    columnValuesArray[3] = parentTCategoriesRowByTCategories_TArticles[0];
                }
                if ((parentTAreasCoursesRowByTAreasCourses_TArticles != null)) {
                    columnValuesArray[4] = parentTAreasCoursesRowByTAreasCourses_TArticles[0];
                }
                if ((parentTSubAreasCoursesRowByTSubAreasCourses_TArticles != null)) {
                    columnValuesArray[5] = parentTSubAreasCoursesRowByTSubAreasCourses_TArticles[0];
                }
                rowTArticlesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTArticlesRow);
                return rowTArticlesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow FindByArticleId(long ArticleId) {
                return ((TArticlesRow)(this.Rows.Find(new object[] {
                            ArticleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TArticlesDataTable cln = ((TArticlesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TArticlesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnArticleId = base.Columns["ArticleId"];
                this.columnArticleAuthorName = base.Columns["ArticleAuthorName"];
                this.columnEstablishmentId = base.Columns["EstablishmentId"];
                this.columnCategoryId = base.Columns["CategoryId"];
                this.columnAreaId = base.Columns["AreaId"];
                this.columnSubAreaId = base.Columns["SubAreaId"];
                this.columnArticleTitle = base.Columns["ArticleTitle"];
                this.columnArticleText = base.Columns["ArticleText"];
                this.columnArticleAuthorLink = base.Columns["ArticleAuthorLink"];
                this.columnArticleImageFileName = base.Columns["ArticleImageFileName"];
                this.columnArticleDate = base.Columns["ArticleDate"];
                this.columnisMainInCat = base.Columns["isMainInCat"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnArticleId = new global::System.Data.DataColumn("ArticleId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleId);
                this.columnArticleAuthorName = new global::System.Data.DataColumn("ArticleAuthorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleAuthorName);
                this.columnEstablishmentId = new global::System.Data.DataColumn("EstablishmentId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstablishmentId);
                this.columnCategoryId = new global::System.Data.DataColumn("CategoryId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryId);
                this.columnAreaId = new global::System.Data.DataColumn("AreaId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaId);
                this.columnSubAreaId = new global::System.Data.DataColumn("SubAreaId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubAreaId);
                this.columnArticleTitle = new global::System.Data.DataColumn("ArticleTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleTitle);
                this.columnArticleText = new global::System.Data.DataColumn("ArticleText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleText);
                this.columnArticleAuthorLink = new global::System.Data.DataColumn("ArticleAuthorLink", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleAuthorLink);
                this.columnArticleImageFileName = new global::System.Data.DataColumn("ArticleImageFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleImageFileName);
                this.columnArticleDate = new global::System.Data.DataColumn("ArticleDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArticleDate);
                this.columnisMainInCat = new global::System.Data.DataColumn("isMainInCat", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisMainInCat);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnArticleId}, true));
                this.columnArticleId.AutoIncrement = true;
                this.columnArticleId.AutoIncrementSeed = -1;
                this.columnArticleId.AutoIncrementStep = -1;
                this.columnArticleId.AllowDBNull = false;
                this.columnArticleId.ReadOnly = true;
                this.columnArticleId.Unique = true;
                this.columnArticleAuthorName.AllowDBNull = false;
                this.columnArticleAuthorName.MaxLength = 50;
                this.columnEstablishmentId.AllowDBNull = false;
                this.columnArticleTitle.AllowDBNull = false;
                this.columnArticleTitle.MaxLength = 100;
                this.columnArticleText.AllowDBNull = false;
                this.columnArticleText.MaxLength = 1073741823;
                this.columnArticleAuthorLink.MaxLength = 50;
                this.columnArticleImageFileName.MaxLength = 50;
                this.columnisMainInCat.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow NewTArticlesRow() {
                return ((TArticlesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TArticlesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TArticlesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TArticlesRowChanged != null)) {
                    this.TArticlesRowChanged(this, new TArticlesRowChangeEvent(((TArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TArticlesRowChanging != null)) {
                    this.TArticlesRowChanging(this, new TArticlesRowChangeEvent(((TArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TArticlesRowDeleted != null)) {
                    this.TArticlesRowDeleted(this, new TArticlesRowChangeEvent(((TArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TArticlesRowDeleting != null)) {
                    this.TArticlesRowDeleting(this, new TArticlesRowChangeEvent(((TArticlesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTArticlesRow(TArticlesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TArticlesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCategoriesDataTable : global::System.Data.TypedTableBase<TCategoriesRow> {
            
            private global::System.Data.DataColumn columnCategoryId;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            private global::System.Data.DataColumn columnCategoeyDesc;
            
            private global::System.Data.DataColumn columnCategoryKeywords;
            
            private global::System.Data.DataColumn columnCategoryTitle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesDataTable() {
                this.TableName = "TCategories";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCategoriesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCategoriesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoeyDescColumn {
                get {
                    return this.columnCategoeyDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryKeywordsColumn {
                get {
                    return this.columnCategoryKeywords;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryTitleColumn {
                get {
                    return this.columnCategoryTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow this[int index] {
                get {
                    return ((TCategoriesRow)(this.Rows[index]));
                }
            }
            
            public event TCategoriesRowChangeEventHandler TCategoriesRowChanging;
            
            public event TCategoriesRowChangeEventHandler TCategoriesRowChanged;
            
            public event TCategoriesRowChangeEventHandler TCategoriesRowDeleting;
            
            public event TCategoriesRowChangeEventHandler TCategoriesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCategoriesRow(TCategoriesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow AddTCategoriesRow(long CategoryId, string CategoryName, string CategoeyDesc, string CategoryKeywords, string CategoryTitle) {
                TCategoriesRow rowTCategoriesRow = ((TCategoriesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CategoryId,
                        CategoryName,
                        CategoeyDesc,
                        CategoryKeywords,
                        CategoryTitle};
                rowTCategoriesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCategoriesRow);
                return rowTCategoriesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow FindByCategoryId(long CategoryId) {
                return ((TCategoriesRow)(this.Rows.Find(new object[] {
                            CategoryId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCategoriesDataTable cln = ((TCategoriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCategoriesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCategoryId = base.Columns["CategoryId"];
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnCategoeyDesc = base.Columns["CategoeyDesc"];
                this.columnCategoryKeywords = base.Columns["CategoryKeywords"];
                this.columnCategoryTitle = base.Columns["CategoryTitle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCategoryId = new global::System.Data.DataColumn("CategoryId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryId);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.columnCategoeyDesc = new global::System.Data.DataColumn("CategoeyDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoeyDesc);
                this.columnCategoryKeywords = new global::System.Data.DataColumn("CategoryKeywords", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryKeywords);
                this.columnCategoryTitle = new global::System.Data.DataColumn("CategoryTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryTitle);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCategoryId}, true));
                this.columnCategoryId.AllowDBNull = false;
                this.columnCategoryId.Unique = true;
                this.columnCategoryName.AllowDBNull = false;
                this.columnCategoryName.MaxLength = 50;
                this.columnCategoeyDesc.AllowDBNull = false;
                this.columnCategoeyDesc.MaxLength = 1500;
                this.columnCategoryKeywords.AllowDBNull = false;
                this.columnCategoryKeywords.MaxLength = 1000;
                this.columnCategoryTitle.AllowDBNull = false;
                this.columnCategoryTitle.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow NewTCategoriesRow() {
                return ((TCategoriesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCategoriesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCategoriesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCategoriesRowChanged != null)) {
                    this.TCategoriesRowChanged(this, new TCategoriesRowChangeEvent(((TCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCategoriesRowChanging != null)) {
                    this.TCategoriesRowChanging(this, new TCategoriesRowChangeEvent(((TCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCategoriesRowDeleted != null)) {
                    this.TCategoriesRowDeleted(this, new TCategoriesRowChangeEvent(((TCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCategoriesRowDeleting != null)) {
                    this.TCategoriesRowDeleting(this, new TCategoriesRowChangeEvent(((TCategoriesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCategoriesRow(TCategoriesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCategoriesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TCoursesDataTable : global::System.Data.TypedTableBase<TCoursesRow> {
            
            private global::System.Data.DataColumn columnCourseId;
            
            private global::System.Data.DataColumn columnCategoryCourse;
            
            private global::System.Data.DataColumn columnAreaCourse;
            
            private global::System.Data.DataColumn columnSubAreaCourse;
            
            private global::System.Data.DataColumn columnSchoolIdCourse;
            
            private global::System.Data.DataColumn columnCousePhone;
            
            private global::System.Data.DataColumn columnCourseDuration;
            
            private global::System.Data.DataColumn columnCourseRequirements;
            
            private global::System.Data.DataColumn columnCourseMatriculationMin;
            
            private global::System.Data.DataColumn columnCoursePsychometricMin;
            
            private global::System.Data.DataColumn columnCourseDescription;
            
            private global::System.Data.DataColumn columnCourseName;
            
            private global::System.Data.DataColumn columnDiploma;
            
            private global::System.Data.DataColumn columnisInHomePage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesDataTable() {
                this.TableName = "TCourses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCoursesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TCoursesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIdColumn {
                get {
                    return this.columnCourseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryCourseColumn {
                get {
                    return this.columnCategoryCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaCourseColumn {
                get {
                    return this.columnAreaCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaCourseColumn {
                get {
                    return this.columnSubAreaCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdCourseColumn {
                get {
                    return this.columnSchoolIdCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CousePhoneColumn {
                get {
                    return this.columnCousePhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseDurationColumn {
                get {
                    return this.columnCourseDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseRequirementsColumn {
                get {
                    return this.columnCourseRequirements;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseMatriculationMinColumn {
                get {
                    return this.columnCourseMatriculationMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CoursePsychometricMinColumn {
                get {
                    return this.columnCoursePsychometricMin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseDescriptionColumn {
                get {
                    return this.columnCourseDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseNameColumn {
                get {
                    return this.columnCourseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiplomaColumn {
                get {
                    return this.columnDiploma;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isInHomePageColumn {
                get {
                    return this.columnisInHomePage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow this[int index] {
                get {
                    return ((TCoursesRow)(this.Rows[index]));
                }
            }
            
            public event TCoursesRowChangeEventHandler TCoursesRowChanging;
            
            public event TCoursesRowChangeEventHandler TCoursesRowChanged;
            
            public event TCoursesRowChangeEventHandler TCoursesRowDeleting;
            
            public event TCoursesRowChangeEventHandler TCoursesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTCoursesRow(TCoursesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow AddTCoursesRow(TCategoriesRow parentTCategoriesRowByFK_TCourses_TCategories, TAreasCoursesRow parentTAreasCoursesRowByFK_TCourses_TDomainsCourses, TSubAreasCoursesRow parentTSubAreasCoursesRowByTSubAreasCourses_TCourses, TEstablishmentsRow parentTEstablishmentsRowByFK_TCourses_TEstablishments, string CousePhone, string CourseDuration, string CourseRequirements, float CourseMatriculationMin, float CoursePsychometricMin, string CourseDescription, string CourseName, string Diploma, bool isInHomePage) {
                TCoursesRow rowTCoursesRow = ((TCoursesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        null,
                        null,
                        CousePhone,
                        CourseDuration,
                        CourseRequirements,
                        CourseMatriculationMin,
                        CoursePsychometricMin,
                        CourseDescription,
                        CourseName,
                        Diploma,
                        isInHomePage};
                if ((parentTCategoriesRowByFK_TCourses_TCategories != null)) {
                    columnValuesArray[1] = parentTCategoriesRowByFK_TCourses_TCategories[0];
                }
                if ((parentTAreasCoursesRowByFK_TCourses_TDomainsCourses != null)) {
                    columnValuesArray[2] = parentTAreasCoursesRowByFK_TCourses_TDomainsCourses[0];
                }
                if ((parentTSubAreasCoursesRowByTSubAreasCourses_TCourses != null)) {
                    columnValuesArray[3] = parentTSubAreasCoursesRowByTSubAreasCourses_TCourses[0];
                }
                if ((parentTEstablishmentsRowByFK_TCourses_TEstablishments != null)) {
                    columnValuesArray[4] = parentTEstablishmentsRowByFK_TCourses_TEstablishments[0];
                }
                rowTCoursesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTCoursesRow);
                return rowTCoursesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow FindByCourseId(long CourseId) {
                return ((TCoursesRow)(this.Rows.Find(new object[] {
                            CourseId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TCoursesDataTable cln = ((TCoursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TCoursesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCourseId = base.Columns["CourseId"];
                this.columnCategoryCourse = base.Columns["CategoryCourse"];
                this.columnAreaCourse = base.Columns["AreaCourse"];
                this.columnSubAreaCourse = base.Columns["SubAreaCourse"];
                this.columnSchoolIdCourse = base.Columns["SchoolIdCourse"];
                this.columnCousePhone = base.Columns["CousePhone"];
                this.columnCourseDuration = base.Columns["CourseDuration"];
                this.columnCourseRequirements = base.Columns["CourseRequirements"];
                this.columnCourseMatriculationMin = base.Columns["CourseMatriculationMin"];
                this.columnCoursePsychometricMin = base.Columns["CoursePsychometricMin"];
                this.columnCourseDescription = base.Columns["CourseDescription"];
                this.columnCourseName = base.Columns["CourseName"];
                this.columnDiploma = base.Columns["Diploma"];
                this.columnisInHomePage = base.Columns["isInHomePage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCourseId = new global::System.Data.DataColumn("CourseId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseId);
                this.columnCategoryCourse = new global::System.Data.DataColumn("CategoryCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryCourse);
                this.columnAreaCourse = new global::System.Data.DataColumn("AreaCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaCourse);
                this.columnSubAreaCourse = new global::System.Data.DataColumn("SubAreaCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubAreaCourse);
                this.columnSchoolIdCourse = new global::System.Data.DataColumn("SchoolIdCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolIdCourse);
                this.columnCousePhone = new global::System.Data.DataColumn("CousePhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCousePhone);
                this.columnCourseDuration = new global::System.Data.DataColumn("CourseDuration", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseDuration);
                this.columnCourseRequirements = new global::System.Data.DataColumn("CourseRequirements", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseRequirements);
                this.columnCourseMatriculationMin = new global::System.Data.DataColumn("CourseMatriculationMin", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseMatriculationMin);
                this.columnCoursePsychometricMin = new global::System.Data.DataColumn("CoursePsychometricMin", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoursePsychometricMin);
                this.columnCourseDescription = new global::System.Data.DataColumn("CourseDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseDescription);
                this.columnCourseName = new global::System.Data.DataColumn("CourseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseName);
                this.columnDiploma = new global::System.Data.DataColumn("Diploma", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiploma);
                this.columnisInHomePage = new global::System.Data.DataColumn("isInHomePage", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisInHomePage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCourseId}, true));
                this.columnCourseId.AutoIncrement = true;
                this.columnCourseId.AutoIncrementSeed = -1;
                this.columnCourseId.AutoIncrementStep = -1;
                this.columnCourseId.AllowDBNull = false;
                this.columnCourseId.ReadOnly = true;
                this.columnCourseId.Unique = true;
                this.columnCategoryCourse.AllowDBNull = false;
                this.columnAreaCourse.AllowDBNull = false;
                this.columnSchoolIdCourse.AllowDBNull = false;
                this.columnCousePhone.MaxLength = 20;
                this.columnCourseDuration.MaxLength = 100;
                this.columnCourseRequirements.MaxLength = 250;
                this.columnCourseDescription.MaxLength = 1073741823;
                this.columnCourseName.AllowDBNull = false;
                this.columnCourseName.MaxLength = 250;
                this.columnDiploma.MaxLength = 100;
                this.columnisInHomePage.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow NewTCoursesRow() {
                return ((TCoursesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TCoursesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TCoursesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TCoursesRowChanged != null)) {
                    this.TCoursesRowChanged(this, new TCoursesRowChangeEvent(((TCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TCoursesRowChanging != null)) {
                    this.TCoursesRowChanging(this, new TCoursesRowChangeEvent(((TCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TCoursesRowDeleted != null)) {
                    this.TCoursesRowDeleted(this, new TCoursesRowChangeEvent(((TCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TCoursesRowDeleting != null)) {
                    this.TCoursesRowDeleting(this, new TCoursesRowChangeEvent(((TCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTCoursesRow(TCoursesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TCoursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TEstablishmentsDataTable : global::System.Data.TypedTableBase<TEstablishmentsRow> {
            
            private global::System.Data.DataColumn columnSchoolId;
            
            private global::System.Data.DataColumn columnRegionId;
            
            private global::System.Data.DataColumn columnSchoolAddress;
            
            private global::System.Data.DataColumn columnSchoolMail_1;
            
            private global::System.Data.DataColumn columnSchoolMail_2;
            
            private global::System.Data.DataColumn columnSchoolInternetSite;
            
            private global::System.Data.DataColumn columnSchoolName;
            
            private global::System.Data.DataColumn columnSchoolLogoImageFile;
            
            private global::System.Data.DataColumn columnMainSchoolId;
            
            private global::System.Data.DataColumn columnSmallComment;
            
            private global::System.Data.DataColumn columnBigComment;
            
            private global::System.Data.DataColumn columnStudentsNumber;
            
            private global::System.Data.DataColumn columnorderField;
            
            private global::System.Data.DataColumn columnsmallLogo;
            
            private global::System.Data.DataColumn columnlastReviewTitle;
            
            private global::System.Data.DataColumn columnlastReviewText;
            
            private global::System.Data.DataColumn columnSchoolTitle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsDataTable() {
                this.TableName = "TEstablishments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TEstablishmentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TEstablishmentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdColumn {
                get {
                    return this.columnSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIdColumn {
                get {
                    return this.columnRegionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolAddressColumn {
                get {
                    return this.columnSchoolAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolMail_1Column {
                get {
                    return this.columnSchoolMail_1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolMail_2Column {
                get {
                    return this.columnSchoolMail_2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolInternetSiteColumn {
                get {
                    return this.columnSchoolInternetSite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolNameColumn {
                get {
                    return this.columnSchoolName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolLogoImageFileColumn {
                get {
                    return this.columnSchoolLogoImageFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainSchoolIdColumn {
                get {
                    return this.columnMainSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmallCommentColumn {
                get {
                    return this.columnSmallComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BigCommentColumn {
                get {
                    return this.columnBigComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StudentsNumberColumn {
                get {
                    return this.columnStudentsNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn orderFieldColumn {
                get {
                    return this.columnorderField;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn smallLogoColumn {
                get {
                    return this.columnsmallLogo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lastReviewTitleColumn {
                get {
                    return this.columnlastReviewTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lastReviewTextColumn {
                get {
                    return this.columnlastReviewText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolTitleColumn {
                get {
                    return this.columnSchoolTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow this[int index] {
                get {
                    return ((TEstablishmentsRow)(this.Rows[index]));
                }
            }
            
            public event TEstablishmentsRowChangeEventHandler TEstablishmentsRowChanging;
            
            public event TEstablishmentsRowChangeEventHandler TEstablishmentsRowChanged;
            
            public event TEstablishmentsRowChangeEventHandler TEstablishmentsRowDeleting;
            
            public event TEstablishmentsRowChangeEventHandler TEstablishmentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTEstablishmentsRow(TEstablishmentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow AddTEstablishmentsRow(
                        TRegionsRow parentTRegionsRowByFK_TEstablishments_TRegions, 
                        string SchoolAddress, 
                        string SchoolMail_1, 
                        string SchoolMail_2, 
                        string SchoolInternetSite, 
                        string SchoolName, 
                        string SchoolLogoImageFile, 
                        long MainSchoolId, 
                        string SmallComment, 
                        string BigComment, 
                        int StudentsNumber, 
                        int orderField, 
                        string smallLogo, 
                        string lastReviewTitle, 
                        string lastReviewText, 
                        string SchoolTitle) {
                TEstablishmentsRow rowTEstablishmentsRow = ((TEstablishmentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        SchoolAddress,
                        SchoolMail_1,
                        SchoolMail_2,
                        SchoolInternetSite,
                        SchoolName,
                        SchoolLogoImageFile,
                        MainSchoolId,
                        SmallComment,
                        BigComment,
                        StudentsNumber,
                        orderField,
                        smallLogo,
                        lastReviewTitle,
                        lastReviewText,
                        SchoolTitle};
                if ((parentTRegionsRowByFK_TEstablishments_TRegions != null)) {
                    columnValuesArray[1] = parentTRegionsRowByFK_TEstablishments_TRegions[0];
                }
                rowTEstablishmentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTEstablishmentsRow);
                return rowTEstablishmentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow FindBySchoolId(long SchoolId) {
                return ((TEstablishmentsRow)(this.Rows.Find(new object[] {
                            SchoolId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TEstablishmentsDataTable cln = ((TEstablishmentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TEstablishmentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchoolId = base.Columns["SchoolId"];
                this.columnRegionId = base.Columns["RegionId"];
                this.columnSchoolAddress = base.Columns["SchoolAddress"];
                this.columnSchoolMail_1 = base.Columns["SchoolMail_1"];
                this.columnSchoolMail_2 = base.Columns["SchoolMail_2"];
                this.columnSchoolInternetSite = base.Columns["SchoolInternetSite"];
                this.columnSchoolName = base.Columns["SchoolName"];
                this.columnSchoolLogoImageFile = base.Columns["SchoolLogoImageFile"];
                this.columnMainSchoolId = base.Columns["MainSchoolId"];
                this.columnSmallComment = base.Columns["SmallComment"];
                this.columnBigComment = base.Columns["BigComment"];
                this.columnStudentsNumber = base.Columns["StudentsNumber"];
                this.columnorderField = base.Columns["orderField"];
                this.columnsmallLogo = base.Columns["smallLogo"];
                this.columnlastReviewTitle = base.Columns["lastReviewTitle"];
                this.columnlastReviewText = base.Columns["lastReviewText"];
                this.columnSchoolTitle = base.Columns["SchoolTitle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchoolId = new global::System.Data.DataColumn("SchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolId);
                this.columnRegionId = new global::System.Data.DataColumn("RegionId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionId);
                this.columnSchoolAddress = new global::System.Data.DataColumn("SchoolAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolAddress);
                this.columnSchoolMail_1 = new global::System.Data.DataColumn("SchoolMail_1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolMail_1);
                this.columnSchoolMail_2 = new global::System.Data.DataColumn("SchoolMail_2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolMail_2);
                this.columnSchoolInternetSite = new global::System.Data.DataColumn("SchoolInternetSite", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolInternetSite);
                this.columnSchoolName = new global::System.Data.DataColumn("SchoolName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolName);
                this.columnSchoolLogoImageFile = new global::System.Data.DataColumn("SchoolLogoImageFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolLogoImageFile);
                this.columnMainSchoolId = new global::System.Data.DataColumn("MainSchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainSchoolId);
                this.columnSmallComment = new global::System.Data.DataColumn("SmallComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmallComment);
                this.columnBigComment = new global::System.Data.DataColumn("BigComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBigComment);
                this.columnStudentsNumber = new global::System.Data.DataColumn("StudentsNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStudentsNumber);
                this.columnorderField = new global::System.Data.DataColumn("orderField", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnorderField);
                this.columnsmallLogo = new global::System.Data.DataColumn("smallLogo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsmallLogo);
                this.columnlastReviewTitle = new global::System.Data.DataColumn("lastReviewTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlastReviewTitle);
                this.columnlastReviewText = new global::System.Data.DataColumn("lastReviewText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlastReviewText);
                this.columnSchoolTitle = new global::System.Data.DataColumn("SchoolTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolTitle);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSchoolId}, true));
                this.columnSchoolId.AutoIncrement = true;
                this.columnSchoolId.AutoIncrementSeed = -1;
                this.columnSchoolId.AutoIncrementStep = -1;
                this.columnSchoolId.AllowDBNull = false;
                this.columnSchoolId.ReadOnly = true;
                this.columnSchoolId.Unique = true;
                this.columnRegionId.AllowDBNull = false;
                this.columnSchoolAddress.MaxLength = 50;
                this.columnSchoolMail_1.MaxLength = 50;
                this.columnSchoolMail_2.MaxLength = 50;
                this.columnSchoolInternetSite.MaxLength = 50;
                this.columnSchoolName.AllowDBNull = false;
                this.columnSchoolName.MaxLength = 50;
                this.columnSchoolLogoImageFile.MaxLength = 50;
                this.columnSmallComment.MaxLength = 2147483647;
                this.columnBigComment.MaxLength = 1073741823;
                this.columnStudentsNumber.AllowDBNull = false;
                this.columnorderField.AllowDBNull = false;
                this.columnsmallLogo.AllowDBNull = false;
                this.columnsmallLogo.MaxLength = 50;
                this.columnlastReviewTitle.MaxLength = 500;
                this.columnlastReviewText.MaxLength = 2147483647;
                this.columnSchoolTitle.AllowDBNull = false;
                this.columnSchoolTitle.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow NewTEstablishmentsRow() {
                return ((TEstablishmentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TEstablishmentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TEstablishmentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TEstablishmentsRowChanged != null)) {
                    this.TEstablishmentsRowChanged(this, new TEstablishmentsRowChangeEvent(((TEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TEstablishmentsRowChanging != null)) {
                    this.TEstablishmentsRowChanging(this, new TEstablishmentsRowChangeEvent(((TEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TEstablishmentsRowDeleted != null)) {
                    this.TEstablishmentsRowDeleted(this, new TEstablishmentsRowChangeEvent(((TEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TEstablishmentsRowDeleting != null)) {
                    this.TEstablishmentsRowDeleting(this, new TEstablishmentsRowChangeEvent(((TEstablishmentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTEstablishmentsRow(TEstablishmentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TEstablishmentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TLecturersDataTable : global::System.Data.TypedTableBase<TLecturersRow> {
            
            private global::System.Data.DataColumn columnLecturerId;
            
            private global::System.Data.DataColumn columnLecturerName;
            
            private global::System.Data.DataColumn columnLecturerPhotoFileName;
            
            private global::System.Data.DataColumn columnLecturerComment;
            
            private global::System.Data.DataColumn columnLecturerEstablishmentId;
            
            private global::System.Data.DataColumn columnLecturerCertification;
            
            private global::System.Data.DataColumn columnLecturerCategoryCourse;
            
            private global::System.Data.DataColumn columnLecturerAreaCourse;
            
            private global::System.Data.DataColumn columnLecturerSubAreaCourse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersDataTable() {
                this.TableName = "TLecturers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TLecturersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TLecturersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerIdColumn {
                get {
                    return this.columnLecturerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerNameColumn {
                get {
                    return this.columnLecturerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerPhotoFileNameColumn {
                get {
                    return this.columnLecturerPhotoFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerCommentColumn {
                get {
                    return this.columnLecturerComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerEstablishmentIdColumn {
                get {
                    return this.columnLecturerEstablishmentId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerCertificationColumn {
                get {
                    return this.columnLecturerCertification;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerCategoryCourseColumn {
                get {
                    return this.columnLecturerCategoryCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerAreaCourseColumn {
                get {
                    return this.columnLecturerAreaCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerSubAreaCourseColumn {
                get {
                    return this.columnLecturerSubAreaCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow this[int index] {
                get {
                    return ((TLecturersRow)(this.Rows[index]));
                }
            }
            
            public event TLecturersRowChangeEventHandler TLecturersRowChanging;
            
            public event TLecturersRowChangeEventHandler TLecturersRowChanged;
            
            public event TLecturersRowChangeEventHandler TLecturersRowDeleting;
            
            public event TLecturersRowChangeEventHandler TLecturersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTLecturersRow(TLecturersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow AddTLecturersRow(string LecturerName, string LecturerPhotoFileName, string LecturerComment, TEstablishmentsRow parentTEstablishmentsRowByFK_TLecturers_TEstablishments, string LecturerCertification, long LecturerCategoryCourse, long LecturerAreaCourse, long LecturerSubAreaCourse) {
                TLecturersRow rowTLecturersRow = ((TLecturersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        LecturerName,
                        LecturerPhotoFileName,
                        LecturerComment,
                        null,
                        LecturerCertification,
                        LecturerCategoryCourse,
                        LecturerAreaCourse,
                        LecturerSubAreaCourse};
                if ((parentTEstablishmentsRowByFK_TLecturers_TEstablishments != null)) {
                    columnValuesArray[4] = parentTEstablishmentsRowByFK_TLecturers_TEstablishments[0];
                }
                rowTLecturersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTLecturersRow);
                return rowTLecturersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow FindByLecturerId(long LecturerId) {
                return ((TLecturersRow)(this.Rows.Find(new object[] {
                            LecturerId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TLecturersDataTable cln = ((TLecturersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TLecturersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLecturerId = base.Columns["LecturerId"];
                this.columnLecturerName = base.Columns["LecturerName"];
                this.columnLecturerPhotoFileName = base.Columns["LecturerPhotoFileName"];
                this.columnLecturerComment = base.Columns["LecturerComment"];
                this.columnLecturerEstablishmentId = base.Columns["LecturerEstablishmentId"];
                this.columnLecturerCertification = base.Columns["LecturerCertification"];
                this.columnLecturerCategoryCourse = base.Columns["LecturerCategoryCourse"];
                this.columnLecturerAreaCourse = base.Columns["LecturerAreaCourse"];
                this.columnLecturerSubAreaCourse = base.Columns["LecturerSubAreaCourse"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLecturerId = new global::System.Data.DataColumn("LecturerId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerId);
                this.columnLecturerName = new global::System.Data.DataColumn("LecturerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerName);
                this.columnLecturerPhotoFileName = new global::System.Data.DataColumn("LecturerPhotoFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerPhotoFileName);
                this.columnLecturerComment = new global::System.Data.DataColumn("LecturerComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerComment);
                this.columnLecturerEstablishmentId = new global::System.Data.DataColumn("LecturerEstablishmentId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerEstablishmentId);
                this.columnLecturerCertification = new global::System.Data.DataColumn("LecturerCertification", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerCertification);
                this.columnLecturerCategoryCourse = new global::System.Data.DataColumn("LecturerCategoryCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerCategoryCourse);
                this.columnLecturerAreaCourse = new global::System.Data.DataColumn("LecturerAreaCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerAreaCourse);
                this.columnLecturerSubAreaCourse = new global::System.Data.DataColumn("LecturerSubAreaCourse", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerSubAreaCourse);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLecturerId}, true));
                this.columnLecturerId.AutoIncrement = true;
                this.columnLecturerId.AutoIncrementSeed = -1;
                this.columnLecturerId.AutoIncrementStep = -1;
                this.columnLecturerId.AllowDBNull = false;
                this.columnLecturerId.ReadOnly = true;
                this.columnLecturerId.Unique = true;
                this.columnLecturerName.AllowDBNull = false;
                this.columnLecturerName.MaxLength = 50;
                this.columnLecturerPhotoFileName.MaxLength = 50;
                this.columnLecturerComment.MaxLength = 1073741823;
                this.columnLecturerEstablishmentId.AllowDBNull = false;
                this.columnLecturerCertification.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow NewTLecturersRow() {
                return ((TLecturersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TLecturersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TLecturersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TLecturersRowChanged != null)) {
                    this.TLecturersRowChanged(this, new TLecturersRowChangeEvent(((TLecturersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TLecturersRowChanging != null)) {
                    this.TLecturersRowChanging(this, new TLecturersRowChangeEvent(((TLecturersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TLecturersRowDeleted != null)) {
                    this.TLecturersRowDeleted(this, new TLecturersRowChangeEvent(((TLecturersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TLecturersRowDeleting != null)) {
                    this.TLecturersRowDeleting(this, new TLecturersRowChangeEvent(((TLecturersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTLecturersRow(TLecturersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TLecturersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TMessagesDataTable : global::System.Data.TypedTableBase<TMessagesRow> {
            
            private global::System.Data.DataColumn columnMessageId;
            
            private global::System.Data.DataColumn columnAuthorName;
            
            private global::System.Data.DataColumn columnAuthorLastName;
            
            private global::System.Data.DataColumn columnRegionId;
            
            private global::System.Data.DataColumn columnAuthorAddress;
            
            private global::System.Data.DataColumn columnAuthorPhone;
            
            private global::System.Data.DataColumn columnAuthorCellPhone;
            
            private global::System.Data.DataColumn columnAuthorMail;
            
            private global::System.Data.DataColumn columnAuthorBirthDate;
            
            private global::System.Data.DataColumn columnMessageDate;
            
            private global::System.Data.DataColumn columnCourseId;
            
            private global::System.Data.DataColumn columnSchoolId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesDataTable() {
                this.TableName = "TMessages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TMessagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TMessagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageIdColumn {
                get {
                    return this.columnMessageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorNameColumn {
                get {
                    return this.columnAuthorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorLastNameColumn {
                get {
                    return this.columnAuthorLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIdColumn {
                get {
                    return this.columnRegionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorAddressColumn {
                get {
                    return this.columnAuthorAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorPhoneColumn {
                get {
                    return this.columnAuthorPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorCellPhoneColumn {
                get {
                    return this.columnAuthorCellPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorMailColumn {
                get {
                    return this.columnAuthorMail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuthorBirthDateColumn {
                get {
                    return this.columnAuthorBirthDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageDateColumn {
                get {
                    return this.columnMessageDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIdColumn {
                get {
                    return this.columnCourseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdColumn {
                get {
                    return this.columnSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow this[int index] {
                get {
                    return ((TMessagesRow)(this.Rows[index]));
                }
            }
            
            public event TMessagesRowChangeEventHandler TMessagesRowChanging;
            
            public event TMessagesRowChangeEventHandler TMessagesRowChanged;
            
            public event TMessagesRowChangeEventHandler TMessagesRowDeleting;
            
            public event TMessagesRowChangeEventHandler TMessagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTMessagesRow(TMessagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow AddTMessagesRow(long MessageId, string AuthorName, string AuthorLastName, long RegionId, string AuthorAddress, string AuthorPhone, string AuthorCellPhone, string AuthorMail, System.DateTime AuthorBirthDate, System.DateTime MessageDate, TCoursesRow parentTCoursesRowByFK_TMessages_TCourses, TEstablishmentsRow parentTEstablishmentsRowByFK_TMessages_TEstablishments) {
                TMessagesRow rowTMessagesRow = ((TMessagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MessageId,
                        AuthorName,
                        AuthorLastName,
                        RegionId,
                        AuthorAddress,
                        AuthorPhone,
                        AuthorCellPhone,
                        AuthorMail,
                        AuthorBirthDate,
                        MessageDate,
                        null,
                        null};
                if ((parentTCoursesRowByFK_TMessages_TCourses != null)) {
                    columnValuesArray[10] = parentTCoursesRowByFK_TMessages_TCourses[0];
                }
                if ((parentTEstablishmentsRowByFK_TMessages_TEstablishments != null)) {
                    columnValuesArray[11] = parentTEstablishmentsRowByFK_TMessages_TEstablishments[0];
                }
                rowTMessagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTMessagesRow);
                return rowTMessagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow FindByMessageId(long MessageId) {
                return ((TMessagesRow)(this.Rows.Find(new object[] {
                            MessageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TMessagesDataTable cln = ((TMessagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TMessagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMessageId = base.Columns["MessageId"];
                this.columnAuthorName = base.Columns["AuthorName"];
                this.columnAuthorLastName = base.Columns["AuthorLastName"];
                this.columnRegionId = base.Columns["RegionId"];
                this.columnAuthorAddress = base.Columns["AuthorAddress"];
                this.columnAuthorPhone = base.Columns["AuthorPhone"];
                this.columnAuthorCellPhone = base.Columns["AuthorCellPhone"];
                this.columnAuthorMail = base.Columns["AuthorMail"];
                this.columnAuthorBirthDate = base.Columns["AuthorBirthDate"];
                this.columnMessageDate = base.Columns["MessageDate"];
                this.columnCourseId = base.Columns["CourseId"];
                this.columnSchoolId = base.Columns["SchoolId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMessageId = new global::System.Data.DataColumn("MessageId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageId);
                this.columnAuthorName = new global::System.Data.DataColumn("AuthorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorName);
                this.columnAuthorLastName = new global::System.Data.DataColumn("AuthorLastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorLastName);
                this.columnRegionId = new global::System.Data.DataColumn("RegionId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionId);
                this.columnAuthorAddress = new global::System.Data.DataColumn("AuthorAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorAddress);
                this.columnAuthorPhone = new global::System.Data.DataColumn("AuthorPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorPhone);
                this.columnAuthorCellPhone = new global::System.Data.DataColumn("AuthorCellPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorCellPhone);
                this.columnAuthorMail = new global::System.Data.DataColumn("AuthorMail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorMail);
                this.columnAuthorBirthDate = new global::System.Data.DataColumn("AuthorBirthDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuthorBirthDate);
                this.columnMessageDate = new global::System.Data.DataColumn("MessageDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageDate);
                this.columnCourseId = new global::System.Data.DataColumn("CourseId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseId);
                this.columnSchoolId = new global::System.Data.DataColumn("SchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMessageId}, true));
                this.columnMessageId.AllowDBNull = false;
                this.columnMessageId.Unique = true;
                this.columnAuthorName.MaxLength = 20;
                this.columnAuthorLastName.MaxLength = 20;
                this.columnAuthorAddress.MaxLength = 50;
                this.columnAuthorPhone.MaxLength = 20;
                this.columnAuthorCellPhone.MaxLength = 20;
                this.columnAuthorMail.MaxLength = 50;
                this.columnSchoolId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow NewTMessagesRow() {
                return ((TMessagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TMessagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TMessagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TMessagesRowChanged != null)) {
                    this.TMessagesRowChanged(this, new TMessagesRowChangeEvent(((TMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TMessagesRowChanging != null)) {
                    this.TMessagesRowChanging(this, new TMessagesRowChangeEvent(((TMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TMessagesRowDeleted != null)) {
                    this.TMessagesRowDeleted(this, new TMessagesRowChangeEvent(((TMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TMessagesRowDeleting != null)) {
                    this.TMessagesRowDeleting(this, new TMessagesRowChangeEvent(((TMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTMessagesRow(TMessagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TMessagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TMessagesForSchoolDataTable : global::System.Data.TypedTableBase<TMessagesForSchoolRow> {
            
            private global::System.Data.DataColumn columnMessageId;
            
            private global::System.Data.DataColumn columnMessageDate;
            
            private global::System.Data.DataColumn columnUserNameLastName;
            
            private global::System.Data.DataColumn columnUserMail;
            
            private global::System.Data.DataColumn columnUserCity;
            
            private global::System.Data.DataColumn columnUserStreet;
            
            private global::System.Data.DataColumn columnUserPhone;
            
            private global::System.Data.DataColumn columnSchoolId;
            
            private global::System.Data.DataColumn columnMessageText;
            
            private global::System.Data.DataColumn columnareaId;
            
            private global::System.Data.DataColumn columnsubAreaId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolDataTable() {
                this.TableName = "TMessagesForSchool";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TMessagesForSchoolDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TMessagesForSchoolDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageIdColumn {
                get {
                    return this.columnMessageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageDateColumn {
                get {
                    return this.columnMessageDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameLastNameColumn {
                get {
                    return this.columnUserNameLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserMailColumn {
                get {
                    return this.columnUserMail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserCityColumn {
                get {
                    return this.columnUserCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserStreetColumn {
                get {
                    return this.columnUserStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserPhoneColumn {
                get {
                    return this.columnUserPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdColumn {
                get {
                    return this.columnSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageTextColumn {
                get {
                    return this.columnMessageText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn areaIdColumn {
                get {
                    return this.columnareaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subAreaIdColumn {
                get {
                    return this.columnsubAreaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRow this[int index] {
                get {
                    return ((TMessagesForSchoolRow)(this.Rows[index]));
                }
            }
            
            public event TMessagesForSchoolRowChangeEventHandler TMessagesForSchoolRowChanging;
            
            public event TMessagesForSchoolRowChangeEventHandler TMessagesForSchoolRowChanged;
            
            public event TMessagesForSchoolRowChangeEventHandler TMessagesForSchoolRowDeleting;
            
            public event TMessagesForSchoolRowChangeEventHandler TMessagesForSchoolRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTMessagesForSchoolRow(TMessagesForSchoolRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRow AddTMessagesForSchoolRow(System.DateTime MessageDate, string UserNameLastName, string UserMail, string UserCity, string UserStreet, string UserPhone, TEstablishmentsRow parentTEstablishmentsRowByFK_TMessagesForSchool_TEstablishments, string MessageText, int areaId, int subAreaId) {
                TMessagesForSchoolRow rowTMessagesForSchoolRow = ((TMessagesForSchoolRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MessageDate,
                        UserNameLastName,
                        UserMail,
                        UserCity,
                        UserStreet,
                        UserPhone,
                        null,
                        MessageText,
                        areaId,
                        subAreaId};
                if ((parentTEstablishmentsRowByFK_TMessagesForSchool_TEstablishments != null)) {
                    columnValuesArray[7] = parentTEstablishmentsRowByFK_TMessagesForSchool_TEstablishments[0];
                }
                rowTMessagesForSchoolRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTMessagesForSchoolRow);
                return rowTMessagesForSchoolRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRow FindByMessageId(long MessageId) {
                return ((TMessagesForSchoolRow)(this.Rows.Find(new object[] {
                            MessageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TMessagesForSchoolDataTable cln = ((TMessagesForSchoolDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TMessagesForSchoolDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMessageId = base.Columns["MessageId"];
                this.columnMessageDate = base.Columns["MessageDate"];
                this.columnUserNameLastName = base.Columns["UserNameLastName"];
                this.columnUserMail = base.Columns["UserMail"];
                this.columnUserCity = base.Columns["UserCity"];
                this.columnUserStreet = base.Columns["UserStreet"];
                this.columnUserPhone = base.Columns["UserPhone"];
                this.columnSchoolId = base.Columns["SchoolId"];
                this.columnMessageText = base.Columns["MessageText"];
                this.columnareaId = base.Columns["areaId"];
                this.columnsubAreaId = base.Columns["subAreaId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMessageId = new global::System.Data.DataColumn("MessageId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageId);
                this.columnMessageDate = new global::System.Data.DataColumn("MessageDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageDate);
                this.columnUserNameLastName = new global::System.Data.DataColumn("UserNameLastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserNameLastName);
                this.columnUserMail = new global::System.Data.DataColumn("UserMail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserMail);
                this.columnUserCity = new global::System.Data.DataColumn("UserCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserCity);
                this.columnUserStreet = new global::System.Data.DataColumn("UserStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserStreet);
                this.columnUserPhone = new global::System.Data.DataColumn("UserPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserPhone);
                this.columnSchoolId = new global::System.Data.DataColumn("SchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolId);
                this.columnMessageText = new global::System.Data.DataColumn("MessageText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageText);
                this.columnareaId = new global::System.Data.DataColumn("areaId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnareaId);
                this.columnsubAreaId = new global::System.Data.DataColumn("subAreaId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubAreaId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMessageId}, true));
                this.columnMessageId.AutoIncrement = true;
                this.columnMessageId.AutoIncrementSeed = -1;
                this.columnMessageId.AutoIncrementStep = -1;
                this.columnMessageId.AllowDBNull = false;
                this.columnMessageId.ReadOnly = true;
                this.columnMessageId.Unique = true;
                this.columnMessageDate.AllowDBNull = false;
                this.columnUserNameLastName.MaxLength = 50;
                this.columnUserMail.MaxLength = 50;
                this.columnUserCity.MaxLength = 50;
                this.columnUserStreet.MaxLength = 50;
                this.columnUserPhone.MaxLength = 50;
                this.columnSchoolId.AllowDBNull = false;
                this.columnMessageText.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRow NewTMessagesForSchoolRow() {
                return ((TMessagesForSchoolRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TMessagesForSchoolRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TMessagesForSchoolRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TMessagesForSchoolRowChanged != null)) {
                    this.TMessagesForSchoolRowChanged(this, new TMessagesForSchoolRowChangeEvent(((TMessagesForSchoolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TMessagesForSchoolRowChanging != null)) {
                    this.TMessagesForSchoolRowChanging(this, new TMessagesForSchoolRowChangeEvent(((TMessagesForSchoolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TMessagesForSchoolRowDeleted != null)) {
                    this.TMessagesForSchoolRowDeleted(this, new TMessagesForSchoolRowChangeEvent(((TMessagesForSchoolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TMessagesForSchoolRowDeleting != null)) {
                    this.TMessagesForSchoolRowDeleting(this, new TMessagesForSchoolRowChangeEvent(((TMessagesForSchoolRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTMessagesForSchoolRow(TMessagesForSchoolRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TMessagesForSchoolDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TPhonesListDataTable : global::System.Data.TypedTableBase<TPhonesListRow> {
            
            private global::System.Data.DataColumn columnPhoneId;
            
            private global::System.Data.DataColumn columnPhoneNumber;
            
            private global::System.Data.DataColumn columnMainFlag;
            
            private global::System.Data.DataColumn columnSchoolId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListDataTable() {
                this.TableName = "TPhonesList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TPhonesListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TPhonesListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneIdColumn {
                get {
                    return this.columnPhoneId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainFlagColumn {
                get {
                    return this.columnMainFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdColumn {
                get {
                    return this.columnSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRow this[int index] {
                get {
                    return ((TPhonesListRow)(this.Rows[index]));
                }
            }
            
            public event TPhonesListRowChangeEventHandler TPhonesListRowChanging;
            
            public event TPhonesListRowChangeEventHandler TPhonesListRowChanged;
            
            public event TPhonesListRowChangeEventHandler TPhonesListRowDeleting;
            
            public event TPhonesListRowChangeEventHandler TPhonesListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTPhonesListRow(TPhonesListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRow AddTPhonesListRow(string PhoneNumber, bool MainFlag, TEstablishmentsRow parentTEstablishmentsRowByFK_TPhonesList_TEstablishments) {
                TPhonesListRow rowTPhonesListRow = ((TPhonesListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PhoneNumber,
                        MainFlag,
                        null};
                if ((parentTEstablishmentsRowByFK_TPhonesList_TEstablishments != null)) {
                    columnValuesArray[3] = parentTEstablishmentsRowByFK_TPhonesList_TEstablishments[0];
                }
                rowTPhonesListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTPhonesListRow);
                return rowTPhonesListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRow FindByPhoneId(long PhoneId) {
                return ((TPhonesListRow)(this.Rows.Find(new object[] {
                            PhoneId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TPhonesListDataTable cln = ((TPhonesListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TPhonesListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPhoneId = base.Columns["PhoneId"];
                this.columnPhoneNumber = base.Columns["PhoneNumber"];
                this.columnMainFlag = base.Columns["MainFlag"];
                this.columnSchoolId = base.Columns["SchoolId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPhoneId = new global::System.Data.DataColumn("PhoneId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneId);
                this.columnPhoneNumber = new global::System.Data.DataColumn("PhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneNumber);
                this.columnMainFlag = new global::System.Data.DataColumn("MainFlag", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainFlag);
                this.columnSchoolId = new global::System.Data.DataColumn("SchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPhoneId}, true));
                this.columnPhoneId.AutoIncrement = true;
                this.columnPhoneId.AutoIncrementSeed = -1;
                this.columnPhoneId.AutoIncrementStep = -1;
                this.columnPhoneId.AllowDBNull = false;
                this.columnPhoneId.ReadOnly = true;
                this.columnPhoneId.Unique = true;
                this.columnPhoneNumber.AllowDBNull = false;
                this.columnPhoneNumber.MaxLength = 20;
                this.columnMainFlag.AllowDBNull = false;
                this.columnSchoolId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRow NewTPhonesListRow() {
                return ((TPhonesListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TPhonesListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TPhonesListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TPhonesListRowChanged != null)) {
                    this.TPhonesListRowChanged(this, new TPhonesListRowChangeEvent(((TPhonesListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TPhonesListRowChanging != null)) {
                    this.TPhonesListRowChanging(this, new TPhonesListRowChangeEvent(((TPhonesListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TPhonesListRowDeleted != null)) {
                    this.TPhonesListRowDeleted(this, new TPhonesListRowChangeEvent(((TPhonesListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TPhonesListRowDeleting != null)) {
                    this.TPhonesListRowDeleting(this, new TPhonesListRowChangeEvent(((TPhonesListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTPhonesListRow(TPhonesListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TPhonesListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TPhotoGalleryDataTable : global::System.Data.TypedTableBase<TPhotoGalleryRow> {
            
            private global::System.Data.DataColumn columnPhotoId;
            
            private global::System.Data.DataColumn columnPhotoFileName;
            
            private global::System.Data.DataColumn columnFileExtension;
            
            private global::System.Data.DataColumn columnGallerySchoolId;
            
            private global::System.Data.DataColumn columnCommentPhoto;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryDataTable() {
                this.TableName = "TPhotoGallery";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TPhotoGalleryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TPhotoGalleryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhotoIdColumn {
                get {
                    return this.columnPhotoId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhotoFileNameColumn {
                get {
                    return this.columnPhotoFileName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileExtensionColumn {
                get {
                    return this.columnFileExtension;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GallerySchoolIdColumn {
                get {
                    return this.columnGallerySchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentPhotoColumn {
                get {
                    return this.columnCommentPhoto;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRow this[int index] {
                get {
                    return ((TPhotoGalleryRow)(this.Rows[index]));
                }
            }
            
            public event TPhotoGalleryRowChangeEventHandler TPhotoGalleryRowChanging;
            
            public event TPhotoGalleryRowChangeEventHandler TPhotoGalleryRowChanged;
            
            public event TPhotoGalleryRowChangeEventHandler TPhotoGalleryRowDeleting;
            
            public event TPhotoGalleryRowChangeEventHandler TPhotoGalleryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTPhotoGalleryRow(TPhotoGalleryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRow AddTPhotoGalleryRow(string PhotoFileName, string FileExtension, TEstablishmentsRow parentTEstablishmentsRowByFK_TPhotoGallery_TEstablishments, string CommentPhoto) {
                TPhotoGalleryRow rowTPhotoGalleryRow = ((TPhotoGalleryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PhotoFileName,
                        FileExtension,
                        null,
                        CommentPhoto};
                if ((parentTEstablishmentsRowByFK_TPhotoGallery_TEstablishments != null)) {
                    columnValuesArray[3] = parentTEstablishmentsRowByFK_TPhotoGallery_TEstablishments[0];
                }
                rowTPhotoGalleryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTPhotoGalleryRow);
                return rowTPhotoGalleryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRow FindByPhotoId(long PhotoId) {
                return ((TPhotoGalleryRow)(this.Rows.Find(new object[] {
                            PhotoId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TPhotoGalleryDataTable cln = ((TPhotoGalleryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TPhotoGalleryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPhotoId = base.Columns["PhotoId"];
                this.columnPhotoFileName = base.Columns["PhotoFileName"];
                this.columnFileExtension = base.Columns["FileExtension"];
                this.columnGallerySchoolId = base.Columns["GallerySchoolId"];
                this.columnCommentPhoto = base.Columns["CommentPhoto"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPhotoId = new global::System.Data.DataColumn("PhotoId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhotoId);
                this.columnPhotoFileName = new global::System.Data.DataColumn("PhotoFileName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhotoFileName);
                this.columnFileExtension = new global::System.Data.DataColumn("FileExtension", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileExtension);
                this.columnGallerySchoolId = new global::System.Data.DataColumn("GallerySchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGallerySchoolId);
                this.columnCommentPhoto = new global::System.Data.DataColumn("CommentPhoto", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommentPhoto);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPhotoId}, true));
                this.columnPhotoId.AutoIncrement = true;
                this.columnPhotoId.AutoIncrementSeed = -1;
                this.columnPhotoId.AutoIncrementStep = -1;
                this.columnPhotoId.AllowDBNull = false;
                this.columnPhotoId.ReadOnly = true;
                this.columnPhotoId.Unique = true;
                this.columnPhotoFileName.ReadOnly = true;
                this.columnPhotoFileName.MaxLength = 47;
                this.columnFileExtension.MaxLength = 10;
                this.columnGallerySchoolId.AllowDBNull = false;
                this.columnCommentPhoto.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRow NewTPhotoGalleryRow() {
                return ((TPhotoGalleryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TPhotoGalleryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TPhotoGalleryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TPhotoGalleryRowChanged != null)) {
                    this.TPhotoGalleryRowChanged(this, new TPhotoGalleryRowChangeEvent(((TPhotoGalleryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TPhotoGalleryRowChanging != null)) {
                    this.TPhotoGalleryRowChanging(this, new TPhotoGalleryRowChangeEvent(((TPhotoGalleryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TPhotoGalleryRowDeleted != null)) {
                    this.TPhotoGalleryRowDeleted(this, new TPhotoGalleryRowChangeEvent(((TPhotoGalleryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TPhotoGalleryRowDeleting != null)) {
                    this.TPhotoGalleryRowDeleting(this, new TPhotoGalleryRowChangeEvent(((TPhotoGalleryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTPhotoGalleryRow(TPhotoGalleryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TPhotoGalleryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TRegionsDataTable : global::System.Data.TypedTableBase<TRegionsRow> {
            
            private global::System.Data.DataColumn columnRegionId;
            
            private global::System.Data.DataColumn columnRegionName;
            
            private global::System.Data.DataColumn columnMainRegionId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsDataTable() {
                this.TableName = "TRegions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRegionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TRegionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIdColumn {
                get {
                    return this.columnRegionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionNameColumn {
                get {
                    return this.columnRegionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MainRegionIdColumn {
                get {
                    return this.columnMainRegionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRow this[int index] {
                get {
                    return ((TRegionsRow)(this.Rows[index]));
                }
            }
            
            public event TRegionsRowChangeEventHandler TRegionsRowChanging;
            
            public event TRegionsRowChangeEventHandler TRegionsRowChanged;
            
            public event TRegionsRowChangeEventHandler TRegionsRowDeleting;
            
            public event TRegionsRowChangeEventHandler TRegionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTRegionsRow(TRegionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRow AddTRegionsRow(long RegionId, string RegionName, long MainRegionId) {
                TRegionsRow rowTRegionsRow = ((TRegionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RegionId,
                        RegionName,
                        MainRegionId};
                rowTRegionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTRegionsRow);
                return rowTRegionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRow FindByRegionId(long RegionId) {
                return ((TRegionsRow)(this.Rows.Find(new object[] {
                            RegionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TRegionsDataTable cln = ((TRegionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TRegionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRegionId = base.Columns["RegionId"];
                this.columnRegionName = base.Columns["RegionName"];
                this.columnMainRegionId = base.Columns["MainRegionId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRegionId = new global::System.Data.DataColumn("RegionId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionId);
                this.columnRegionName = new global::System.Data.DataColumn("RegionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionName);
                this.columnMainRegionId = new global::System.Data.DataColumn("MainRegionId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMainRegionId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnRegionId}, true));
                this.columnRegionId.AllowDBNull = false;
                this.columnRegionId.Unique = true;
                this.columnRegionName.AllowDBNull = false;
                this.columnRegionName.MaxLength = 50;
                this.columnMainRegionId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRow NewTRegionsRow() {
                return ((TRegionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TRegionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TRegionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TRegionsRowChanged != null)) {
                    this.TRegionsRowChanged(this, new TRegionsRowChangeEvent(((TRegionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TRegionsRowChanging != null)) {
                    this.TRegionsRowChanging(this, new TRegionsRowChangeEvent(((TRegionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TRegionsRowDeleted != null)) {
                    this.TRegionsRowDeleted(this, new TRegionsRowChangeEvent(((TRegionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TRegionsRowDeleting != null)) {
                    this.TRegionsRowDeleting(this, new TRegionsRowChangeEvent(((TRegionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTRegionsRow(TRegionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TRegionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TReviewsDataTable : global::System.Data.TypedTableBase<TReviewsRow> {
            
            private global::System.Data.DataColumn columnreviewId;
            
            private global::System.Data.DataColumn columnreviewTitle;
            
            private global::System.Data.DataColumn columnreviewText;
            
            private global::System.Data.DataColumn columnschoolId;
            
            private global::System.Data.DataColumn columnreviewImage;
            
            private global::System.Data.DataColumn columnstudentType;
            
            private global::System.Data.DataColumn columngraduatedDate;
            
            private global::System.Data.DataColumn columninsertDate;
            
            private global::System.Data.DataColumn columnuserName;
            
            private global::System.Data.DataColumn columnuserIP;
            
            private global::System.Data.DataColumn columnisPublished;
            
            private global::System.Data.DataColumn columncategoryId;
            
            private global::System.Data.DataColumn columnfieldId;
            
            private global::System.Data.DataColumn columnsubFieldId;
            
            private global::System.Data.DataColumn columncourseId;
            
            private global::System.Data.DataColumn columnuserEmail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsDataTable() {
                this.TableName = "TReviews";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TReviewsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TReviewsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reviewIdColumn {
                get {
                    return this.columnreviewId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reviewTitleColumn {
                get {
                    return this.columnreviewTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reviewTextColumn {
                get {
                    return this.columnreviewText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn schoolIdColumn {
                get {
                    return this.columnschoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reviewImageColumn {
                get {
                    return this.columnreviewImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn studentTypeColumn {
                get {
                    return this.columnstudentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn graduatedDateColumn {
                get {
                    return this.columngraduatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn insertDateColumn {
                get {
                    return this.columninsertDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userNameColumn {
                get {
                    return this.columnuserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userIPColumn {
                get {
                    return this.columnuserIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn isPublishedColumn {
                get {
                    return this.columnisPublished;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn categoryIdColumn {
                get {
                    return this.columncategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn fieldIdColumn {
                get {
                    return this.columnfieldId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subFieldIdColumn {
                get {
                    return this.columnsubFieldId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn courseIdColumn {
                get {
                    return this.columncourseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn userEmailColumn {
                get {
                    return this.columnuserEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsRow this[int index] {
                get {
                    return ((TReviewsRow)(this.Rows[index]));
                }
            }
            
            public event TReviewsRowChangeEventHandler TReviewsRowChanging;
            
            public event TReviewsRowChangeEventHandler TReviewsRowChanged;
            
            public event TReviewsRowChangeEventHandler TReviewsRowDeleting;
            
            public event TReviewsRowChangeEventHandler TReviewsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTReviewsRow(TReviewsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsRow AddTReviewsRow(string reviewTitle, string reviewText, int schoolId, string reviewImage, byte studentType, string graduatedDate, System.DateTime insertDate, string userName, string userIP, bool isPublished, int categoryId, int fieldId, int subFieldId, int courseId, string userEmail) {
                TReviewsRow rowTReviewsRow = ((TReviewsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        reviewTitle,
                        reviewText,
                        schoolId,
                        reviewImage,
                        studentType,
                        graduatedDate,
                        insertDate,
                        userName,
                        userIP,
                        isPublished,
                        categoryId,
                        fieldId,
                        subFieldId,
                        courseId,
                        userEmail};
                rowTReviewsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTReviewsRow);
                return rowTReviewsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsRow FindByreviewId(int reviewId) {
                return ((TReviewsRow)(this.Rows.Find(new object[] {
                            reviewId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TReviewsDataTable cln = ((TReviewsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TReviewsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreviewId = base.Columns["reviewId"];
                this.columnreviewTitle = base.Columns["reviewTitle"];
                this.columnreviewText = base.Columns["reviewText"];
                this.columnschoolId = base.Columns["schoolId"];
                this.columnreviewImage = base.Columns["reviewImage"];
                this.columnstudentType = base.Columns["studentType"];
                this.columngraduatedDate = base.Columns["graduatedDate"];
                this.columninsertDate = base.Columns["insertDate"];
                this.columnuserName = base.Columns["userName"];
                this.columnuserIP = base.Columns["userIP"];
                this.columnisPublished = base.Columns["isPublished"];
                this.columncategoryId = base.Columns["categoryId"];
                this.columnfieldId = base.Columns["fieldId"];
                this.columnsubFieldId = base.Columns["subFieldId"];
                this.columncourseId = base.Columns["courseId"];
                this.columnuserEmail = base.Columns["userEmail"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreviewId = new global::System.Data.DataColumn("reviewId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreviewId);
                this.columnreviewTitle = new global::System.Data.DataColumn("reviewTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreviewTitle);
                this.columnreviewText = new global::System.Data.DataColumn("reviewText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreviewText);
                this.columnschoolId = new global::System.Data.DataColumn("schoolId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschoolId);
                this.columnreviewImage = new global::System.Data.DataColumn("reviewImage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreviewImage);
                this.columnstudentType = new global::System.Data.DataColumn("studentType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstudentType);
                this.columngraduatedDate = new global::System.Data.DataColumn("graduatedDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngraduatedDate);
                this.columninsertDate = new global::System.Data.DataColumn("insertDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninsertDate);
                this.columnuserName = new global::System.Data.DataColumn("userName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserName);
                this.columnuserIP = new global::System.Data.DataColumn("userIP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserIP);
                this.columnisPublished = new global::System.Data.DataColumn("isPublished", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnisPublished);
                this.columncategoryId = new global::System.Data.DataColumn("categoryId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategoryId);
                this.columnfieldId = new global::System.Data.DataColumn("fieldId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfieldId);
                this.columnsubFieldId = new global::System.Data.DataColumn("subFieldId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubFieldId);
                this.columncourseId = new global::System.Data.DataColumn("courseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncourseId);
                this.columnuserEmail = new global::System.Data.DataColumn("userEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuserEmail);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreviewId}, true));
                this.columnreviewId.AutoIncrement = true;
                this.columnreviewId.AutoIncrementSeed = -1;
                this.columnreviewId.AutoIncrementStep = -1;
                this.columnreviewId.AllowDBNull = false;
                this.columnreviewId.ReadOnly = true;
                this.columnreviewId.Unique = true;
                this.columnreviewTitle.AllowDBNull = false;
                this.columnreviewTitle.MaxLength = 500;
                this.columnreviewText.AllowDBNull = false;
                this.columnreviewText.MaxLength = 2147483647;
                this.columnschoolId.AllowDBNull = false;
                this.columnreviewImage.AllowDBNull = false;
                this.columnreviewImage.MaxLength = 150;
                this.columnstudentType.AllowDBNull = false;
                this.columngraduatedDate.AllowDBNull = false;
                this.columngraduatedDate.MaxLength = 150;
                this.columninsertDate.AllowDBNull = false;
                this.columnuserName.AllowDBNull = false;
                this.columnuserName.MaxLength = 150;
                this.columnuserIP.AllowDBNull = false;
                this.columnuserIP.MaxLength = 50;
                this.columncategoryId.AllowDBNull = false;
                this.columnfieldId.AllowDBNull = false;
                this.columnsubFieldId.AllowDBNull = false;
                this.columncourseId.AllowDBNull = false;
                this.columnuserEmail.AllowDBNull = false;
                this.columnuserEmail.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsRow NewTReviewsRow() {
                return ((TReviewsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TReviewsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TReviewsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TReviewsRowChanged != null)) {
                    this.TReviewsRowChanged(this, new TReviewsRowChangeEvent(((TReviewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TReviewsRowChanging != null)) {
                    this.TReviewsRowChanging(this, new TReviewsRowChangeEvent(((TReviewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TReviewsRowDeleted != null)) {
                    this.TReviewsRowDeleted(this, new TReviewsRowChangeEvent(((TReviewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TReviewsRowDeleting != null)) {
                    this.TReviewsRowDeleting(this, new TReviewsRowChangeEvent(((TReviewsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTReviewsRow(TReviewsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TReviewsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TScholarshipsDataTable : global::System.Data.TypedTableBase<TScholarshipsRow> {
            
            private global::System.Data.DataColumn columnScholarshipId;
            
            private global::System.Data.DataColumn columnScholarshipName;
            
            private global::System.Data.DataColumn columnScholarshipText;
            
            private global::System.Data.DataColumn columnSchoolId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsDataTable() {
                this.TableName = "TScholarships";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TScholarshipsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TScholarshipsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScholarshipIdColumn {
                get {
                    return this.columnScholarshipId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScholarshipNameColumn {
                get {
                    return this.columnScholarshipName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ScholarshipTextColumn {
                get {
                    return this.columnScholarshipText;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolIdColumn {
                get {
                    return this.columnSchoolId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRow this[int index] {
                get {
                    return ((TScholarshipsRow)(this.Rows[index]));
                }
            }
            
            public event TScholarshipsRowChangeEventHandler TScholarshipsRowChanging;
            
            public event TScholarshipsRowChangeEventHandler TScholarshipsRowChanged;
            
            public event TScholarshipsRowChangeEventHandler TScholarshipsRowDeleting;
            
            public event TScholarshipsRowChangeEventHandler TScholarshipsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTScholarshipsRow(TScholarshipsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRow AddTScholarshipsRow(string ScholarshipName, string ScholarshipText, TEstablishmentsRow parentTEstablishmentsRowByFK_TScholarships_TEstablishments) {
                TScholarshipsRow rowTScholarshipsRow = ((TScholarshipsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ScholarshipName,
                        ScholarshipText,
                        null};
                if ((parentTEstablishmentsRowByFK_TScholarships_TEstablishments != null)) {
                    columnValuesArray[3] = parentTEstablishmentsRowByFK_TScholarships_TEstablishments[0];
                }
                rowTScholarshipsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTScholarshipsRow);
                return rowTScholarshipsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRow FindByScholarshipId(long ScholarshipId) {
                return ((TScholarshipsRow)(this.Rows.Find(new object[] {
                            ScholarshipId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TScholarshipsDataTable cln = ((TScholarshipsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TScholarshipsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnScholarshipId = base.Columns["ScholarshipId"];
                this.columnScholarshipName = base.Columns["ScholarshipName"];
                this.columnScholarshipText = base.Columns["ScholarshipText"];
                this.columnSchoolId = base.Columns["SchoolId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnScholarshipId = new global::System.Data.DataColumn("ScholarshipId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScholarshipId);
                this.columnScholarshipName = new global::System.Data.DataColumn("ScholarshipName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScholarshipName);
                this.columnScholarshipText = new global::System.Data.DataColumn("ScholarshipText", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScholarshipText);
                this.columnSchoolId = new global::System.Data.DataColumn("SchoolId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnScholarshipId}, true));
                this.columnScholarshipId.AutoIncrement = true;
                this.columnScholarshipId.AutoIncrementSeed = -1;
                this.columnScholarshipId.AutoIncrementStep = -1;
                this.columnScholarshipId.AllowDBNull = false;
                this.columnScholarshipId.ReadOnly = true;
                this.columnScholarshipId.Unique = true;
                this.columnScholarshipName.MaxLength = 150;
                this.columnScholarshipText.AllowDBNull = false;
                this.columnScholarshipText.MaxLength = 1073741823;
                this.columnSchoolId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRow NewTScholarshipsRow() {
                return ((TScholarshipsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TScholarshipsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TScholarshipsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TScholarshipsRowChanged != null)) {
                    this.TScholarshipsRowChanged(this, new TScholarshipsRowChangeEvent(((TScholarshipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TScholarshipsRowChanging != null)) {
                    this.TScholarshipsRowChanging(this, new TScholarshipsRowChangeEvent(((TScholarshipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TScholarshipsRowDeleted != null)) {
                    this.TScholarshipsRowDeleted(this, new TScholarshipsRowChangeEvent(((TScholarshipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TScholarshipsRowDeleting != null)) {
                    this.TScholarshipsRowDeleting(this, new TScholarshipsRowChangeEvent(((TScholarshipsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTScholarshipsRow(TScholarshipsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TScholarshipsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TSubAreasCoursesDataTable : global::System.Data.TypedTableBase<TSubAreasCoursesRow> {
            
            private global::System.Data.DataColumn columnSubAreaCoursesId;
            
            private global::System.Data.DataColumn columnSubAreaCoursesName;
            
            private global::System.Data.DataColumn columnAreaCoursesId;
            
            private global::System.Data.DataColumn columnFlagPopular;
            
            private global::System.Data.DataColumn columnmetaDesc;
            
            private global::System.Data.DataColumn columnmetaKeywords;
            
            private global::System.Data.DataColumn columnsubAreaTitle;
            
            private global::System.Data.DataColumn columnleadSlogan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesDataTable() {
                this.TableName = "TSubAreasCourses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSubAreasCoursesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TSubAreasCoursesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaCoursesIdColumn {
                get {
                    return this.columnSubAreaCoursesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaCoursesNameColumn {
                get {
                    return this.columnSubAreaCoursesName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaCoursesIdColumn {
                get {
                    return this.columnAreaCoursesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagPopularColumn {
                get {
                    return this.columnFlagPopular;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metaDescColumn {
                get {
                    return this.columnmetaDesc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn metaKeywordsColumn {
                get {
                    return this.columnmetaKeywords;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subAreaTitleColumn {
                get {
                    return this.columnsubAreaTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn leadSloganColumn {
                get {
                    return this.columnleadSlogan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow this[int index] {
                get {
                    return ((TSubAreasCoursesRow)(this.Rows[index]));
                }
            }
            
            public event TSubAreasCoursesRowChangeEventHandler TSubAreasCoursesRowChanging;
            
            public event TSubAreasCoursesRowChangeEventHandler TSubAreasCoursesRowChanged;
            
            public event TSubAreasCoursesRowChangeEventHandler TSubAreasCoursesRowDeleting;
            
            public event TSubAreasCoursesRowChangeEventHandler TSubAreasCoursesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTSubAreasCoursesRow(TSubAreasCoursesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow AddTSubAreasCoursesRow(long SubAreaCoursesId, string SubAreaCoursesName, TAreasCoursesRow parentTAreasCoursesRowByFK_TSubAreasCourses_TAreasCourses, bool FlagPopular, string metaDesc, string metaKeywords, string subAreaTitle, string leadSlogan) {
                TSubAreasCoursesRow rowTSubAreasCoursesRow = ((TSubAreasCoursesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubAreaCoursesId,
                        SubAreaCoursesName,
                        null,
                        FlagPopular,
                        metaDesc,
                        metaKeywords,
                        subAreaTitle,
                        leadSlogan};
                if ((parentTAreasCoursesRowByFK_TSubAreasCourses_TAreasCourses != null)) {
                    columnValuesArray[2] = parentTAreasCoursesRowByFK_TSubAreasCourses_TAreasCourses[0];
                }
                rowTSubAreasCoursesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTSubAreasCoursesRow);
                return rowTSubAreasCoursesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow FindBySubAreaCoursesId(long SubAreaCoursesId) {
                return ((TSubAreasCoursesRow)(this.Rows.Find(new object[] {
                            SubAreaCoursesId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TSubAreasCoursesDataTable cln = ((TSubAreasCoursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TSubAreasCoursesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubAreaCoursesId = base.Columns["SubAreaCoursesId"];
                this.columnSubAreaCoursesName = base.Columns["SubAreaCoursesName"];
                this.columnAreaCoursesId = base.Columns["AreaCoursesId"];
                this.columnFlagPopular = base.Columns["FlagPopular"];
                this.columnmetaDesc = base.Columns["metaDesc"];
                this.columnmetaKeywords = base.Columns["metaKeywords"];
                this.columnsubAreaTitle = base.Columns["subAreaTitle"];
                this.columnleadSlogan = base.Columns["leadSlogan"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubAreaCoursesId = new global::System.Data.DataColumn("SubAreaCoursesId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubAreaCoursesId);
                this.columnSubAreaCoursesName = new global::System.Data.DataColumn("SubAreaCoursesName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubAreaCoursesName);
                this.columnAreaCoursesId = new global::System.Data.DataColumn("AreaCoursesId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaCoursesId);
                this.columnFlagPopular = new global::System.Data.DataColumn("FlagPopular", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagPopular);
                this.columnmetaDesc = new global::System.Data.DataColumn("metaDesc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetaDesc);
                this.columnmetaKeywords = new global::System.Data.DataColumn("metaKeywords", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmetaKeywords);
                this.columnsubAreaTitle = new global::System.Data.DataColumn("subAreaTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubAreaTitle);
                this.columnleadSlogan = new global::System.Data.DataColumn("leadSlogan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnleadSlogan);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSubAreaCoursesId}, true));
                this.columnSubAreaCoursesId.AllowDBNull = false;
                this.columnSubAreaCoursesId.Unique = true;
                this.columnSubAreaCoursesName.AllowDBNull = false;
                this.columnSubAreaCoursesName.MaxLength = 50;
                this.columnAreaCoursesId.AllowDBNull = false;
                this.columnFlagPopular.AllowDBNull = false;
                this.columnmetaDesc.AllowDBNull = false;
                this.columnmetaDesc.MaxLength = 1500;
                this.columnmetaKeywords.AllowDBNull = false;
                this.columnmetaKeywords.MaxLength = 1500;
                this.columnsubAreaTitle.AllowDBNull = false;
                this.columnsubAreaTitle.MaxLength = 500;
                this.columnleadSlogan.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow NewTSubAreasCoursesRow() {
                return ((TSubAreasCoursesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TSubAreasCoursesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TSubAreasCoursesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TSubAreasCoursesRowChanged != null)) {
                    this.TSubAreasCoursesRowChanged(this, new TSubAreasCoursesRowChangeEvent(((TSubAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TSubAreasCoursesRowChanging != null)) {
                    this.TSubAreasCoursesRowChanging(this, new TSubAreasCoursesRowChangeEvent(((TSubAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TSubAreasCoursesRowDeleted != null)) {
                    this.TSubAreasCoursesRowDeleted(this, new TSubAreasCoursesRowChangeEvent(((TSubAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TSubAreasCoursesRowDeleting != null)) {
                    this.TSubAreasCoursesRowDeleting(this, new TSubAreasCoursesRowChangeEvent(((TSubAreasCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTSubAreasCoursesRow(TSubAreasCoursesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TSubAreasCoursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TTypeCoursesDataTable : global::System.Data.TypedTableBase<TTypeCoursesRow> {
            
            private global::System.Data.DataColumn columnCourseTypeId;
            
            private global::System.Data.DataColumn columnCourseTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesDataTable() {
                this.TableName = "TTypeCourses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TTypeCoursesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TTypeCoursesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseTypeIdColumn {
                get {
                    return this.columnCourseTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseTypeNameColumn {
                get {
                    return this.columnCourseTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesRow this[int index] {
                get {
                    return ((TTypeCoursesRow)(this.Rows[index]));
                }
            }
            
            public event TTypeCoursesRowChangeEventHandler TTypeCoursesRowChanging;
            
            public event TTypeCoursesRowChangeEventHandler TTypeCoursesRowChanged;
            
            public event TTypeCoursesRowChangeEventHandler TTypeCoursesRowDeleting;
            
            public event TTypeCoursesRowChangeEventHandler TTypeCoursesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTTypeCoursesRow(TTypeCoursesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesRow AddTTypeCoursesRow(string CourseTypeName) {
                TTypeCoursesRow rowTTypeCoursesRow = ((TTypeCoursesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CourseTypeName};
                rowTTypeCoursesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTTypeCoursesRow);
                return rowTTypeCoursesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesRow FindByCourseTypeId(long CourseTypeId) {
                return ((TTypeCoursesRow)(this.Rows.Find(new object[] {
                            CourseTypeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TTypeCoursesDataTable cln = ((TTypeCoursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TTypeCoursesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCourseTypeId = base.Columns["CourseTypeId"];
                this.columnCourseTypeName = base.Columns["CourseTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCourseTypeId = new global::System.Data.DataColumn("CourseTypeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseTypeId);
                this.columnCourseTypeName = new global::System.Data.DataColumn("CourseTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCourseTypeId}, true));
                this.columnCourseTypeId.AutoIncrement = true;
                this.columnCourseTypeId.AutoIncrementSeed = -1;
                this.columnCourseTypeId.AutoIncrementStep = -1;
                this.columnCourseTypeId.AllowDBNull = false;
                this.columnCourseTypeId.ReadOnly = true;
                this.columnCourseTypeId.Unique = true;
                this.columnCourseTypeName.AllowDBNull = false;
                this.columnCourseTypeName.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesRow NewTTypeCoursesRow() {
                return ((TTypeCoursesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TTypeCoursesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TTypeCoursesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TTypeCoursesRowChanged != null)) {
                    this.TTypeCoursesRowChanged(this, new TTypeCoursesRowChangeEvent(((TTypeCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TTypeCoursesRowChanging != null)) {
                    this.TTypeCoursesRowChanging(this, new TTypeCoursesRowChangeEvent(((TTypeCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TTypeCoursesRowDeleted != null)) {
                    this.TTypeCoursesRowDeleted(this, new TTypeCoursesRowChangeEvent(((TTypeCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TTypeCoursesRowDeleting != null)) {
                    this.TTypeCoursesRowDeleting(this, new TTypeCoursesRowChangeEvent(((TTypeCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTTypeCoursesRow(TTypeCoursesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TTypeCoursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TVisitorsMailsDataTable : global::System.Data.TypedTableBase<TVisitorsMailsRow> {
            
            private global::System.Data.DataColumn columnVisitorId;
            
            private global::System.Data.DataColumn columnVisitorMail;
            
            private global::System.Data.DataColumn columnVisitDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsDataTable() {
                this.TableName = "TVisitorsMails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TVisitorsMailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TVisitorsMailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorIdColumn {
                get {
                    return this.columnVisitorId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorMailColumn {
                get {
                    return this.columnVisitorMail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitDateColumn {
                get {
                    return this.columnVisitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsRow this[int index] {
                get {
                    return ((TVisitorsMailsRow)(this.Rows[index]));
                }
            }
            
            public event TVisitorsMailsRowChangeEventHandler TVisitorsMailsRowChanging;
            
            public event TVisitorsMailsRowChangeEventHandler TVisitorsMailsRowChanged;
            
            public event TVisitorsMailsRowChangeEventHandler TVisitorsMailsRowDeleting;
            
            public event TVisitorsMailsRowChangeEventHandler TVisitorsMailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTVisitorsMailsRow(TVisitorsMailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsRow AddTVisitorsMailsRow(string VisitorMail, System.DateTime VisitDate) {
                TVisitorsMailsRow rowTVisitorsMailsRow = ((TVisitorsMailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        VisitorMail,
                        VisitDate};
                rowTVisitorsMailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTVisitorsMailsRow);
                return rowTVisitorsMailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsRow FindByVisitorId(long VisitorId) {
                return ((TVisitorsMailsRow)(this.Rows.Find(new object[] {
                            VisitorId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TVisitorsMailsDataTable cln = ((TVisitorsMailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TVisitorsMailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVisitorId = base.Columns["VisitorId"];
                this.columnVisitorMail = base.Columns["VisitorMail"];
                this.columnVisitDate = base.Columns["VisitDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVisitorId = new global::System.Data.DataColumn("VisitorId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorId);
                this.columnVisitorMail = new global::System.Data.DataColumn("VisitorMail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorMail);
                this.columnVisitDate = new global::System.Data.DataColumn("VisitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVisitorId}, true));
                this.columnVisitorId.AutoIncrement = true;
                this.columnVisitorId.AutoIncrementSeed = -1;
                this.columnVisitorId.AutoIncrementStep = -1;
                this.columnVisitorId.AllowDBNull = false;
                this.columnVisitorId.ReadOnly = true;
                this.columnVisitorId.Unique = true;
                this.columnVisitorMail.AllowDBNull = false;
                this.columnVisitorMail.MaxLength = 50;
                this.columnVisitDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsRow NewTVisitorsMailsRow() {
                return ((TVisitorsMailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TVisitorsMailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TVisitorsMailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TVisitorsMailsRowChanged != null)) {
                    this.TVisitorsMailsRowChanged(this, new TVisitorsMailsRowChangeEvent(((TVisitorsMailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TVisitorsMailsRowChanging != null)) {
                    this.TVisitorsMailsRowChanging(this, new TVisitorsMailsRowChangeEvent(((TVisitorsMailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TVisitorsMailsRowDeleted != null)) {
                    this.TVisitorsMailsRowDeleted(this, new TVisitorsMailsRowChangeEvent(((TVisitorsMailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TVisitorsMailsRowDeleting != null)) {
                    this.TVisitorsMailsRowDeleting(this, new TVisitorsMailsRowChangeEvent(((TVisitorsMailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTVisitorsMailsRow(TVisitorsMailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TVisitorsMailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TVisitorsMessagesDataTable : global::System.Data.TypedTableBase<TVisitorsMessagesRow> {
            
            private global::System.Data.DataColumn columnMessageId;
            
            private global::System.Data.DataColumn columnVisitorName;
            
            private global::System.Data.DataColumn columnVisitorLastName;
            
            private global::System.Data.DataColumn columnVisitorMail;
            
            private global::System.Data.DataColumn columnVisitorCity;
            
            private global::System.Data.DataColumn columnVisitorStreet;
            
            private global::System.Data.DataColumn columnVisitorPhone;
            
            private global::System.Data.DataColumn columnVisitorAge;
            
            private global::System.Data.DataColumn columnVisitorSex;
            
            private global::System.Data.DataColumn columnDateSent;
            
            private global::System.Data.DataColumn columnCategoryId;
            
            private global::System.Data.DataColumn columnAreaId;
            
            private global::System.Data.DataColumn columnSubAreaId;
            
            private global::System.Data.DataColumn columnRegionId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesDataTable() {
                this.TableName = "TVisitorsMessages";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TVisitorsMessagesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TVisitorsMessagesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageIdColumn {
                get {
                    return this.columnMessageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorNameColumn {
                get {
                    return this.columnVisitorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorLastNameColumn {
                get {
                    return this.columnVisitorLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorMailColumn {
                get {
                    return this.columnVisitorMail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorCityColumn {
                get {
                    return this.columnVisitorCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorStreetColumn {
                get {
                    return this.columnVisitorStreet;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorPhoneColumn {
                get {
                    return this.columnVisitorPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorAgeColumn {
                get {
                    return this.columnVisitorAge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VisitorSexColumn {
                get {
                    return this.columnVisitorSex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateSentColumn {
                get {
                    return this.columnDateSent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CategoryIdColumn {
                get {
                    return this.columnCategoryId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AreaIdColumn {
                get {
                    return this.columnAreaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubAreaIdColumn {
                get {
                    return this.columnSubAreaId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIdColumn {
                get {
                    return this.columnRegionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesRow this[int index] {
                get {
                    return ((TVisitorsMessagesRow)(this.Rows[index]));
                }
            }
            
            public event TVisitorsMessagesRowChangeEventHandler TVisitorsMessagesRowChanging;
            
            public event TVisitorsMessagesRowChangeEventHandler TVisitorsMessagesRowChanged;
            
            public event TVisitorsMessagesRowChangeEventHandler TVisitorsMessagesRowDeleting;
            
            public event TVisitorsMessagesRowChangeEventHandler TVisitorsMessagesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTVisitorsMessagesRow(TVisitorsMessagesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesRow AddTVisitorsMessagesRow(string VisitorName, string VisitorLastName, string VisitorMail, string VisitorCity, string VisitorStreet, string VisitorPhone, string VisitorAge, string VisitorSex, System.DateTime DateSent, long CategoryId, long AreaId, long SubAreaId, long RegionId) {
                TVisitorsMessagesRow rowTVisitorsMessagesRow = ((TVisitorsMessagesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        VisitorName,
                        VisitorLastName,
                        VisitorMail,
                        VisitorCity,
                        VisitorStreet,
                        VisitorPhone,
                        VisitorAge,
                        VisitorSex,
                        DateSent,
                        CategoryId,
                        AreaId,
                        SubAreaId,
                        RegionId};
                rowTVisitorsMessagesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTVisitorsMessagesRow);
                return rowTVisitorsMessagesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesRow FindByMessageId(long MessageId) {
                return ((TVisitorsMessagesRow)(this.Rows.Find(new object[] {
                            MessageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TVisitorsMessagesDataTable cln = ((TVisitorsMessagesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TVisitorsMessagesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMessageId = base.Columns["MessageId"];
                this.columnVisitorName = base.Columns["VisitorName"];
                this.columnVisitorLastName = base.Columns["VisitorLastName"];
                this.columnVisitorMail = base.Columns["VisitorMail"];
                this.columnVisitorCity = base.Columns["VisitorCity"];
                this.columnVisitorStreet = base.Columns["VisitorStreet"];
                this.columnVisitorPhone = base.Columns["VisitorPhone"];
                this.columnVisitorAge = base.Columns["VisitorAge"];
                this.columnVisitorSex = base.Columns["VisitorSex"];
                this.columnDateSent = base.Columns["DateSent"];
                this.columnCategoryId = base.Columns["CategoryId"];
                this.columnAreaId = base.Columns["AreaId"];
                this.columnSubAreaId = base.Columns["SubAreaId"];
                this.columnRegionId = base.Columns["RegionId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMessageId = new global::System.Data.DataColumn("MessageId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessageId);
                this.columnVisitorName = new global::System.Data.DataColumn("VisitorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorName);
                this.columnVisitorLastName = new global::System.Data.DataColumn("VisitorLastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorLastName);
                this.columnVisitorMail = new global::System.Data.DataColumn("VisitorMail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorMail);
                this.columnVisitorCity = new global::System.Data.DataColumn("VisitorCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorCity);
                this.columnVisitorStreet = new global::System.Data.DataColumn("VisitorStreet", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorStreet);
                this.columnVisitorPhone = new global::System.Data.DataColumn("VisitorPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorPhone);
                this.columnVisitorAge = new global::System.Data.DataColumn("VisitorAge", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorAge);
                this.columnVisitorSex = new global::System.Data.DataColumn("VisitorSex", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVisitorSex);
                this.columnDateSent = new global::System.Data.DataColumn("DateSent", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateSent);
                this.columnCategoryId = new global::System.Data.DataColumn("CategoryId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryId);
                this.columnAreaId = new global::System.Data.DataColumn("AreaId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAreaId);
                this.columnSubAreaId = new global::System.Data.DataColumn("SubAreaId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubAreaId);
                this.columnRegionId = new global::System.Data.DataColumn("RegionId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMessageId}, true));
                this.columnMessageId.AutoIncrement = true;
                this.columnMessageId.AutoIncrementSeed = -1;
                this.columnMessageId.AutoIncrementStep = -1;
                this.columnMessageId.AllowDBNull = false;
                this.columnMessageId.ReadOnly = true;
                this.columnMessageId.Unique = true;
                this.columnVisitorName.AllowDBNull = false;
                this.columnVisitorName.MaxLength = 50;
                this.columnVisitorLastName.AllowDBNull = false;
                this.columnVisitorLastName.MaxLength = 50;
                this.columnVisitorMail.AllowDBNull = false;
                this.columnVisitorMail.MaxLength = 50;
                this.columnVisitorCity.AllowDBNull = false;
                this.columnVisitorCity.MaxLength = 50;
                this.columnVisitorStreet.AllowDBNull = false;
                this.columnVisitorStreet.MaxLength = 50;
                this.columnVisitorPhone.AllowDBNull = false;
                this.columnVisitorPhone.MaxLength = 50;
                this.columnVisitorAge.AllowDBNull = false;
                this.columnVisitorAge.MaxLength = 50;
                this.columnVisitorSex.AllowDBNull = false;
                this.columnVisitorSex.MaxLength = 4;
                this.columnDateSent.AllowDBNull = false;
                this.columnCategoryId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesRow NewTVisitorsMessagesRow() {
                return ((TVisitorsMessagesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TVisitorsMessagesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TVisitorsMessagesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TVisitorsMessagesRowChanged != null)) {
                    this.TVisitorsMessagesRowChanged(this, new TVisitorsMessagesRowChangeEvent(((TVisitorsMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TVisitorsMessagesRowChanging != null)) {
                    this.TVisitorsMessagesRowChanging(this, new TVisitorsMessagesRowChangeEvent(((TVisitorsMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TVisitorsMessagesRowDeleted != null)) {
                    this.TVisitorsMessagesRowDeleted(this, new TVisitorsMessagesRowChangeEvent(((TVisitorsMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TVisitorsMessagesRowDeleting != null)) {
                    this.TVisitorsMessagesRowDeleting(this, new TVisitorsMessagesRowChangeEvent(((TVisitorsMessagesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTVisitorsMessagesRow(TVisitorsMessagesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TVisitorsMessagesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TYoramCatsDataTable : global::System.Data.TypedTableBase<TYoramCatsRow> {
            
            private global::System.Data.DataColumn columntheStudentSubCatId;
            
            private global::System.Data.DataColumn columnyoramCatId;
            
            private global::System.Data.DataColumn columnyoramCatName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsDataTable() {
                this.TableName = "TYoramCats";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TYoramCatsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TYoramCatsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn theStudentSubCatIdColumn {
                get {
                    return this.columntheStudentSubCatId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yoramCatIdColumn {
                get {
                    return this.columnyoramCatId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn yoramCatNameColumn {
                get {
                    return this.columnyoramCatName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsRow this[int index] {
                get {
                    return ((TYoramCatsRow)(this.Rows[index]));
                }
            }
            
            public event TYoramCatsRowChangeEventHandler TYoramCatsRowChanging;
            
            public event TYoramCatsRowChangeEventHandler TYoramCatsRowChanged;
            
            public event TYoramCatsRowChangeEventHandler TYoramCatsRowDeleting;
            
            public event TYoramCatsRowChangeEventHandler TYoramCatsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTYoramCatsRow(TYoramCatsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsRow AddTYoramCatsRow(int theStudentSubCatId, int yoramCatId, string yoramCatName) {
                TYoramCatsRow rowTYoramCatsRow = ((TYoramCatsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        theStudentSubCatId,
                        yoramCatId,
                        yoramCatName};
                rowTYoramCatsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTYoramCatsRow);
                return rowTYoramCatsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsRow FindBytheStudentSubCatIdyoramCatId(int theStudentSubCatId, int yoramCatId) {
                return ((TYoramCatsRow)(this.Rows.Find(new object[] {
                            theStudentSubCatId,
                            yoramCatId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TYoramCatsDataTable cln = ((TYoramCatsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TYoramCatsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntheStudentSubCatId = base.Columns["theStudentSubCatId"];
                this.columnyoramCatId = base.Columns["yoramCatId"];
                this.columnyoramCatName = base.Columns["yoramCatName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntheStudentSubCatId = new global::System.Data.DataColumn("theStudentSubCatId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntheStudentSubCatId);
                this.columnyoramCatId = new global::System.Data.DataColumn("yoramCatId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyoramCatId);
                this.columnyoramCatName = new global::System.Data.DataColumn("yoramCatName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnyoramCatName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntheStudentSubCatId,
                                this.columnyoramCatId}, true));
                this.columntheStudentSubCatId.AllowDBNull = false;
                this.columnyoramCatId.AllowDBNull = false;
                this.columnyoramCatName.AllowDBNull = false;
                this.columnyoramCatName.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsRow NewTYoramCatsRow() {
                return ((TYoramCatsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TYoramCatsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TYoramCatsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TYoramCatsRowChanged != null)) {
                    this.TYoramCatsRowChanged(this, new TYoramCatsRowChangeEvent(((TYoramCatsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TYoramCatsRowChanging != null)) {
                    this.TYoramCatsRowChanging(this, new TYoramCatsRowChangeEvent(((TYoramCatsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TYoramCatsRowDeleted != null)) {
                    this.TYoramCatsRowDeleted(this, new TYoramCatsRowChangeEvent(((TYoramCatsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TYoramCatsRowDeleting != null)) {
                    this.TYoramCatsRowDeleting(this, new TYoramCatsRowChangeEvent(((TYoramCatsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTYoramCatsRow(TYoramCatsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TYoramCatsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TLecturesAndCoursesDataTable : global::System.Data.TypedTableBase<TLecturesAndCoursesRow> {
            
            private global::System.Data.DataColumn columnLecturerId;
            
            private global::System.Data.DataColumn columnCourseId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesDataTable() {
                this.TableName = "TLecturesAndCourses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TLecturesAndCoursesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TLecturesAndCoursesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LecturerIdColumn {
                get {
                    return this.columnLecturerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIdColumn {
                get {
                    return this.columnCourseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow this[int index] {
                get {
                    return ((TLecturesAndCoursesRow)(this.Rows[index]));
                }
            }
            
            public event TLecturesAndCoursesRowChangeEventHandler TLecturesAndCoursesRowChanging;
            
            public event TLecturesAndCoursesRowChangeEventHandler TLecturesAndCoursesRowChanged;
            
            public event TLecturesAndCoursesRowChangeEventHandler TLecturesAndCoursesRowDeleting;
            
            public event TLecturesAndCoursesRowChangeEventHandler TLecturesAndCoursesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTLecturesAndCoursesRow(TLecturesAndCoursesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow AddTLecturesAndCoursesRow(TLecturersRow parentTLecturersRowByFK_TLecturesAndCourses_TLecturers, TCoursesRow parentTCoursesRowByFK_TLecturesAndCourses_TCourses) {
                TLecturesAndCoursesRow rowTLecturesAndCoursesRow = ((TLecturesAndCoursesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null};
                if ((parentTLecturersRowByFK_TLecturesAndCourses_TLecturers != null)) {
                    columnValuesArray[0] = parentTLecturersRowByFK_TLecturesAndCourses_TLecturers[0];
                }
                if ((parentTCoursesRowByFK_TLecturesAndCourses_TCourses != null)) {
                    columnValuesArray[1] = parentTCoursesRowByFK_TLecturesAndCourses_TCourses[0];
                }
                rowTLecturesAndCoursesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTLecturesAndCoursesRow);
                return rowTLecturesAndCoursesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow FindByLecturerIdCourseId(long LecturerId, long CourseId) {
                return ((TLecturesAndCoursesRow)(this.Rows.Find(new object[] {
                            LecturerId,
                            CourseId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TLecturesAndCoursesDataTable cln = ((TLecturesAndCoursesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TLecturesAndCoursesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLecturerId = base.Columns["LecturerId"];
                this.columnCourseId = base.Columns["CourseId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLecturerId = new global::System.Data.DataColumn("LecturerId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLecturerId);
                this.columnCourseId = new global::System.Data.DataColumn("CourseId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLecturerId,
                                this.columnCourseId}, true));
                this.columnLecturerId.AllowDBNull = false;
                this.columnCourseId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow NewTLecturesAndCoursesRow() {
                return ((TLecturesAndCoursesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TLecturesAndCoursesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TLecturesAndCoursesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TLecturesAndCoursesRowChanged != null)) {
                    this.TLecturesAndCoursesRowChanged(this, new TLecturesAndCoursesRowChangeEvent(((TLecturesAndCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TLecturesAndCoursesRowChanging != null)) {
                    this.TLecturesAndCoursesRowChanging(this, new TLecturesAndCoursesRowChangeEvent(((TLecturesAndCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TLecturesAndCoursesRowDeleted != null)) {
                    this.TLecturesAndCoursesRowDeleted(this, new TLecturesAndCoursesRowChangeEvent(((TLecturesAndCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TLecturesAndCoursesRowDeleting != null)) {
                    this.TLecturesAndCoursesRowDeleting(this, new TLecturesAndCoursesRowChangeEvent(((TLecturesAndCoursesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTLecturesAndCoursesRow(TLecturesAndCoursesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StudyingDataSet ds = new StudyingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TLecturesAndCoursesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TableEstablishmentsOpenDateRow : global::System.Data.DataRow {
            
            private TableEstablishmentsOpenDateDataTable tableTableEstablishmentsOpenDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TableEstablishmentsOpenDateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTableEstablishmentsOpenDate = ((TableEstablishmentsOpenDateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long OpenDateId {
                get {
                    return ((long)(this[this.tableTableEstablishmentsOpenDate.OpenDateIdColumn]));
                }
                set {
                    this[this.tableTableEstablishmentsOpenDate.OpenDateIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime OpenDateValue {
                get {
                    return ((global::System.DateTime)(this[this.tableTableEstablishmentsOpenDate.OpenDateValueColumn]));
                }
                set {
                    this[this.tableTableEstablishmentsOpenDate.OpenDateValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolId {
                get {
                    return ((long)(this[this.tableTableEstablishmentsOpenDate.SchoolIdColumn]));
                }
                set {
                    this[this.tableTableEstablishmentsOpenDate.SchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableTableEstablishmentsOpenDate.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'TableEstablishmentsOpenDate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTableEstablishmentsOpenDate.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TableEstablishmentsOpenDate_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TableEstablishmentsOpenDate_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableTableEstablishmentsOpenDate.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableTableEstablishmentsOpenDate.CommentColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TYoramSchoolsRow : global::System.Data.DataRow {
            
            private TYoramSchoolsDataTable tableTYoramSchools;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TYoramSchoolsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTYoramSchools = ((TYoramSchoolsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int theStudentSchoolId {
                get {
                    return ((int)(this[this.tableTYoramSchools.theStudentSchoolIdColumn]));
                }
                set {
                    this[this.tableTYoramSchools.theStudentSchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yoramSchoolId {
                get {
                    return ((int)(this[this.tableTYoramSchools.yoramSchoolIdColumn]));
                }
                set {
                    this[this.tableTYoramSchools.yoramSchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yoramSchoolName {
                get {
                    return ((string)(this[this.tableTYoramSchools.yoramSchoolNameColumn]));
                }
                set {
                    this[this.tableTYoramSchools.yoramSchoolNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TAdministratorsRow : global::System.Data.DataRow {
            
            private TAdministratorsDataTable tableTAdministrators;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAdministratorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTAdministrators = ((TAdministratorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AdministratorId {
                get {
                    return ((int)(this[this.tableTAdministrators.AdministratorIdColumn]));
                }
                set {
                    this[this.tableTAdministrators.AdministratorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdministratorUserName {
                get {
                    return ((string)(this[this.tableTAdministrators.AdministratorUserNameColumn]));
                }
                set {
                    this[this.tableTAdministrators.AdministratorUserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdministratorPassword {
                get {
                    return ((string)(this[this.tableTAdministrators.AdministratorPasswordColumn]));
                }
                set {
                    this[this.tableTAdministrators.AdministratorPasswordColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TAdvertisingEstablishmentsRow : global::System.Data.DataRow {
            
            private TAdvertisingEstablishmentsDataTable tableTAdvertisingEstablishments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAdvertisingEstablishmentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTAdvertisingEstablishments = ((TAdvertisingEstablishmentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AdvertisingId {
                get {
                    return ((long)(this[this.tableTAdvertisingEstablishments.AdvertisingIdColumn]));
                }
                set {
                    this[this.tableTAdvertisingEstablishments.AdvertisingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EstablishmentId {
                get {
                    return ((long)(this[this.tableTAdvertisingEstablishments.EstablishmentIdColumn]));
                }
                set {
                    this[this.tableTAdvertisingEstablishments.EstablishmentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CategoryCourses {
                get {
                    try {
                        return ((long)(this[this.tableTAdvertisingEstablishments.CategoryCoursesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryCourses\' in table \'TAdvertisingEstablishments\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTAdvertisingEstablishments.CategoryCoursesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AreaCourses {
                get {
                    try {
                        return ((long)(this[this.tableTAdvertisingEstablishments.AreaCoursesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaCourses\' in table \'TAdvertisingEstablishments\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableTAdvertisingEstablishments.AreaCoursesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SubAreaCourses {
                get {
                    try {
                        return ((long)(this[this.tableTAdvertisingEstablishments.SubAreaCoursesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubAreaCourses\' in table \'TAdvertisingEstablishments\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTAdvertisingEstablishments.SubAreaCoursesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdvertisingSlogan {
                get {
                    return ((string)(this[this.tableTAdvertisingEstablishments.AdvertisingSloganColumn]));
                }
                set {
                    this[this.tableTAdvertisingEstablishments.AdvertisingSloganColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool AdvertisingStatus {
                get {
                    return ((bool)(this[this.tableTAdvertisingEstablishments.AdvertisingStatusColumn]));
                }
                set {
                    this[this.tableTAdvertisingEstablishments.AdvertisingStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TAdvertisingEstablishments_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TAdvertisingEstablishments_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryCoursesNull() {
                return this.IsNull(this.tableTAdvertisingEstablishments.CategoryCoursesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryCoursesNull() {
                this[this.tableTAdvertisingEstablishments.CategoryCoursesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaCoursesNull() {
                return this.IsNull(this.tableTAdvertisingEstablishments.AreaCoursesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaCoursesNull() {
                this[this.tableTAdvertisingEstablishments.AreaCoursesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaCoursesNull() {
                return this.IsNull(this.tableTAdvertisingEstablishments.SubAreaCoursesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaCoursesNull() {
                this[this.tableTAdvertisingEstablishments.SubAreaCoursesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TAreasCoursesRow : global::System.Data.DataRow {
            
            private TAreasCoursesDataTable tableTAreasCourses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TAreasCoursesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTAreasCourses = ((TAreasCoursesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long DomainId {
                get {
                    return ((long)(this[this.tableTAreasCourses.DomainIdColumn]));
                }
                set {
                    this[this.tableTAreasCourses.DomainIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CategoryId {
                get {
                    return ((long)(this[this.tableTAreasCourses.CategoryIdColumn]));
                }
                set {
                    this[this.tableTAreasCourses.CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DomainName {
                get {
                    return ((string)(this[this.tableTAreasCourses.DomainNameColumn]));
                }
                set {
                    this[this.tableTAreasCourses.DomainNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommentDomain {
                get {
                    try {
                        return ((string)(this[this.tableTAreasCourses.CommentDomainColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommentDomain\' in table \'TAreasCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTAreasCourses.CommentDomainColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metaDesc {
                get {
                    return ((string)(this[this.tableTAreasCourses.metaDescColumn]));
                }
                set {
                    this[this.tableTAreasCourses.metaDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metaKeywords {
                get {
                    return ((string)(this[this.tableTAreasCourses.metaKeywordsColumn]));
                }
                set {
                    this[this.tableTAreasCourses.metaKeywordsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string areaTitle {
                get {
                    return ((string)(this[this.tableTAreasCourses.areaTitleColumn]));
                }
                set {
                    this[this.tableTAreasCourses.areaTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string leadSlogan {
                get {
                    return ((string)(this[this.tableTAreasCourses.leadSloganColumn]));
                }
                set {
                    this[this.tableTAreasCourses.leadSloganColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow TCategoriesRow {
                get {
                    return ((TCategoriesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TAreasCourses_TCategories"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TAreasCourses_TCategories"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentDomainNull() {
                return this.IsNull(this.tableTAreasCourses.CommentDomainColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentDomainNull() {
                this[this.tableTAreasCourses.CommentDomainColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow[] GetTCoursesRows() {
                if ((this.Table.ChildRelations["FK_TCourses_TDomainsCourses"] == null)) {
                    return new TCoursesRow[0];
                }
                else {
                    return ((TCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TCourses_TDomainsCourses"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow[] GetTSubAreasCoursesRows() {
                if ((this.Table.ChildRelations["FK_TSubAreasCourses_TAreasCourses"] == null)) {
                    return new TSubAreasCoursesRow[0];
                }
                else {
                    return ((TSubAreasCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TSubAreasCourses_TAreasCourses"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow[] GetTArticlesRows() {
                if ((this.Table.ChildRelations["TAreasCourses_TArticles"] == null)) {
                    return new TArticlesRow[0];
                }
                else {
                    return ((TArticlesRow[])(base.GetChildRows(this.Table.ChildRelations["TAreasCourses_TArticles"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TArticlesRow : global::System.Data.DataRow {
            
            private TArticlesDataTable tableTArticles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TArticlesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTArticles = ((TArticlesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ArticleId {
                get {
                    return ((long)(this[this.tableTArticles.ArticleIdColumn]));
                }
                set {
                    this[this.tableTArticles.ArticleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleAuthorName {
                get {
                    return ((string)(this[this.tableTArticles.ArticleAuthorNameColumn]));
                }
                set {
                    this[this.tableTArticles.ArticleAuthorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long EstablishmentId {
                get {
                    return ((long)(this[this.tableTArticles.EstablishmentIdColumn]));
                }
                set {
                    this[this.tableTArticles.EstablishmentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CategoryId {
                get {
                    try {
                        return ((long)(this[this.tableTArticles.CategoryIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryId\' in table \'TArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTArticles.CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AreaId {
                get {
                    try {
                        return ((long)(this[this.tableTArticles.AreaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaId\' in table \'TArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTArticles.AreaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SubAreaId {
                get {
                    try {
                        return ((long)(this[this.tableTArticles.SubAreaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubAreaId\' in table \'TArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTArticles.SubAreaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleTitle {
                get {
                    return ((string)(this[this.tableTArticles.ArticleTitleColumn]));
                }
                set {
                    this[this.tableTArticles.ArticleTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleText {
                get {
                    return ((string)(this[this.tableTArticles.ArticleTextColumn]));
                }
                set {
                    this[this.tableTArticles.ArticleTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleAuthorLink {
                get {
                    try {
                        return ((string)(this[this.tableTArticles.ArticleAuthorLinkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArticleAuthorLink\' in table \'TArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTArticles.ArticleAuthorLinkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArticleImageFileName {
                get {
                    try {
                        return ((string)(this[this.tableTArticles.ArticleImageFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArticleImageFileName\' in table \'TArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTArticles.ArticleImageFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ArticleDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTArticles.ArticleDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArticleDate\' in table \'TArticles\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTArticles.ArticleDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isMainInCat {
                get {
                    return ((bool)(this[this.tableTArticles.isMainInCatColumn]));
                }
                set {
                    this[this.tableTArticles.isMainInCatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow TCategoriesRow {
                get {
                    return ((TCategoriesRow)(this.GetParentRow(this.Table.ParentRelations["TCategories_TArticles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TCategories_TArticles"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow TAreasCoursesRow {
                get {
                    return ((TAreasCoursesRow)(this.GetParentRow(this.Table.ParentRelations["TAreasCourses_TArticles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TAreasCourses_TArticles"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow TSubAreasCoursesRow {
                get {
                    return ((TSubAreasCoursesRow)(this.GetParentRow(this.Table.ParentRelations["TSubAreasCourses_TArticles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TSubAreasCourses_TArticles"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["TEstablishments_TArticles"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TEstablishments_TArticles"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryIdNull() {
                return this.IsNull(this.tableTArticles.CategoryIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryIdNull() {
                this[this.tableTArticles.CategoryIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaIdNull() {
                return this.IsNull(this.tableTArticles.AreaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaIdNull() {
                this[this.tableTArticles.AreaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaIdNull() {
                return this.IsNull(this.tableTArticles.SubAreaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaIdNull() {
                this[this.tableTArticles.SubAreaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleAuthorLinkNull() {
                return this.IsNull(this.tableTArticles.ArticleAuthorLinkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleAuthorLinkNull() {
                this[this.tableTArticles.ArticleAuthorLinkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleImageFileNameNull() {
                return this.IsNull(this.tableTArticles.ArticleImageFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleImageFileNameNull() {
                this[this.tableTArticles.ArticleImageFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArticleDateNull() {
                return this.IsNull(this.tableTArticles.ArticleDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArticleDateNull() {
                this[this.tableTArticles.ArticleDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCategoriesRow : global::System.Data.DataRow {
            
            private TCategoriesDataTable tableTCategories;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCategoriesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCategories = ((TCategoriesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CategoryId {
                get {
                    return ((long)(this[this.tableTCategories.CategoryIdColumn]));
                }
                set {
                    this[this.tableTCategories.CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryName {
                get {
                    return ((string)(this[this.tableTCategories.CategoryNameColumn]));
                }
                set {
                    this[this.tableTCategories.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoeyDesc {
                get {
                    return ((string)(this[this.tableTCategories.CategoeyDescColumn]));
                }
                set {
                    this[this.tableTCategories.CategoeyDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryKeywords {
                get {
                    return ((string)(this[this.tableTCategories.CategoryKeywordsColumn]));
                }
                set {
                    this[this.tableTCategories.CategoryKeywordsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CategoryTitle {
                get {
                    return ((string)(this[this.tableTCategories.CategoryTitleColumn]));
                }
                set {
                    this[this.tableTCategories.CategoryTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow[] GetTAreasCoursesRows() {
                if ((this.Table.ChildRelations["FK_TAreasCourses_TCategories"] == null)) {
                    return new TAreasCoursesRow[0];
                }
                else {
                    return ((TAreasCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TAreasCourses_TCategories"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow[] GetTCoursesRows() {
                if ((this.Table.ChildRelations["FK_TCourses_TCategories"] == null)) {
                    return new TCoursesRow[0];
                }
                else {
                    return ((TCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TCourses_TCategories"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow[] GetTArticlesRows() {
                if ((this.Table.ChildRelations["TCategories_TArticles"] == null)) {
                    return new TArticlesRow[0];
                }
                else {
                    return ((TArticlesRow[])(base.GetChildRows(this.Table.ChildRelations["TCategories_TArticles"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TCoursesRow : global::System.Data.DataRow {
            
            private TCoursesDataTable tableTCourses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TCoursesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTCourses = ((TCoursesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CourseId {
                get {
                    return ((long)(this[this.tableTCourses.CourseIdColumn]));
                }
                set {
                    this[this.tableTCourses.CourseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CategoryCourse {
                get {
                    return ((long)(this[this.tableTCourses.CategoryCourseColumn]));
                }
                set {
                    this[this.tableTCourses.CategoryCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AreaCourse {
                get {
                    return ((long)(this[this.tableTCourses.AreaCourseColumn]));
                }
                set {
                    this[this.tableTCourses.AreaCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SubAreaCourse {
                get {
                    try {
                        return ((long)(this[this.tableTCourses.SubAreaCourseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubAreaCourse\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.SubAreaCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolIdCourse {
                get {
                    return ((long)(this[this.tableTCourses.SchoolIdCourseColumn]));
                }
                set {
                    this[this.tableTCourses.SchoolIdCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CousePhone {
                get {
                    try {
                        return ((string)(this[this.tableTCourses.CousePhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CousePhone\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.CousePhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseDuration {
                get {
                    try {
                        return ((string)(this[this.tableTCourses.CourseDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseDuration\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.CourseDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseRequirements {
                get {
                    try {
                        return ((string)(this[this.tableTCourses.CourseRequirementsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseRequirements\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.CourseRequirementsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CourseMatriculationMin {
                get {
                    try {
                        return ((float)(this[this.tableTCourses.CourseMatriculationMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseMatriculationMin\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.CourseMatriculationMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float CoursePsychometricMin {
                get {
                    try {
                        return ((float)(this[this.tableTCourses.CoursePsychometricMinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoursePsychometricMin\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.CoursePsychometricMinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseDescription {
                get {
                    try {
                        return ((string)(this[this.tableTCourses.CourseDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseDescription\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.CourseDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseName {
                get {
                    return ((string)(this[this.tableTCourses.CourseNameColumn]));
                }
                set {
                    this[this.tableTCourses.CourseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Diploma {
                get {
                    try {
                        return ((string)(this[this.tableTCourses.DiplomaColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Diploma\' in table \'TCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTCourses.DiplomaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isInHomePage {
                get {
                    return ((bool)(this[this.tableTCourses.isInHomePageColumn]));
                }
                set {
                    this[this.tableTCourses.isInHomePageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow TCategoriesRow {
                get {
                    return ((TCategoriesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TCourses_TCategories"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TCourses_TCategories"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow TAreasCoursesRow {
                get {
                    return ((TAreasCoursesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TCourses_TDomainsCourses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TCourses_TDomainsCourses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TCourses_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TCourses_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow TSubAreasCoursesRow {
                get {
                    return ((TSubAreasCoursesRow)(this.GetParentRow(this.Table.ParentRelations["TSubAreasCourses_TCourses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TSubAreasCourses_TCourses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaCourseNull() {
                return this.IsNull(this.tableTCourses.SubAreaCourseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaCourseNull() {
                this[this.tableTCourses.SubAreaCourseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCousePhoneNull() {
                return this.IsNull(this.tableTCourses.CousePhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCousePhoneNull() {
                this[this.tableTCourses.CousePhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseDurationNull() {
                return this.IsNull(this.tableTCourses.CourseDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseDurationNull() {
                this[this.tableTCourses.CourseDurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseRequirementsNull() {
                return this.IsNull(this.tableTCourses.CourseRequirementsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseRequirementsNull() {
                this[this.tableTCourses.CourseRequirementsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseMatriculationMinNull() {
                return this.IsNull(this.tableTCourses.CourseMatriculationMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseMatriculationMinNull() {
                this[this.tableTCourses.CourseMatriculationMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCoursePsychometricMinNull() {
                return this.IsNull(this.tableTCourses.CoursePsychometricMinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCoursePsychometricMinNull() {
                this[this.tableTCourses.CoursePsychometricMinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseDescriptionNull() {
                return this.IsNull(this.tableTCourses.CourseDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseDescriptionNull() {
                this[this.tableTCourses.CourseDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiplomaNull() {
                return this.IsNull(this.tableTCourses.DiplomaColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiplomaNull() {
                this[this.tableTCourses.DiplomaColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow[] GetTMessagesRows() {
                if ((this.Table.ChildRelations["FK_TMessages_TCourses"] == null)) {
                    return new TMessagesRow[0];
                }
                else {
                    return ((TMessagesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TMessages_TCourses"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow[] GetTLecturesAndCoursesRows() {
                if ((this.Table.ChildRelations["FK_TLecturesAndCourses_TCourses"] == null)) {
                    return new TLecturesAndCoursesRow[0];
                }
                else {
                    return ((TLecturesAndCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TLecturesAndCourses_TCourses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TEstablishmentsRow : global::System.Data.DataRow {
            
            private TEstablishmentsDataTable tableTEstablishments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TEstablishmentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTEstablishments = ((TEstablishmentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolId {
                get {
                    return ((long)(this[this.tableTEstablishments.SchoolIdColumn]));
                }
                set {
                    this[this.tableTEstablishments.SchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RegionId {
                get {
                    return ((long)(this[this.tableTEstablishments.RegionIdColumn]));
                }
                set {
                    this[this.tableTEstablishments.RegionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolAddress {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.SchoolAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolAddress\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.SchoolAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolMail_1 {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.SchoolMail_1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolMail_1\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.SchoolMail_1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolMail_2 {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.SchoolMail_2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolMail_2\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.SchoolMail_2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolInternetSite {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.SchoolInternetSiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolInternetSite\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.SchoolInternetSiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolName {
                get {
                    return ((string)(this[this.tableTEstablishments.SchoolNameColumn]));
                }
                set {
                    this[this.tableTEstablishments.SchoolNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolLogoImageFile {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.SchoolLogoImageFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolLogoImageFile\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.SchoolLogoImageFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MainSchoolId {
                get {
                    try {
                        return ((long)(this[this.tableTEstablishments.MainSchoolIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MainSchoolId\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.MainSchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmallComment {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.SmallCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SmallComment\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.SmallCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BigComment {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.BigCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BigComment\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.BigCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StudentsNumber {
                get {
                    return ((int)(this[this.tableTEstablishments.StudentsNumberColumn]));
                }
                set {
                    this[this.tableTEstablishments.StudentsNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int orderField {
                get {
                    return ((int)(this[this.tableTEstablishments.orderFieldColumn]));
                }
                set {
                    this[this.tableTEstablishments.orderFieldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string smallLogo {
                get {
                    return ((string)(this[this.tableTEstablishments.smallLogoColumn]));
                }
                set {
                    this[this.tableTEstablishments.smallLogoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lastReviewTitle {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.lastReviewTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lastReviewTitle\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.lastReviewTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lastReviewText {
                get {
                    try {
                        return ((string)(this[this.tableTEstablishments.lastReviewTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lastReviewText\' in table \'TEstablishments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTEstablishments.lastReviewTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SchoolTitle {
                get {
                    return ((string)(this[this.tableTEstablishments.SchoolTitleColumn]));
                }
                set {
                    this[this.tableTEstablishments.SchoolTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRow TRegionsRow {
                get {
                    return ((TRegionsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TEstablishments_TRegions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TEstablishments_TRegions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolAddressNull() {
                return this.IsNull(this.tableTEstablishments.SchoolAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolAddressNull() {
                this[this.tableTEstablishments.SchoolAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolMail_1Null() {
                return this.IsNull(this.tableTEstablishments.SchoolMail_1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolMail_1Null() {
                this[this.tableTEstablishments.SchoolMail_1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolMail_2Null() {
                return this.IsNull(this.tableTEstablishments.SchoolMail_2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolMail_2Null() {
                this[this.tableTEstablishments.SchoolMail_2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolInternetSiteNull() {
                return this.IsNull(this.tableTEstablishments.SchoolInternetSiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolInternetSiteNull() {
                this[this.tableTEstablishments.SchoolInternetSiteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolLogoImageFileNull() {
                return this.IsNull(this.tableTEstablishments.SchoolLogoImageFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolLogoImageFileNull() {
                this[this.tableTEstablishments.SchoolLogoImageFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMainSchoolIdNull() {
                return this.IsNull(this.tableTEstablishments.MainSchoolIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMainSchoolIdNull() {
                this[this.tableTEstablishments.MainSchoolIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmallCommentNull() {
                return this.IsNull(this.tableTEstablishments.SmallCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmallCommentNull() {
                this[this.tableTEstablishments.SmallCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBigCommentNull() {
                return this.IsNull(this.tableTEstablishments.BigCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBigCommentNull() {
                this[this.tableTEstablishments.BigCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslastReviewTitleNull() {
                return this.IsNull(this.tableTEstablishments.lastReviewTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlastReviewTitleNull() {
                this[this.tableTEstablishments.lastReviewTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslastReviewTextNull() {
                return this.IsNull(this.tableTEstablishments.lastReviewTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlastReviewTextNull() {
                this[this.tableTEstablishments.lastReviewTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRow[] GetTableEstablishmentsOpenDateRows() {
                if ((this.Table.ChildRelations["FK_TableEstablishmentsOpenDate_TEstablishments"] == null)) {
                    return new TableEstablishmentsOpenDateRow[0];
                }
                else {
                    return ((TableEstablishmentsOpenDateRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TableEstablishmentsOpenDate_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRow[] GetTAdvertisingEstablishmentsRows() {
                if ((this.Table.ChildRelations["FK_TAdvertisingEstablishments_TEstablishments"] == null)) {
                    return new TAdvertisingEstablishmentsRow[0];
                }
                else {
                    return ((TAdvertisingEstablishmentsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TAdvertisingEstablishments_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow[] GetTCoursesRows() {
                if ((this.Table.ChildRelations["FK_TCourses_TEstablishments"] == null)) {
                    return new TCoursesRow[0];
                }
                else {
                    return ((TCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TCourses_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow[] GetTLecturersRows() {
                if ((this.Table.ChildRelations["FK_TLecturers_TEstablishments"] == null)) {
                    return new TLecturersRow[0];
                }
                else {
                    return ((TLecturersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TLecturers_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow[] GetTMessagesRows() {
                if ((this.Table.ChildRelations["FK_TMessages_TEstablishments"] == null)) {
                    return new TMessagesRow[0];
                }
                else {
                    return ((TMessagesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TMessages_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRow[] GetTMessagesForSchoolRows() {
                if ((this.Table.ChildRelations["FK_TMessagesForSchool_TEstablishments"] == null)) {
                    return new TMessagesForSchoolRow[0];
                }
                else {
                    return ((TMessagesForSchoolRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TMessagesForSchool_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRow[] GetTPhonesListRows() {
                if ((this.Table.ChildRelations["FK_TPhonesList_TEstablishments"] == null)) {
                    return new TPhonesListRow[0];
                }
                else {
                    return ((TPhonesListRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TPhonesList_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRow[] GetTPhotoGalleryRows() {
                if ((this.Table.ChildRelations["FK_TPhotoGallery_TEstablishments"] == null)) {
                    return new TPhotoGalleryRow[0];
                }
                else {
                    return ((TPhotoGalleryRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TPhotoGallery_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRow[] GetTScholarshipsRows() {
                if ((this.Table.ChildRelations["FK_TScholarships_TEstablishments"] == null)) {
                    return new TScholarshipsRow[0];
                }
                else {
                    return ((TScholarshipsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TScholarships_TEstablishments"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow[] GetTArticlesRows() {
                if ((this.Table.ChildRelations["TEstablishments_TArticles"] == null)) {
                    return new TArticlesRow[0];
                }
                else {
                    return ((TArticlesRow[])(base.GetChildRows(this.Table.ChildRelations["TEstablishments_TArticles"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TLecturersRow : global::System.Data.DataRow {
            
            private TLecturersDataTable tableTLecturers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TLecturersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTLecturers = ((TLecturersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LecturerId {
                get {
                    return ((long)(this[this.tableTLecturers.LecturerIdColumn]));
                }
                set {
                    this[this.tableTLecturers.LecturerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LecturerName {
                get {
                    return ((string)(this[this.tableTLecturers.LecturerNameColumn]));
                }
                set {
                    this[this.tableTLecturers.LecturerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LecturerPhotoFileName {
                get {
                    try {
                        return ((string)(this[this.tableTLecturers.LecturerPhotoFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LecturerPhotoFileName\' in table \'TLecturers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTLecturers.LecturerPhotoFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LecturerComment {
                get {
                    try {
                        return ((string)(this[this.tableTLecturers.LecturerCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LecturerComment\' in table \'TLecturers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTLecturers.LecturerCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LecturerEstablishmentId {
                get {
                    return ((long)(this[this.tableTLecturers.LecturerEstablishmentIdColumn]));
                }
                set {
                    this[this.tableTLecturers.LecturerEstablishmentIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LecturerCertification {
                get {
                    try {
                        return ((string)(this[this.tableTLecturers.LecturerCertificationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LecturerCertification\' in table \'TLecturers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTLecturers.LecturerCertificationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LecturerCategoryCourse {
                get {
                    try {
                        return ((long)(this[this.tableTLecturers.LecturerCategoryCourseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LecturerCategoryCourse\' in table \'TLecturers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTLecturers.LecturerCategoryCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LecturerAreaCourse {
                get {
                    try {
                        return ((long)(this[this.tableTLecturers.LecturerAreaCourseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LecturerAreaCourse\' in table \'TLecturers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTLecturers.LecturerAreaCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LecturerSubAreaCourse {
                get {
                    try {
                        return ((long)(this[this.tableTLecturers.LecturerSubAreaCourseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LecturerSubAreaCourse\' in table \'TLecturers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTLecturers.LecturerSubAreaCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TLecturers_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TLecturers_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLecturerPhotoFileNameNull() {
                return this.IsNull(this.tableTLecturers.LecturerPhotoFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLecturerPhotoFileNameNull() {
                this[this.tableTLecturers.LecturerPhotoFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLecturerCommentNull() {
                return this.IsNull(this.tableTLecturers.LecturerCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLecturerCommentNull() {
                this[this.tableTLecturers.LecturerCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLecturerCertificationNull() {
                return this.IsNull(this.tableTLecturers.LecturerCertificationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLecturerCertificationNull() {
                this[this.tableTLecturers.LecturerCertificationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLecturerCategoryCourseNull() {
                return this.IsNull(this.tableTLecturers.LecturerCategoryCourseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLecturerCategoryCourseNull() {
                this[this.tableTLecturers.LecturerCategoryCourseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLecturerAreaCourseNull() {
                return this.IsNull(this.tableTLecturers.LecturerAreaCourseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLecturerAreaCourseNull() {
                this[this.tableTLecturers.LecturerAreaCourseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLecturerSubAreaCourseNull() {
                return this.IsNull(this.tableTLecturers.LecturerSubAreaCourseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLecturerSubAreaCourseNull() {
                this[this.tableTLecturers.LecturerSubAreaCourseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow[] GetTLecturesAndCoursesRows() {
                if ((this.Table.ChildRelations["FK_TLecturesAndCourses_TLecturers"] == null)) {
                    return new TLecturesAndCoursesRow[0];
                }
                else {
                    return ((TLecturesAndCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TLecturesAndCourses_TLecturers"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TMessagesRow : global::System.Data.DataRow {
            
            private TMessagesDataTable tableTMessages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TMessagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTMessages = ((TMessagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MessageId {
                get {
                    return ((long)(this[this.tableTMessages.MessageIdColumn]));
                }
                set {
                    this[this.tableTMessages.MessageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorName {
                get {
                    try {
                        return ((string)(this[this.tableTMessages.AuthorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorName\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorLastName {
                get {
                    try {
                        return ((string)(this[this.tableTMessages.AuthorLastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorLastName\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorLastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RegionId {
                get {
                    try {
                        return ((long)(this[this.tableTMessages.RegionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegionId\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.RegionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorAddress {
                get {
                    try {
                        return ((string)(this[this.tableTMessages.AuthorAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorAddress\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorPhone {
                get {
                    try {
                        return ((string)(this[this.tableTMessages.AuthorPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorPhone\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorCellPhone {
                get {
                    try {
                        return ((string)(this[this.tableTMessages.AuthorCellPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorCellPhone\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorCellPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuthorMail {
                get {
                    try {
                        return ((string)(this[this.tableTMessages.AuthorMailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorMail\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorMailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AuthorBirthDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTMessages.AuthorBirthDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AuthorBirthDate\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.AuthorBirthDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MessageDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTMessages.MessageDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MessageDate\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.MessageDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CourseId {
                get {
                    try {
                        return ((long)(this[this.tableTMessages.CourseIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseId\' in table \'TMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessages.CourseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolId {
                get {
                    return ((long)(this[this.tableTMessages.SchoolIdColumn]));
                }
                set {
                    this[this.tableTMessages.SchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow TCoursesRow {
                get {
                    return ((TCoursesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TMessages_TCourses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TMessages_TCourses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TMessages_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TMessages_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorNameNull() {
                return this.IsNull(this.tableTMessages.AuthorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorNameNull() {
                this[this.tableTMessages.AuthorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorLastNameNull() {
                return this.IsNull(this.tableTMessages.AuthorLastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorLastNameNull() {
                this[this.tableTMessages.AuthorLastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionIdNull() {
                return this.IsNull(this.tableTMessages.RegionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionIdNull() {
                this[this.tableTMessages.RegionIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorAddressNull() {
                return this.IsNull(this.tableTMessages.AuthorAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorAddressNull() {
                this[this.tableTMessages.AuthorAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorPhoneNull() {
                return this.IsNull(this.tableTMessages.AuthorPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorPhoneNull() {
                this[this.tableTMessages.AuthorPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorCellPhoneNull() {
                return this.IsNull(this.tableTMessages.AuthorCellPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorCellPhoneNull() {
                this[this.tableTMessages.AuthorCellPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorMailNull() {
                return this.IsNull(this.tableTMessages.AuthorMailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorMailNull() {
                this[this.tableTMessages.AuthorMailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuthorBirthDateNull() {
                return this.IsNull(this.tableTMessages.AuthorBirthDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuthorBirthDateNull() {
                this[this.tableTMessages.AuthorBirthDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageDateNull() {
                return this.IsNull(this.tableTMessages.MessageDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageDateNull() {
                this[this.tableTMessages.MessageDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseIdNull() {
                return this.IsNull(this.tableTMessages.CourseIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseIdNull() {
                this[this.tableTMessages.CourseIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TMessagesForSchoolRow : global::System.Data.DataRow {
            
            private TMessagesForSchoolDataTable tableTMessagesForSchool;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TMessagesForSchoolRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTMessagesForSchool = ((TMessagesForSchoolDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MessageId {
                get {
                    return ((long)(this[this.tableTMessagesForSchool.MessageIdColumn]));
                }
                set {
                    this[this.tableTMessagesForSchool.MessageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MessageDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTMessagesForSchool.MessageDateColumn]));
                }
                set {
                    this[this.tableTMessagesForSchool.MessageDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserNameLastName {
                get {
                    try {
                        return ((string)(this[this.tableTMessagesForSchool.UserNameLastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserNameLastName\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.UserNameLastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserMail {
                get {
                    try {
                        return ((string)(this[this.tableTMessagesForSchool.UserMailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserMail\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.UserMailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserCity {
                get {
                    try {
                        return ((string)(this[this.tableTMessagesForSchool.UserCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserCity\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.UserCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserStreet {
                get {
                    try {
                        return ((string)(this[this.tableTMessagesForSchool.UserStreetColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserStreet\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.UserStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserPhone {
                get {
                    try {
                        return ((string)(this[this.tableTMessagesForSchool.UserPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserPhone\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.UserPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolId {
                get {
                    return ((long)(this[this.tableTMessagesForSchool.SchoolIdColumn]));
                }
                set {
                    this[this.tableTMessagesForSchool.SchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessageText {
                get {
                    try {
                        return ((string)(this[this.tableTMessagesForSchool.MessageTextColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MessageText\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.MessageTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int areaId {
                get {
                    try {
                        return ((int)(this[this.tableTMessagesForSchool.areaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'areaId\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.areaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int subAreaId {
                get {
                    try {
                        return ((int)(this[this.tableTMessagesForSchool.subAreaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'subAreaId\' in table \'TMessagesForSchool\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTMessagesForSchool.subAreaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TMessagesForSchool_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TMessagesForSchool_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserNameLastNameNull() {
                return this.IsNull(this.tableTMessagesForSchool.UserNameLastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserNameLastNameNull() {
                this[this.tableTMessagesForSchool.UserNameLastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserMailNull() {
                return this.IsNull(this.tableTMessagesForSchool.UserMailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserMailNull() {
                this[this.tableTMessagesForSchool.UserMailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserCityNull() {
                return this.IsNull(this.tableTMessagesForSchool.UserCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserCityNull() {
                this[this.tableTMessagesForSchool.UserCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserStreetNull() {
                return this.IsNull(this.tableTMessagesForSchool.UserStreetColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserStreetNull() {
                this[this.tableTMessagesForSchool.UserStreetColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserPhoneNull() {
                return this.IsNull(this.tableTMessagesForSchool.UserPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserPhoneNull() {
                this[this.tableTMessagesForSchool.UserPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageTextNull() {
                return this.IsNull(this.tableTMessagesForSchool.MessageTextColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageTextNull() {
                this[this.tableTMessagesForSchool.MessageTextColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsareaIdNull() {
                return this.IsNull(this.tableTMessagesForSchool.areaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetareaIdNull() {
                this[this.tableTMessagesForSchool.areaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssubAreaIdNull() {
                return this.IsNull(this.tableTMessagesForSchool.subAreaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsubAreaIdNull() {
                this[this.tableTMessagesForSchool.subAreaIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TPhonesListRow : global::System.Data.DataRow {
            
            private TPhonesListDataTable tableTPhonesList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TPhonesListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTPhonesList = ((TPhonesListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PhoneId {
                get {
                    return ((long)(this[this.tableTPhonesList.PhoneIdColumn]));
                }
                set {
                    this[this.tableTPhonesList.PhoneIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneNumber {
                get {
                    return ((string)(this[this.tableTPhonesList.PhoneNumberColumn]));
                }
                set {
                    this[this.tableTPhonesList.PhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MainFlag {
                get {
                    return ((bool)(this[this.tableTPhonesList.MainFlagColumn]));
                }
                set {
                    this[this.tableTPhonesList.MainFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolId {
                get {
                    return ((long)(this[this.tableTPhonesList.SchoolIdColumn]));
                }
                set {
                    this[this.tableTPhonesList.SchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TPhonesList_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TPhonesList_TEstablishments"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TPhotoGalleryRow : global::System.Data.DataRow {
            
            private TPhotoGalleryDataTable tableTPhotoGallery;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TPhotoGalleryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTPhotoGallery = ((TPhotoGalleryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long PhotoId {
                get {
                    return ((long)(this[this.tableTPhotoGallery.PhotoIdColumn]));
                }
                set {
                    this[this.tableTPhotoGallery.PhotoIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhotoFileName {
                get {
                    try {
                        return ((string)(this[this.tableTPhotoGallery.PhotoFileNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhotoFileName\' in table \'TPhotoGallery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTPhotoGallery.PhotoFileNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileExtension {
                get {
                    try {
                        return ((string)(this[this.tableTPhotoGallery.FileExtensionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileExtension\' in table \'TPhotoGallery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTPhotoGallery.FileExtensionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long GallerySchoolId {
                get {
                    return ((long)(this[this.tableTPhotoGallery.GallerySchoolIdColumn]));
                }
                set {
                    this[this.tableTPhotoGallery.GallerySchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CommentPhoto {
                get {
                    try {
                        return ((string)(this[this.tableTPhotoGallery.CommentPhotoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommentPhoto\' in table \'TPhotoGallery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTPhotoGallery.CommentPhotoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TPhotoGallery_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TPhotoGallery_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhotoFileNameNull() {
                return this.IsNull(this.tableTPhotoGallery.PhotoFileNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhotoFileNameNull() {
                this[this.tableTPhotoGallery.PhotoFileNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileExtensionNull() {
                return this.IsNull(this.tableTPhotoGallery.FileExtensionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileExtensionNull() {
                this[this.tableTPhotoGallery.FileExtensionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentPhotoNull() {
                return this.IsNull(this.tableTPhotoGallery.CommentPhotoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentPhotoNull() {
                this[this.tableTPhotoGallery.CommentPhotoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TRegionsRow : global::System.Data.DataRow {
            
            private TRegionsDataTable tableTRegions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TRegionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTRegions = ((TRegionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RegionId {
                get {
                    return ((long)(this[this.tableTRegions.RegionIdColumn]));
                }
                set {
                    this[this.tableTRegions.RegionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegionName {
                get {
                    return ((string)(this[this.tableTRegions.RegionNameColumn]));
                }
                set {
                    this[this.tableTRegions.RegionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MainRegionId {
                get {
                    return ((long)(this[this.tableTRegions.MainRegionIdColumn]));
                }
                set {
                    this[this.tableTRegions.MainRegionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow[] GetTEstablishmentsRows() {
                if ((this.Table.ChildRelations["FK_TEstablishments_TRegions"] == null)) {
                    return new TEstablishmentsRow[0];
                }
                else {
                    return ((TEstablishmentsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TEstablishments_TRegions"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TReviewsRow : global::System.Data.DataRow {
            
            private TReviewsDataTable tableTReviews;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TReviewsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTReviews = ((TReviewsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int reviewId {
                get {
                    return ((int)(this[this.tableTReviews.reviewIdColumn]));
                }
                set {
                    this[this.tableTReviews.reviewIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reviewTitle {
                get {
                    return ((string)(this[this.tableTReviews.reviewTitleColumn]));
                }
                set {
                    this[this.tableTReviews.reviewTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reviewText {
                get {
                    return ((string)(this[this.tableTReviews.reviewTextColumn]));
                }
                set {
                    this[this.tableTReviews.reviewTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int schoolId {
                get {
                    return ((int)(this[this.tableTReviews.schoolIdColumn]));
                }
                set {
                    this[this.tableTReviews.schoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reviewImage {
                get {
                    return ((string)(this[this.tableTReviews.reviewImageColumn]));
                }
                set {
                    this[this.tableTReviews.reviewImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte studentType {
                get {
                    return ((byte)(this[this.tableTReviews.studentTypeColumn]));
                }
                set {
                    this[this.tableTReviews.studentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string graduatedDate {
                get {
                    return ((string)(this[this.tableTReviews.graduatedDateColumn]));
                }
                set {
                    this[this.tableTReviews.graduatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime insertDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTReviews.insertDateColumn]));
                }
                set {
                    this[this.tableTReviews.insertDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userName {
                get {
                    return ((string)(this[this.tableTReviews.userNameColumn]));
                }
                set {
                    this[this.tableTReviews.userNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userIP {
                get {
                    return ((string)(this[this.tableTReviews.userIPColumn]));
                }
                set {
                    this[this.tableTReviews.userIPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool isPublished {
                get {
                    try {
                        return ((bool)(this[this.tableTReviews.isPublishedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'isPublished\' in table \'TReviews\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTReviews.isPublishedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int categoryId {
                get {
                    return ((int)(this[this.tableTReviews.categoryIdColumn]));
                }
                set {
                    this[this.tableTReviews.categoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int fieldId {
                get {
                    return ((int)(this[this.tableTReviews.fieldIdColumn]));
                }
                set {
                    this[this.tableTReviews.fieldIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int subFieldId {
                get {
                    return ((int)(this[this.tableTReviews.subFieldIdColumn]));
                }
                set {
                    this[this.tableTReviews.subFieldIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int courseId {
                get {
                    return ((int)(this[this.tableTReviews.courseIdColumn]));
                }
                set {
                    this[this.tableTReviews.courseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string userEmail {
                get {
                    return ((string)(this[this.tableTReviews.userEmailColumn]));
                }
                set {
                    this[this.tableTReviews.userEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsisPublishedNull() {
                return this.IsNull(this.tableTReviews.isPublishedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetisPublishedNull() {
                this[this.tableTReviews.isPublishedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TScholarshipsRow : global::System.Data.DataRow {
            
            private TScholarshipsDataTable tableTScholarships;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TScholarshipsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTScholarships = ((TScholarshipsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ScholarshipId {
                get {
                    return ((long)(this[this.tableTScholarships.ScholarshipIdColumn]));
                }
                set {
                    this[this.tableTScholarships.ScholarshipIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScholarshipName {
                get {
                    try {
                        return ((string)(this[this.tableTScholarships.ScholarshipNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ScholarshipName\' in table \'TScholarships\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTScholarships.ScholarshipNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ScholarshipText {
                get {
                    return ((string)(this[this.tableTScholarships.ScholarshipTextColumn]));
                }
                set {
                    this[this.tableTScholarships.ScholarshipTextColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SchoolId {
                get {
                    return ((long)(this[this.tableTScholarships.SchoolIdColumn]));
                }
                set {
                    this[this.tableTScholarships.SchoolIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow TEstablishmentsRow {
                get {
                    return ((TEstablishmentsRow)(this.GetParentRow(this.Table.ParentRelations["FK_TScholarships_TEstablishments"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TScholarships_TEstablishments"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScholarshipNameNull() {
                return this.IsNull(this.tableTScholarships.ScholarshipNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScholarshipNameNull() {
                this[this.tableTScholarships.ScholarshipNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TSubAreasCoursesRow : global::System.Data.DataRow {
            
            private TSubAreasCoursesDataTable tableTSubAreasCourses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TSubAreasCoursesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTSubAreasCourses = ((TSubAreasCoursesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SubAreaCoursesId {
                get {
                    return ((long)(this[this.tableTSubAreasCourses.SubAreaCoursesIdColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.SubAreaCoursesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubAreaCoursesName {
                get {
                    return ((string)(this[this.tableTSubAreasCourses.SubAreaCoursesNameColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.SubAreaCoursesNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AreaCoursesId {
                get {
                    return ((long)(this[this.tableTSubAreasCourses.AreaCoursesIdColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.AreaCoursesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool FlagPopular {
                get {
                    return ((bool)(this[this.tableTSubAreasCourses.FlagPopularColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.FlagPopularColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metaDesc {
                get {
                    return ((string)(this[this.tableTSubAreasCourses.metaDescColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.metaDescColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string metaKeywords {
                get {
                    return ((string)(this[this.tableTSubAreasCourses.metaKeywordsColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.metaKeywordsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string subAreaTitle {
                get {
                    return ((string)(this[this.tableTSubAreasCourses.subAreaTitleColumn]));
                }
                set {
                    this[this.tableTSubAreasCourses.subAreaTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string leadSlogan {
                get {
                    try {
                        return ((string)(this[this.tableTSubAreasCourses.leadSloganColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'leadSlogan\' in table \'TSubAreasCourses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTSubAreasCourses.leadSloganColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow TAreasCoursesRow {
                get {
                    return ((TAreasCoursesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TSubAreasCourses_TAreasCourses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TSubAreasCourses_TAreasCourses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsleadSloganNull() {
                return this.IsNull(this.tableTSubAreasCourses.leadSloganColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetleadSloganNull() {
                this[this.tableTSubAreasCourses.leadSloganColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow[] GetTArticlesRows() {
                if ((this.Table.ChildRelations["TSubAreasCourses_TArticles"] == null)) {
                    return new TArticlesRow[0];
                }
                else {
                    return ((TArticlesRow[])(base.GetChildRows(this.Table.ChildRelations["TSubAreasCourses_TArticles"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow[] GetTCoursesRows() {
                if ((this.Table.ChildRelations["TSubAreasCourses_TCourses"] == null)) {
                    return new TCoursesRow[0];
                }
                else {
                    return ((TCoursesRow[])(base.GetChildRows(this.Table.ChildRelations["TSubAreasCourses_TCourses"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TTypeCoursesRow : global::System.Data.DataRow {
            
            private TTypeCoursesDataTable tableTTypeCourses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TTypeCoursesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTTypeCourses = ((TTypeCoursesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CourseTypeId {
                get {
                    return ((long)(this[this.tableTTypeCourses.CourseTypeIdColumn]));
                }
                set {
                    this[this.tableTTypeCourses.CourseTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseTypeName {
                get {
                    return ((string)(this[this.tableTTypeCourses.CourseTypeNameColumn]));
                }
                set {
                    this[this.tableTTypeCourses.CourseTypeNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TVisitorsMailsRow : global::System.Data.DataRow {
            
            private TVisitorsMailsDataTable tableTVisitorsMails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TVisitorsMailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTVisitorsMails = ((TVisitorsMailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long VisitorId {
                get {
                    return ((long)(this[this.tableTVisitorsMails.VisitorIdColumn]));
                }
                set {
                    this[this.tableTVisitorsMails.VisitorIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorMail {
                get {
                    return ((string)(this[this.tableTVisitorsMails.VisitorMailColumn]));
                }
                set {
                    this[this.tableTVisitorsMails.VisitorMailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime VisitDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTVisitorsMails.VisitDateColumn]));
                }
                set {
                    this[this.tableTVisitorsMails.VisitDateColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TVisitorsMessagesRow : global::System.Data.DataRow {
            
            private TVisitorsMessagesDataTable tableTVisitorsMessages;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TVisitorsMessagesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTVisitorsMessages = ((TVisitorsMessagesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long MessageId {
                get {
                    return ((long)(this[this.tableTVisitorsMessages.MessageIdColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.MessageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorName {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorNameColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorLastName {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorLastNameColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorLastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorMail {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorMailColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorMailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorCity {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorCityColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorStreet {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorStreetColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorStreetColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorPhone {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorPhoneColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorAge {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorAgeColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorAgeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VisitorSex {
                get {
                    return ((string)(this[this.tableTVisitorsMessages.VisitorSexColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.VisitorSexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateSent {
                get {
                    return ((global::System.DateTime)(this[this.tableTVisitorsMessages.DateSentColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.DateSentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CategoryId {
                get {
                    return ((long)(this[this.tableTVisitorsMessages.CategoryIdColumn]));
                }
                set {
                    this[this.tableTVisitorsMessages.CategoryIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long AreaId {
                get {
                    try {
                        return ((long)(this[this.tableTVisitorsMessages.AreaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AreaId\' in table \'TVisitorsMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTVisitorsMessages.AreaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long SubAreaId {
                get {
                    try {
                        return ((long)(this[this.tableTVisitorsMessages.SubAreaIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubAreaId\' in table \'TVisitorsMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTVisitorsMessages.SubAreaIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long RegionId {
                get {
                    try {
                        return ((long)(this[this.tableTVisitorsMessages.RegionIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegionId\' in table \'TVisitorsMessages\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTVisitorsMessages.RegionIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAreaIdNull() {
                return this.IsNull(this.tableTVisitorsMessages.AreaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAreaIdNull() {
                this[this.tableTVisitorsMessages.AreaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubAreaIdNull() {
                return this.IsNull(this.tableTVisitorsMessages.SubAreaIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubAreaIdNull() {
                this[this.tableTVisitorsMessages.SubAreaIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionIdNull() {
                return this.IsNull(this.tableTVisitorsMessages.RegionIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionIdNull() {
                this[this.tableTVisitorsMessages.RegionIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TYoramCatsRow : global::System.Data.DataRow {
            
            private TYoramCatsDataTable tableTYoramCats;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TYoramCatsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTYoramCats = ((TYoramCatsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int theStudentSubCatId {
                get {
                    return ((int)(this[this.tableTYoramCats.theStudentSubCatIdColumn]));
                }
                set {
                    this[this.tableTYoramCats.theStudentSubCatIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int yoramCatId {
                get {
                    return ((int)(this[this.tableTYoramCats.yoramCatIdColumn]));
                }
                set {
                    this[this.tableTYoramCats.yoramCatIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string yoramCatName {
                get {
                    return ((string)(this[this.tableTYoramCats.yoramCatNameColumn]));
                }
                set {
                    this[this.tableTYoramCats.yoramCatNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TLecturesAndCoursesRow : global::System.Data.DataRow {
            
            private TLecturesAndCoursesDataTable tableTLecturesAndCourses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TLecturesAndCoursesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTLecturesAndCourses = ((TLecturesAndCoursesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long LecturerId {
                get {
                    return ((long)(this[this.tableTLecturesAndCourses.LecturerIdColumn]));
                }
                set {
                    this[this.tableTLecturesAndCourses.LecturerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long CourseId {
                get {
                    return ((long)(this[this.tableTLecturesAndCourses.CourseIdColumn]));
                }
                set {
                    this[this.tableTLecturesAndCourses.CourseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow TCoursesRow {
                get {
                    return ((TCoursesRow)(this.GetParentRow(this.Table.ParentRelations["FK_TLecturesAndCourses_TCourses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TLecturesAndCourses_TCourses"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow TLecturersRow {
                get {
                    return ((TLecturersRow)(this.GetParentRow(this.Table.ParentRelations["FK_TLecturesAndCourses_TLecturers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TLecturesAndCourses_TLecturers"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TableEstablishmentsOpenDateRowChangeEvent : global::System.EventArgs {
            
            private TableEstablishmentsOpenDateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRowChangeEvent(TableEstablishmentsOpenDateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TableEstablishmentsOpenDateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TYoramSchoolsRowChangeEvent : global::System.EventArgs {
            
            private TYoramSchoolsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsRowChangeEvent(TYoramSchoolsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramSchoolsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TAdministratorsRowChangeEvent : global::System.EventArgs {
            
            private TAdministratorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsRowChangeEvent(TAdministratorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdministratorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TAdvertisingEstablishmentsRowChangeEvent : global::System.EventArgs {
            
            private TAdvertisingEstablishmentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRowChangeEvent(TAdvertisingEstablishmentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAdvertisingEstablishmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TAreasCoursesRowChangeEvent : global::System.EventArgs {
            
            private TAreasCoursesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRowChangeEvent(TAreasCoursesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TAreasCoursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TArticlesRowChangeEvent : global::System.EventArgs {
            
            private TArticlesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRowChangeEvent(TArticlesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TArticlesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCategoriesRowChangeEvent : global::System.EventArgs {
            
            private TCategoriesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRowChangeEvent(TCategoriesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCategoriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TCoursesRowChangeEvent : global::System.EventArgs {
            
            private TCoursesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRowChangeEvent(TCoursesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TCoursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TEstablishmentsRowChangeEvent : global::System.EventArgs {
            
            private TEstablishmentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRowChangeEvent(TEstablishmentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TEstablishmentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TLecturersRowChangeEvent : global::System.EventArgs {
            
            private TLecturersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRowChangeEvent(TLecturersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TMessagesRowChangeEvent : global::System.EventArgs {
            
            private TMessagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRowChangeEvent(TMessagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TMessagesForSchoolRowChangeEvent : global::System.EventArgs {
            
            private TMessagesForSchoolRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRowChangeEvent(TMessagesForSchoolRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TMessagesForSchoolRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TPhonesListRowChangeEvent : global::System.EventArgs {
            
            private TPhonesListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRowChangeEvent(TPhonesListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhonesListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TPhotoGalleryRowChangeEvent : global::System.EventArgs {
            
            private TPhotoGalleryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRowChangeEvent(TPhotoGalleryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TPhotoGalleryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TRegionsRowChangeEvent : global::System.EventArgs {
            
            private TRegionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRowChangeEvent(TRegionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TRegionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TReviewsRowChangeEvent : global::System.EventArgs {
            
            private TReviewsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsRowChangeEvent(TReviewsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TReviewsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TScholarshipsRowChangeEvent : global::System.EventArgs {
            
            private TScholarshipsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRowChangeEvent(TScholarshipsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TScholarshipsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TSubAreasCoursesRowChangeEvent : global::System.EventArgs {
            
            private TSubAreasCoursesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRowChangeEvent(TSubAreasCoursesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TSubAreasCoursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TTypeCoursesRowChangeEvent : global::System.EventArgs {
            
            private TTypeCoursesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesRowChangeEvent(TTypeCoursesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TTypeCoursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TVisitorsMailsRowChangeEvent : global::System.EventArgs {
            
            private TVisitorsMailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsRowChangeEvent(TVisitorsMailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TVisitorsMessagesRowChangeEvent : global::System.EventArgs {
            
            private TVisitorsMessagesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesRowChangeEvent(TVisitorsMessagesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TVisitorsMessagesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TYoramCatsRowChangeEvent : global::System.EventArgs {
            
            private TYoramCatsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsRowChangeEvent(TYoramCatsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TYoramCatsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TLecturesAndCoursesRowChangeEvent : global::System.EventArgs {
            
            private TLecturesAndCoursesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRowChangeEvent(TLecturesAndCoursesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TLecturesAndCoursesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Durados.Web.Mvc.Specifics.Projects.Studying.StudyingDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TableEstablishmentsOpenDateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TableEstablishmentsOpenDateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TableEstablishmentsOpenDate";
            tableMapping.ColumnMappings.Add("OpenDateId", "OpenDateId");
            tableMapping.ColumnMappings.Add("OpenDateValue", "OpenDateValue");
            tableMapping.ColumnMappings.Add("SchoolId", "SchoolId");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TableEstablishmentsOpenDate] WHERE (([OpenDateId] = @Original_OpenDateId) AND ([OpenDateValue] = @Original_OpenDateValue) AND ([SchoolId] = @Original_SchoolId) AND ((@IsNull_Comment = 1 AND [Comment] IS NULL) OR ([Comment] = @Original_Comment)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpenDateId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpenDateValue", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TableEstablishmentsOpenDate] ([OpenDateValue], [SchoolId], [Comment]) VALUES (@OpenDateValue, @SchoolId, @Comment);
SELECT OpenDateId, OpenDateValue, SchoolId, Comment FROM TableEstablishmentsOpenDate WHERE (OpenDateId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpenDateValue", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TableEstablishmentsOpenDate] SET [OpenDateValue] = @OpenDateValue, [SchoolId] = @SchoolId, [Comment] = @Comment WHERE (([OpenDateId] = @Original_OpenDateId) AND ([OpenDateValue] = @Original_OpenDateValue) AND ([SchoolId] = @Original_SchoolId) AND ((@IsNull_Comment = 1 AND [Comment] IS NULL) OR ([Comment] = @Original_Comment)));
SELECT OpenDateId, OpenDateValue, SchoolId, Comment FROM TableEstablishmentsOpenDate WHERE (OpenDateId = @OpenDateId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpenDateValue", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateValue", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpenDateId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OpenDateValue", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateValue", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Comment", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Comment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comment", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OpenDateId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "OpenDateId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT OpenDateId, OpenDateValue, SchoolId, Comment FROM dbo.TableEstablishmentsO" +
                "penDate";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TableEstablishmentsOpenDateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TableEstablishmentsOpenDateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TableEstablishmentsOpenDateDataTable dataTable = new StudyingDataSet.TableEstablishmentsOpenDateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TableEstablishmentsOpenDateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TableEstablishmentsOpenDate");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_OpenDateId, System.DateTime Original_OpenDateValue, long Original_SchoolId, string Original_Comment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_OpenDateId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_OpenDateValue));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_SchoolId));
            if ((Original_Comment == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime OpenDateValue, long SchoolId, string Comment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(OpenDateValue));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(SchoolId));
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Comment));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime OpenDateValue, long SchoolId, string Comment, long Original_OpenDateId, System.DateTime Original_OpenDateValue, long Original_SchoolId, string Original_Comment, long OpenDateId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(OpenDateValue));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(SchoolId));
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Comment));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_OpenDateId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Original_OpenDateValue));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_SchoolId));
            if ((Original_Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_Comment));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(OpenDateId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.DateTime OpenDateValue, long SchoolId, string Comment, long Original_OpenDateId, System.DateTime Original_OpenDateValue, long Original_SchoolId, string Original_Comment) {
            return this.Update(OpenDateValue, SchoolId, Comment, Original_OpenDateId, Original_OpenDateValue, Original_SchoolId, Original_Comment, Original_OpenDateId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TYoramSchoolsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYoramSchoolsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TYoramSchools";
            tableMapping.ColumnMappings.Add("theStudentSchoolId", "theStudentSchoolId");
            tableMapping.ColumnMappings.Add("yoramSchoolId", "yoramSchoolId");
            tableMapping.ColumnMappings.Add("yoramSchoolName", "yoramSchoolName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TYoramSchools] WHERE (([theStudentSchoolId] = @Original_theStu" +
                "dentSchoolId) AND ([yoramSchoolId] = @Original_yoramSchoolId) AND ([yoramSchoolN" +
                "ame] = @Original_yoramSchoolName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_theStudentSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramSchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TYoramSchools] ([theStudentSchoolId], [yoramSchoolId], [yoramSchoolName]) VALUES (@theStudentSchoolId, @yoramSchoolId, @yoramSchoolName);
SELECT theStudentSchoolId, yoramSchoolId, yoramSchoolName FROM TYoramSchools WHERE (theStudentSchoolId = @theStudentSchoolId) AND (yoramSchoolId = @yoramSchoolId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@theStudentSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramSchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TYoramSchools] SET [theStudentSchoolId] = @theStudentSchoolId, [yoramSchoolId] = @yoramSchoolId, [yoramSchoolName] = @yoramSchoolName WHERE (([theStudentSchoolId] = @Original_theStudentSchoolId) AND ([yoramSchoolId] = @Original_yoramSchoolId) AND ([yoramSchoolName] = @Original_yoramSchoolName));
SELECT theStudentSchoolId, yoramSchoolId, yoramSchoolName FROM TYoramSchools WHERE (theStudentSchoolId = @theStudentSchoolId) AND (yoramSchoolId = @yoramSchoolId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@theStudentSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramSchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_theStudentSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramSchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramSchoolName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT theStudentSchoolId, yoramSchoolId, yoramSchoolName FROM dbo.TYoramSchools";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TYoramSchoolsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TYoramSchoolsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TYoramSchoolsDataTable dataTable = new StudyingDataSet.TYoramSchoolsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TYoramSchoolsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TYoramSchools");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_theStudentSchoolId, int Original_yoramSchoolId, string Original_yoramSchoolName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_theStudentSchoolId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_yoramSchoolId));
            if ((Original_yoramSchoolName == null)) {
                throw new global::System.ArgumentNullException("Original_yoramSchoolName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_yoramSchoolName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int theStudentSchoolId, int yoramSchoolId, string yoramSchoolName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(theStudentSchoolId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(yoramSchoolId));
            if ((yoramSchoolName == null)) {
                throw new global::System.ArgumentNullException("yoramSchoolName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(yoramSchoolName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int theStudentSchoolId, int yoramSchoolId, string yoramSchoolName, int Original_theStudentSchoolId, int Original_yoramSchoolId, string Original_yoramSchoolName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(theStudentSchoolId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(yoramSchoolId));
            if ((yoramSchoolName == null)) {
                throw new global::System.ArgumentNullException("yoramSchoolName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(yoramSchoolName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_theStudentSchoolId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_yoramSchoolId));
            if ((Original_yoramSchoolName == null)) {
                throw new global::System.ArgumentNullException("Original_yoramSchoolName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_yoramSchoolName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string yoramSchoolName, int Original_theStudentSchoolId, int Original_yoramSchoolId, string Original_yoramSchoolName) {
            return this.Update(Original_theStudentSchoolId, Original_yoramSchoolId, yoramSchoolName, Original_theStudentSchoolId, Original_yoramSchoolId, Original_yoramSchoolName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TAdministratorsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAdministratorsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TAdministrators";
            tableMapping.ColumnMappings.Add("AdministratorId", "AdministratorId");
            tableMapping.ColumnMappings.Add("AdministratorUserName", "AdministratorUserName");
            tableMapping.ColumnMappings.Add("AdministratorPassword", "AdministratorPassword");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TAdministrators] WHERE (([AdministratorId] = @Original_Adminis" +
                "tratorId) AND ([AdministratorUserName] = @Original_AdministratorUserName) AND ([" +
                "AdministratorPassword] = @Original_AdministratorPassword))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdministratorId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdministratorUserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorUserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdministratorPassword", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorPassword", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TAdministrators] ([AdministratorUserName], [AdministratorPassword]) VALUES (@AdministratorUserName, @AdministratorPassword);
SELECT AdministratorId, AdministratorUserName, AdministratorPassword FROM TAdministrators WHERE (AdministratorId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdministratorUserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorUserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdministratorPassword", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorPassword", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TAdministrators] SET [AdministratorUserName] = @AdministratorUserName, [AdministratorPassword] = @AdministratorPassword WHERE (([AdministratorId] = @Original_AdministratorId) AND ([AdministratorUserName] = @Original_AdministratorUserName) AND ([AdministratorPassword] = @Original_AdministratorPassword));
SELECT AdministratorId, AdministratorUserName, AdministratorPassword FROM TAdministrators WHERE (AdministratorId = @AdministratorId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdministratorUserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorUserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdministratorPassword", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorPassword", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdministratorId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdministratorUserName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorUserName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdministratorPassword", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorPassword", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdministratorId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AdministratorId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.VisitConnectionString; 
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AdministratorId, AdministratorUserName, AdministratorPassword FROM dbo.TAd" +
                "ministrators";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TAdministratorsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TAdministratorsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TAdministratorsDataTable dataTable = new StudyingDataSet.TAdministratorsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TAdministratorsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TAdministrators");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_AdministratorId, string Original_AdministratorUserName, string Original_AdministratorPassword) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_AdministratorId));
            if ((Original_AdministratorUserName == null)) {
                throw new global::System.ArgumentNullException("Original_AdministratorUserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_AdministratorUserName));
            }
            if ((Original_AdministratorPassword == null)) {
                throw new global::System.ArgumentNullException("Original_AdministratorPassword");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_AdministratorPassword));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string AdministratorUserName, string AdministratorPassword) {
            if ((AdministratorUserName == null)) {
                throw new global::System.ArgumentNullException("AdministratorUserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(AdministratorUserName));
            }
            if ((AdministratorPassword == null)) {
                throw new global::System.ArgumentNullException("AdministratorPassword");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AdministratorPassword));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string AdministratorUserName, string AdministratorPassword, int Original_AdministratorId, string Original_AdministratorUserName, string Original_AdministratorPassword, int AdministratorId) {
            if ((AdministratorUserName == null)) {
                throw new global::System.ArgumentNullException("AdministratorUserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(AdministratorUserName));
            }
            if ((AdministratorPassword == null)) {
                throw new global::System.ArgumentNullException("AdministratorPassword");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AdministratorPassword));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_AdministratorId));
            if ((Original_AdministratorUserName == null)) {
                throw new global::System.ArgumentNullException("Original_AdministratorUserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_AdministratorUserName));
            }
            if ((Original_AdministratorPassword == null)) {
                throw new global::System.ArgumentNullException("Original_AdministratorPassword");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_AdministratorPassword));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(AdministratorId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string AdministratorUserName, string AdministratorPassword, int Original_AdministratorId, string Original_AdministratorUserName, string Original_AdministratorPassword) {
            return this.Update(AdministratorUserName, AdministratorPassword, Original_AdministratorId, Original_AdministratorUserName, Original_AdministratorPassword, Original_AdministratorId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TAdvertisingEstablishmentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAdvertisingEstablishmentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TAdvertisingEstablishments";
            tableMapping.ColumnMappings.Add("AdvertisingId", "AdvertisingId");
            tableMapping.ColumnMappings.Add("EstablishmentId", "EstablishmentId");
            tableMapping.ColumnMappings.Add("CategoryCourses", "CategoryCourses");
            tableMapping.ColumnMappings.Add("AreaCourses", "AreaCourses");
            tableMapping.ColumnMappings.Add("SubAreaCourses", "SubAreaCourses");
            tableMapping.ColumnMappings.Add("AdvertisingSlogan", "AdvertisingSlogan");
            tableMapping.ColumnMappings.Add("AdvertisingStatus", "AdvertisingStatus");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TAdvertisingEstablishments] WHERE (([AdvertisingId] = @Original_AdvertisingId) AND ([EstablishmentId] = @Original_EstablishmentId) AND ((@IsNull_CategoryCourses = 1 AND [CategoryCourses] IS NULL) OR ([CategoryCourses] = @Original_CategoryCourses)) AND ((@IsNull_AreaCourses = 1 AND [AreaCourses] IS NULL) OR ([AreaCourses] = @Original_AreaCourses)) AND ((@IsNull_SubAreaCourses = 1 AND [SubAreaCourses] IS NULL) OR ([SubAreaCourses] = @Original_SubAreaCourses)) AND ([AdvertisingSlogan] = @Original_AdvertisingSlogan) AND ([AdvertisingStatus] = @Original_AdvertisingStatus))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvertisingId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CategoryCourses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourses", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourses", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AreaCourses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourses", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourses", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaCourses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourses", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourses", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvertisingSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingSlogan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvertisingStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TAdvertisingEstablishments] ([EstablishmentId], [CategoryCourses], [AreaCourses], [SubAreaCourses], [AdvertisingSlogan], [AdvertisingStatus]) VALUES (@EstablishmentId, @CategoryCourses, @AreaCourses, @SubAreaCourses, @AdvertisingSlogan, @AdvertisingStatus);
SELECT AdvertisingId, EstablishmentId, CategoryCourses, AreaCourses, SubAreaCourses, AdvertisingSlogan, AdvertisingStatus FROM TAdvertisingEstablishments WHERE (AdvertisingId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvertisingSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingSlogan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvertisingStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TAdvertisingEstablishments] SET [EstablishmentId] = @EstablishmentId, [CategoryCourses] = @CategoryCourses, [AreaCourses] = @AreaCourses, [SubAreaCourses] = @SubAreaCourses, [AdvertisingSlogan] = @AdvertisingSlogan, [AdvertisingStatus] = @AdvertisingStatus WHERE (([AdvertisingId] = @Original_AdvertisingId) AND ([EstablishmentId] = @Original_EstablishmentId) AND ((@IsNull_CategoryCourses = 1 AND [CategoryCourses] IS NULL) OR ([CategoryCourses] = @Original_CategoryCourses)) AND ((@IsNull_AreaCourses = 1 AND [AreaCourses] IS NULL) OR ([AreaCourses] = @Original_AreaCourses)) AND ((@IsNull_SubAreaCourses = 1 AND [SubAreaCourses] IS NULL) OR ([SubAreaCourses] = @Original_SubAreaCourses)) AND ([AdvertisingSlogan] = @Original_AdvertisingSlogan) AND ([AdvertisingStatus] = @Original_AdvertisingStatus));
SELECT AdvertisingId, EstablishmentId, CategoryCourses, AreaCourses, SubAreaCourses, AdvertisingSlogan, AdvertisingStatus FROM TAdvertisingEstablishments WHERE (AdvertisingId = @AdvertisingId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourses", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvertisingSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingSlogan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvertisingStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvertisingId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CategoryCourses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourses", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourses", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AreaCourses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourses", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourses", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaCourses", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourses", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCourses", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourses", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvertisingSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingSlogan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AdvertisingStatus", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingStatus", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AdvertisingId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "AdvertisingId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT AdvertisingId, EstablishmentId, CategoryCourses, AreaCourses, SubAreaCours" +
                "es, AdvertisingSlogan, AdvertisingStatus FROM dbo.TAdvertisingEstablishments";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TAdvertisingEstablishmentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TAdvertisingEstablishmentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TAdvertisingEstablishmentsDataTable dataTable = new StudyingDataSet.TAdvertisingEstablishmentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TAdvertisingEstablishmentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TAdvertisingEstablishments");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_AdvertisingId, long Original_EstablishmentId, global::System.Nullable<long> Original_CategoryCourses, global::System.Nullable<long> Original_AreaCourses, global::System.Nullable<long> Original_SubAreaCourses, string Original_AdvertisingSlogan, bool Original_AdvertisingStatus) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_AdvertisingId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_EstablishmentId));
            if ((Original_CategoryCourses.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_CategoryCourses.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaCourses.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_AreaCourses.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((Original_SubAreaCourses.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((long)(Original_SubAreaCourses.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_AdvertisingSlogan == null)) {
                throw new global::System.ArgumentNullException("Original_AdvertisingSlogan");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_AdvertisingSlogan));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((bool)(Original_AdvertisingStatus));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long EstablishmentId, global::System.Nullable<long> CategoryCourses, global::System.Nullable<long> AreaCourses, global::System.Nullable<long> SubAreaCourses, string AdvertisingSlogan, bool AdvertisingStatus) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(EstablishmentId));
            if ((CategoryCourses.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CategoryCourses.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((AreaCourses.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(AreaCourses.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SubAreaCourses.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(SubAreaCourses.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AdvertisingSlogan == null)) {
                throw new global::System.ArgumentNullException("AdvertisingSlogan");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AdvertisingSlogan));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(AdvertisingStatus));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long EstablishmentId, global::System.Nullable<long> CategoryCourses, global::System.Nullable<long> AreaCourses, global::System.Nullable<long> SubAreaCourses, string AdvertisingSlogan, bool AdvertisingStatus, long Original_AdvertisingId, long Original_EstablishmentId, global::System.Nullable<long> Original_CategoryCourses, global::System.Nullable<long> Original_AreaCourses, global::System.Nullable<long> Original_SubAreaCourses, string Original_AdvertisingSlogan, bool Original_AdvertisingStatus, long AdvertisingId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(EstablishmentId));
            if ((CategoryCourses.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CategoryCourses.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((AreaCourses.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(AreaCourses.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((SubAreaCourses.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(SubAreaCourses.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AdvertisingSlogan == null)) {
                throw new global::System.ArgumentNullException("AdvertisingSlogan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AdvertisingSlogan));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(AdvertisingStatus));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_AdvertisingId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(Original_EstablishmentId));
            if ((Original_CategoryCourses.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_CategoryCourses.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaCourses.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_AreaCourses.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((Original_SubAreaCourses.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_SubAreaCourses.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_AdvertisingSlogan == null)) {
                throw new global::System.ArgumentNullException("Original_AdvertisingSlogan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_AdvertisingSlogan));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_AdvertisingStatus));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(AdvertisingId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long EstablishmentId, global::System.Nullable<long> CategoryCourses, global::System.Nullable<long> AreaCourses, global::System.Nullable<long> SubAreaCourses, string AdvertisingSlogan, bool AdvertisingStatus, long Original_AdvertisingId, long Original_EstablishmentId, global::System.Nullable<long> Original_CategoryCourses, global::System.Nullable<long> Original_AreaCourses, global::System.Nullable<long> Original_SubAreaCourses, string Original_AdvertisingSlogan, bool Original_AdvertisingStatus) {
            return this.Update(EstablishmentId, CategoryCourses, AreaCourses, SubAreaCourses, AdvertisingSlogan, AdvertisingStatus, Original_AdvertisingId, Original_EstablishmentId, Original_CategoryCourses, Original_AreaCourses, Original_SubAreaCourses, Original_AdvertisingSlogan, Original_AdvertisingStatus, Original_AdvertisingId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TAreasCoursesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TAreasCoursesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TAreasCourses";
            tableMapping.ColumnMappings.Add("DomainId", "DomainId");
            tableMapping.ColumnMappings.Add("CategoryId", "CategoryId");
            tableMapping.ColumnMappings.Add("DomainName", "DomainName");
            tableMapping.ColumnMappings.Add("CommentDomain", "CommentDomain");
            tableMapping.ColumnMappings.Add("metaDesc", "metaDesc");
            tableMapping.ColumnMappings.Add("metaKeywords", "metaKeywords");
            tableMapping.ColumnMappings.Add("areaTitle", "areaTitle");
            tableMapping.ColumnMappings.Add("leadSlogan", "leadSlogan");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TAreasCourses] WHERE (([DomainId] = @Original_DomainId) AND ([CategoryId] = @Original_CategoryId) AND ([DomainName] = @Original_DomainName) AND ([metaDesc] = @Original_metaDesc) AND ([metaKeywords] = @Original_metaKeywords) AND ([areaTitle] = @Original_areaTitle) AND ([leadSlogan] = @Original_leadSlogan))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DomainId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DomainName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_areaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TAreasCourses] ([DomainId], [CategoryId], [DomainName], [CommentDomain], [metaDesc], [metaKeywords], [areaTitle], [leadSlogan]) VALUES (@DomainId, @CategoryId, @DomainName, @CommentDomain, @metaDesc, @metaKeywords, @areaTitle, @leadSlogan);
SELECT DomainId, CategoryId, DomainName, CommentDomain, metaDesc, metaKeywords, areaTitle, leadSlogan FROM TAreasCourses WHERE (DomainId = @DomainId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DomainId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DomainName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommentDomain", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentDomain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@areaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TAreasCourses] SET [DomainId] = @DomainId, [CategoryId] = @CategoryId, [DomainName] = @DomainName, [CommentDomain] = @CommentDomain, [metaDesc] = @metaDesc, [metaKeywords] = @metaKeywords, [areaTitle] = @areaTitle, [leadSlogan] = @leadSlogan WHERE (([DomainId] = @Original_DomainId) AND ([CategoryId] = @Original_CategoryId) AND ([DomainName] = @Original_DomainName) AND ([metaDesc] = @Original_metaDesc) AND ([metaKeywords] = @Original_metaKeywords) AND ([areaTitle] = @Original_areaTitle) AND ([leadSlogan] = @Original_leadSlogan));
SELECT DomainId, CategoryId, DomainName, CommentDomain, metaDesc, metaKeywords, areaTitle, leadSlogan FROM TAreasCourses WHERE (DomainId = @DomainId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DomainId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DomainName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommentDomain", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentDomain", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@areaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DomainId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DomainName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DomainName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_areaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DomainId, CategoryId, DomainName, CommentDomain, metaDesc, metaKeywords, a" +
                "reaTitle, leadSlogan FROM dbo.TAreasCourses";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TAreasCoursesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TAreasCoursesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TAreasCoursesDataTable dataTable = new StudyingDataSet.TAreasCoursesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TAreasCoursesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TAreasCourses");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_DomainId, long Original_CategoryId, string Original_DomainName, string Original_metaDesc, string Original_metaKeywords, string Original_areaTitle, string Original_leadSlogan) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_DomainId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_CategoryId));
            if ((Original_DomainName == null)) {
                throw new global::System.ArgumentNullException("Original_DomainName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_DomainName));
            }
            if ((Original_metaDesc == null)) {
                throw new global::System.ArgumentNullException("Original_metaDesc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_metaDesc));
            }
            if ((Original_metaKeywords == null)) {
                throw new global::System.ArgumentNullException("Original_metaKeywords");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_metaKeywords));
            }
            if ((Original_areaTitle == null)) {
                throw new global::System.ArgumentNullException("Original_areaTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_areaTitle));
            }
            if ((Original_leadSlogan == null)) {
                throw new global::System.ArgumentNullException("Original_leadSlogan");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_leadSlogan));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long DomainId, long CategoryId, string DomainName, string CommentDomain, string metaDesc, string metaKeywords, string areaTitle, string leadSlogan) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(DomainId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CategoryId));
            if ((DomainName == null)) {
                throw new global::System.ArgumentNullException("DomainName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(DomainName));
            }
            if ((CommentDomain == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CommentDomain));
            }
            if ((metaDesc == null)) {
                throw new global::System.ArgumentNullException("metaDesc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(metaDesc));
            }
            if ((metaKeywords == null)) {
                throw new global::System.ArgumentNullException("metaKeywords");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(metaKeywords));
            }
            if ((areaTitle == null)) {
                throw new global::System.ArgumentNullException("areaTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(areaTitle));
            }
            if ((leadSlogan == null)) {
                throw new global::System.ArgumentNullException("leadSlogan");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(leadSlogan));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long DomainId, long CategoryId, string DomainName, string CommentDomain, string metaDesc, string metaKeywords, string areaTitle, string leadSlogan, long Original_DomainId, long Original_CategoryId, string Original_DomainName, string Original_metaDesc, string Original_metaKeywords, string Original_areaTitle, string Original_leadSlogan) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(DomainId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CategoryId));
            if ((DomainName == null)) {
                throw new global::System.ArgumentNullException("DomainName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(DomainName));
            }
            if ((CommentDomain == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CommentDomain));
            }
            if ((metaDesc == null)) {
                throw new global::System.ArgumentNullException("metaDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(metaDesc));
            }
            if ((metaKeywords == null)) {
                throw new global::System.ArgumentNullException("metaKeywords");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(metaKeywords));
            }
            if ((areaTitle == null)) {
                throw new global::System.ArgumentNullException("areaTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(areaTitle));
            }
            if ((leadSlogan == null)) {
                throw new global::System.ArgumentNullException("leadSlogan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(leadSlogan));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_DomainId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_CategoryId));
            if ((Original_DomainName == null)) {
                throw new global::System.ArgumentNullException("Original_DomainName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_DomainName));
            }
            if ((Original_metaDesc == null)) {
                throw new global::System.ArgumentNullException("Original_metaDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_metaDesc));
            }
            if ((Original_metaKeywords == null)) {
                throw new global::System.ArgumentNullException("Original_metaKeywords");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_metaKeywords));
            }
            if ((Original_areaTitle == null)) {
                throw new global::System.ArgumentNullException("Original_areaTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_areaTitle));
            }
            if ((Original_leadSlogan == null)) {
                throw new global::System.ArgumentNullException("Original_leadSlogan");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_leadSlogan));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long CategoryId, string DomainName, string CommentDomain, string metaDesc, string metaKeywords, string areaTitle, string leadSlogan, long Original_DomainId, long Original_CategoryId, string Original_DomainName, string Original_metaDesc, string Original_metaKeywords, string Original_areaTitle, string Original_leadSlogan) {
            return this.Update(Original_DomainId, CategoryId, DomainName, CommentDomain, metaDesc, metaKeywords, areaTitle, leadSlogan, Original_DomainId, Original_CategoryId, Original_DomainName, Original_metaDesc, Original_metaKeywords, Original_areaTitle, Original_leadSlogan);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TArticlesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TArticlesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TArticles";
            tableMapping.ColumnMappings.Add("ArticleId", "ArticleId");
            tableMapping.ColumnMappings.Add("ArticleAuthorName", "ArticleAuthorName");
            tableMapping.ColumnMappings.Add("EstablishmentId", "EstablishmentId");
            tableMapping.ColumnMappings.Add("CategoryId", "CategoryId");
            tableMapping.ColumnMappings.Add("AreaId", "AreaId");
            tableMapping.ColumnMappings.Add("SubAreaId", "SubAreaId");
            tableMapping.ColumnMappings.Add("ArticleTitle", "ArticleTitle");
            tableMapping.ColumnMappings.Add("ArticleText", "ArticleText");
            tableMapping.ColumnMappings.Add("ArticleAuthorLink", "ArticleAuthorLink");
            tableMapping.ColumnMappings.Add("ArticleImageFileName", "ArticleImageFileName");
            tableMapping.ColumnMappings.Add("ArticleDate", "ArticleDate");
            tableMapping.ColumnMappings.Add("isMainInCat", "isMainInCat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TArticles] WHERE (([ArticleId] = @Original_ArticleId) AND ([ArticleAuthorName] = @Original_ArticleAuthorName) AND ([EstablishmentId] = @Original_EstablishmentId) AND ((@IsNull_CategoryId = 1 AND [CategoryId] IS NULL) OR ([CategoryId] = @Original_CategoryId)) AND ((@IsNull_AreaId = 1 AND [AreaId] IS NULL) OR ([AreaId] = @Original_AreaId)) AND ((@IsNull_SubAreaId = 1 AND [SubAreaId] IS NULL) OR ([SubAreaId] = @Original_SubAreaId)) AND ([ArticleTitle] = @Original_ArticleTitle) AND ((@IsNull_ArticleAuthorLink = 1 AND [ArticleAuthorLink] IS NULL) OR ([ArticleAuthorLink] = @Original_ArticleAuthorLink)) AND ((@IsNull_ArticleImageFileName = 1 AND [ArticleImageFileName] IS NULL) OR ([ArticleImageFileName] = @Original_ArticleImageFileName)) AND ((@IsNull_ArticleDate = 1 AND [ArticleDate] IS NULL) OR ([ArticleDate] = @Original_ArticleDate)) AND ([isMainInCat] = @Original_isMainInCat))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleAuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CategoryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ArticleAuthorLink", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorLink", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleAuthorLink", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorLink", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ArticleImageFileName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleImageFileName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleImageFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleImageFileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ArticleDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isMainInCat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isMainInCat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TArticles] ([ArticleAuthorName], [EstablishmentId], [CategoryId], [AreaId], [SubAreaId], [ArticleTitle], [ArticleText], [ArticleAuthorLink], [ArticleImageFileName], [ArticleDate], [isMainInCat]) VALUES (@ArticleAuthorName, @EstablishmentId, @CategoryId, @AreaId, @SubAreaId, @ArticleTitle, @ArticleText, @ArticleAuthorLink, @ArticleImageFileName, @ArticleDate, @isMainInCat);
SELECT ArticleId, ArticleAuthorName, EstablishmentId, CategoryId, AreaId, SubAreaId, ArticleTitle, ArticleText, ArticleAuthorLink, ArticleImageFileName, ArticleDate, isMainInCat FROM TArticles WHERE (ArticleId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleAuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleText", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleAuthorLink", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorLink", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleImageFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleImageFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isMainInCat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isMainInCat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TArticles] SET [ArticleAuthorName] = @ArticleAuthorName, [EstablishmentId] = @EstablishmentId, [CategoryId] = @CategoryId, [AreaId] = @AreaId, [SubAreaId] = @SubAreaId, [ArticleTitle] = @ArticleTitle, [ArticleText] = @ArticleText, [ArticleAuthorLink] = @ArticleAuthorLink, [ArticleImageFileName] = @ArticleImageFileName, [ArticleDate] = @ArticleDate, [isMainInCat] = @isMainInCat WHERE (([ArticleId] = @Original_ArticleId) AND ([ArticleAuthorName] = @Original_ArticleAuthorName) AND ([EstablishmentId] = @Original_EstablishmentId) AND ((@IsNull_CategoryId = 1 AND [CategoryId] IS NULL) OR ([CategoryId] = @Original_CategoryId)) AND ((@IsNull_AreaId = 1 AND [AreaId] IS NULL) OR ([AreaId] = @Original_AreaId)) AND ((@IsNull_SubAreaId = 1 AND [SubAreaId] IS NULL) OR ([SubAreaId] = @Original_SubAreaId)) AND ([ArticleTitle] = @Original_ArticleTitle) AND ((@IsNull_ArticleAuthorLink = 1 AND [ArticleAuthorLink] IS NULL) OR ([ArticleAuthorLink] = @Original_ArticleAuthorLink)) AND ((@IsNull_ArticleImageFileName = 1 AND [ArticleImageFileName] IS NULL) OR ([ArticleImageFileName] = @Original_ArticleImageFileName)) AND ((@IsNull_ArticleDate = 1 AND [ArticleDate] IS NULL) OR ([ArticleDate] = @Original_ArticleDate)) AND ([isMainInCat] = @Original_isMainInCat));
SELECT ArticleId, ArticleAuthorName, EstablishmentId, CategoryId, AreaId, SubAreaId, ArticleTitle, ArticleText, ArticleAuthorLink, ArticleImageFileName, ArticleDate, isMainInCat FROM TArticles WHERE (ArticleId = @ArticleId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleAuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleText", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleAuthorLink", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorLink", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleImageFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleImageFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isMainInCat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isMainInCat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleAuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_EstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EstablishmentId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CategoryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ArticleAuthorLink", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorLink", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleAuthorLink", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleAuthorLink", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ArticleImageFileName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleImageFileName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleImageFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleImageFileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ArticleDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ArticleDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isMainInCat", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isMainInCat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ArticleId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ArticleId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ArticleId, ArticleAuthorName, EstablishmentId, CategoryId, AreaId, SubArea" +
                "Id, ArticleTitle, ArticleText, ArticleAuthorLink, ArticleImageFileName, ArticleD" +
                "ate, isMainInCat FROM dbo.TArticles";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TArticlesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TArticlesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TArticlesDataTable dataTable = new StudyingDataSet.TArticlesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TArticlesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TArticles");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_ArticleId, string Original_ArticleAuthorName, long Original_EstablishmentId, global::System.Nullable<long> Original_CategoryId, global::System.Nullable<long> Original_AreaId, global::System.Nullable<long> Original_SubAreaId, string Original_ArticleTitle, string Original_ArticleAuthorLink, string Original_ArticleImageFileName, global::System.Nullable<global::System.DateTime> Original_ArticleDate, bool Original_isMainInCat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ArticleId));
            if ((Original_ArticleAuthorName == null)) {
                throw new global::System.ArgumentNullException("Original_ArticleAuthorName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ArticleAuthorName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_EstablishmentId));
            if ((Original_CategoryId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_CategoryId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_AreaId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_SubAreaId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_SubAreaId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_ArticleTitle == null)) {
                throw new global::System.ArgumentNullException("Original_ArticleTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ArticleTitle));
            }
            if ((Original_ArticleAuthorLink == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ArticleAuthorLink));
            }
            if ((Original_ArticleImageFileName == null)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_ArticleImageFileName));
            }
            if ((Original_ArticleDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((System.DateTime)(Original_ArticleDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_isMainInCat));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ArticleAuthorName, long EstablishmentId, global::System.Nullable<long> CategoryId, global::System.Nullable<long> AreaId, global::System.Nullable<long> SubAreaId, string ArticleTitle, string ArticleText, string ArticleAuthorLink, string ArticleImageFileName, global::System.Nullable<global::System.DateTime> ArticleDate, bool isMainInCat) {
            if ((ArticleAuthorName == null)) {
                throw new global::System.ArgumentNullException("ArticleAuthorName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ArticleAuthorName));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(EstablishmentId));
            if ((CategoryId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(CategoryId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AreaId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(AreaId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SubAreaId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((long)(SubAreaId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ArticleTitle == null)) {
                throw new global::System.ArgumentNullException("ArticleTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(ArticleTitle));
            }
            if ((ArticleText == null)) {
                throw new global::System.ArgumentNullException("ArticleText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(ArticleText));
            }
            if ((ArticleAuthorLink == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ArticleAuthorLink));
            }
            if ((ArticleImageFileName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(ArticleImageFileName));
            }
            if ((ArticleDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(ArticleDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(isMainInCat));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ArticleAuthorName, 
                    long EstablishmentId, 
                    global::System.Nullable<long> CategoryId, 
                    global::System.Nullable<long> AreaId, 
                    global::System.Nullable<long> SubAreaId, 
                    string ArticleTitle, 
                    string ArticleText, 
                    string ArticleAuthorLink, 
                    string ArticleImageFileName, 
                    global::System.Nullable<global::System.DateTime> ArticleDate, 
                    bool isMainInCat, 
                    long Original_ArticleId, 
                    string Original_ArticleAuthorName, 
                    long Original_EstablishmentId, 
                    global::System.Nullable<long> Original_CategoryId, 
                    global::System.Nullable<long> Original_AreaId, 
                    global::System.Nullable<long> Original_SubAreaId, 
                    string Original_ArticleTitle, 
                    string Original_ArticleAuthorLink, 
                    string Original_ArticleImageFileName, 
                    global::System.Nullable<global::System.DateTime> Original_ArticleDate, 
                    bool Original_isMainInCat, 
                    long ArticleId) {
            if ((ArticleAuthorName == null)) {
                throw new global::System.ArgumentNullException("ArticleAuthorName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ArticleAuthorName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(EstablishmentId));
            if ((CategoryId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(CategoryId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((AreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(AreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((SubAreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(SubAreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((ArticleTitle == null)) {
                throw new global::System.ArgumentNullException("ArticleTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(ArticleTitle));
            }
            if ((ArticleText == null)) {
                throw new global::System.ArgumentNullException("ArticleText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(ArticleText));
            }
            if ((ArticleAuthorLink == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ArticleAuthorLink));
            }
            if ((ArticleImageFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(ArticleImageFileName));
            }
            if ((ArticleDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(ArticleDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(isMainInCat));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(Original_ArticleId));
            if ((Original_ArticleAuthorName == null)) {
                throw new global::System.ArgumentNullException("Original_ArticleAuthorName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_ArticleAuthorName));
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_EstablishmentId));
            if ((Original_CategoryId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_CategoryId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_AreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_AreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_SubAreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((long)(Original_SubAreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            if ((Original_ArticleTitle == null)) {
                throw new global::System.ArgumentNullException("Original_ArticleTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_ArticleTitle));
            }
            if ((Original_ArticleAuthorLink == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_ArticleAuthorLink));
            }
            if ((Original_ArticleImageFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ArticleImageFileName));
            }
            if ((Original_ArticleDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(Original_ArticleDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((bool)(Original_isMainInCat));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(ArticleId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ArticleAuthorName, 
                    long EstablishmentId, 
                    global::System.Nullable<long> CategoryId, 
                    global::System.Nullable<long> AreaId, 
                    global::System.Nullable<long> SubAreaId, 
                    string ArticleTitle, 
                    string ArticleText, 
                    string ArticleAuthorLink, 
                    string ArticleImageFileName, 
                    global::System.Nullable<global::System.DateTime> ArticleDate, 
                    bool isMainInCat, 
                    long Original_ArticleId, 
                    string Original_ArticleAuthorName, 
                    long Original_EstablishmentId, 
                    global::System.Nullable<long> Original_CategoryId, 
                    global::System.Nullable<long> Original_AreaId, 
                    global::System.Nullable<long> Original_SubAreaId, 
                    string Original_ArticleTitle, 
                    string Original_ArticleAuthorLink, 
                    string Original_ArticleImageFileName, 
                    global::System.Nullable<global::System.DateTime> Original_ArticleDate, 
                    bool Original_isMainInCat) {
            return this.Update(ArticleAuthorName, EstablishmentId, CategoryId, AreaId, SubAreaId, ArticleTitle, ArticleText, ArticleAuthorLink, ArticleImageFileName, ArticleDate, isMainInCat, Original_ArticleId, Original_ArticleAuthorName, Original_EstablishmentId, Original_CategoryId, Original_AreaId, Original_SubAreaId, Original_ArticleTitle, Original_ArticleAuthorLink, Original_ArticleImageFileName, Original_ArticleDate, Original_isMainInCat, Original_ArticleId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCategoriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCategoriesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCategories";
            tableMapping.ColumnMappings.Add("CategoryId", "CategoryId");
            tableMapping.ColumnMappings.Add("CategoryName", "CategoryName");
            tableMapping.ColumnMappings.Add("CategoeyDesc", "CategoeyDesc");
            tableMapping.ColumnMappings.Add("CategoryKeywords", "CategoryKeywords");
            tableMapping.ColumnMappings.Add("CategoryTitle", "CategoryTitle");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCategories] WHERE (([CategoryId] = @Original_CategoryId) AND ([CategoryName] = @Original_CategoryName) AND ([CategoeyDesc] = @Original_CategoeyDesc) AND ([CategoryKeywords] = @Original_CategoryKeywords) AND ([CategoryTitle] = @Original_CategoryTitle))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoeyDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoeyDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryKeywords", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCategories] ([CategoryId], [CategoryName], [CategoeyDesc], [CategoryKeywords], [CategoryTitle]) VALUES (@CategoryId, @CategoryName, @CategoeyDesc, @CategoryKeywords, @CategoryTitle);
SELECT CategoryId, CategoryName, CategoeyDesc, CategoryKeywords, CategoryTitle FROM TCategories WHERE (CategoryId = @CategoryId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoeyDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoeyDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryKeywords", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TCategories] SET [CategoryId] = @CategoryId, [CategoryName] = @CategoryName, [CategoeyDesc] = @CategoeyDesc, [CategoryKeywords] = @CategoryKeywords, [CategoryTitle] = @CategoryTitle WHERE (([CategoryId] = @Original_CategoryId) AND ([CategoryName] = @Original_CategoryName) AND ([CategoeyDesc] = @Original_CategoeyDesc) AND ([CategoryKeywords] = @Original_CategoryKeywords) AND ([CategoryTitle] = @Original_CategoryTitle));
SELECT CategoryId, CategoryName, CategoeyDesc, CategoryKeywords, CategoryTitle FROM TCategories WHERE (CategoryId = @CategoryId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoeyDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoeyDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryKeywords", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoeyDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoeyDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryKeywords", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CategoryId, CategoryName, CategoeyDesc, CategoryKeywords, CategoryTitle FR" +
                "OM dbo.TCategories";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TCategoriesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TCategoriesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TCategoriesDataTable dataTable = new StudyingDataSet.TCategoriesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TCategoriesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCategories");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_CategoryId, string Original_CategoryName, string Original_CategoeyDesc, string Original_CategoryKeywords, string Original_CategoryTitle) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CategoryId));
            if ((Original_CategoryName == null)) {
                throw new global::System.ArgumentNullException("Original_CategoryName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CategoryName));
            }
            if ((Original_CategoeyDesc == null)) {
                throw new global::System.ArgumentNullException("Original_CategoeyDesc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_CategoeyDesc));
            }
            if ((Original_CategoryKeywords == null)) {
                throw new global::System.ArgumentNullException("Original_CategoryKeywords");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CategoryKeywords));
            }
            if ((Original_CategoryTitle == null)) {
                throw new global::System.ArgumentNullException("Original_CategoryTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_CategoryTitle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long CategoryId, string CategoryName, string CategoeyDesc, string CategoryKeywords, string CategoryTitle) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(CategoryId));
            if ((CategoryName == null)) {
                throw new global::System.ArgumentNullException("CategoryName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CategoryName));
            }
            if ((CategoeyDesc == null)) {
                throw new global::System.ArgumentNullException("CategoeyDesc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(CategoeyDesc));
            }
            if ((CategoryKeywords == null)) {
                throw new global::System.ArgumentNullException("CategoryKeywords");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CategoryKeywords));
            }
            if ((CategoryTitle == null)) {
                throw new global::System.ArgumentNullException("CategoryTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CategoryTitle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long CategoryId, string CategoryName, string CategoeyDesc, string CategoryKeywords, string CategoryTitle, long Original_CategoryId, string Original_CategoryName, string Original_CategoeyDesc, string Original_CategoryKeywords, string Original_CategoryTitle) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(CategoryId));
            if ((CategoryName == null)) {
                throw new global::System.ArgumentNullException("CategoryName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CategoryName));
            }
            if ((CategoeyDesc == null)) {
                throw new global::System.ArgumentNullException("CategoeyDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(CategoeyDesc));
            }
            if ((CategoryKeywords == null)) {
                throw new global::System.ArgumentNullException("CategoryKeywords");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CategoryKeywords));
            }
            if ((CategoryTitle == null)) {
                throw new global::System.ArgumentNullException("CategoryTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CategoryTitle));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_CategoryId));
            if ((Original_CategoryName == null)) {
                throw new global::System.ArgumentNullException("Original_CategoryName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_CategoryName));
            }
            if ((Original_CategoeyDesc == null)) {
                throw new global::System.ArgumentNullException("Original_CategoeyDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CategoeyDesc));
            }
            if ((Original_CategoryKeywords == null)) {
                throw new global::System.ArgumentNullException("Original_CategoryKeywords");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_CategoryKeywords));
            }
            if ((Original_CategoryTitle == null)) {
                throw new global::System.ArgumentNullException("Original_CategoryTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_CategoryTitle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CategoryName, string CategoeyDesc, string CategoryKeywords, string CategoryTitle, long Original_CategoryId, string Original_CategoryName, string Original_CategoeyDesc, string Original_CategoryKeywords, string Original_CategoryTitle) {
            return this.Update(Original_CategoryId, CategoryName, CategoeyDesc, CategoryKeywords, CategoryTitle, Original_CategoryId, Original_CategoryName, Original_CategoeyDesc, Original_CategoryKeywords, Original_CategoryTitle);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TCoursesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TCoursesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TCourses";
            tableMapping.ColumnMappings.Add("CourseId", "CourseId");
            tableMapping.ColumnMappings.Add("CategoryCourse", "CategoryCourse");
            tableMapping.ColumnMappings.Add("AreaCourse", "AreaCourse");
            tableMapping.ColumnMappings.Add("SubAreaCourse", "SubAreaCourse");
            tableMapping.ColumnMappings.Add("SchoolIdCourse", "SchoolIdCourse");
            tableMapping.ColumnMappings.Add("CousePhone", "CousePhone");
            tableMapping.ColumnMappings.Add("CourseDuration", "CourseDuration");
            tableMapping.ColumnMappings.Add("CourseRequirements", "CourseRequirements");
            tableMapping.ColumnMappings.Add("CourseMatriculationMin", "CourseMatriculationMin");
            tableMapping.ColumnMappings.Add("CoursePsychometricMin", "CoursePsychometricMin");
            tableMapping.ColumnMappings.Add("CourseDescription", "CourseDescription");
            tableMapping.ColumnMappings.Add("CourseName", "CourseName");
            tableMapping.ColumnMappings.Add("Diploma", "Diploma");
            tableMapping.ColumnMappings.Add("isInHomePage", "isInHomePage");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TCourses] WHERE (([CourseId] = @Original_CourseId) AND ([CategoryCourse] = @Original_CategoryCourse) AND ([AreaCourse] = @Original_AreaCourse) AND ((@IsNull_SubAreaCourse = 1 AND [SubAreaCourse] IS NULL) OR ([SubAreaCourse] = @Original_SubAreaCourse)) AND ([SchoolIdCourse] = @Original_SchoolIdCourse) AND ((@IsNull_CousePhone = 1 AND [CousePhone] IS NULL) OR ([CousePhone] = @Original_CousePhone)) AND ((@IsNull_CourseDuration = 1 AND [CourseDuration] IS NULL) OR ([CourseDuration] = @Original_CourseDuration)) AND ((@IsNull_CourseRequirements = 1 AND [CourseRequirements] IS NULL) OR ([CourseRequirements] = @Original_CourseRequirements)) AND ((@IsNull_CourseMatriculationMin = 1 AND [CourseMatriculationMin] IS NULL) OR ([CourseMatriculationMin] = @Original_CourseMatriculationMin)) AND ((@IsNull_CoursePsychometricMin = 1 AND [CoursePsychometricMin] IS NULL) OR ([CoursePsychometricMin] = @Original_CoursePsychometricMin)) AND ([CourseName] = @Original_CourseName) AND ((@IsNull_Diploma = 1 AND [Diploma] IS NULL) OR ([Diploma] = @Original_Diploma)) AND ([isInHomePage] = @Original_isInHomePage))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolIdCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolIdCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CousePhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CousePhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CousePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CousePhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseDuration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDuration", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseDuration", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDuration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseRequirements", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseRequirements", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseRequirements", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseRequirements", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseMatriculationMin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseMatriculationMin", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseMatriculationMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseMatriculationMin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoursePsychometricMin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoursePsychometricMin", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoursePsychometricMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoursePsychometricMin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Diploma", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Diploma", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Diploma", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Diploma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isInHomePage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isInHomePage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TCourses] ([CategoryCourse], [AreaCourse], [SubAreaCourse], [SchoolIdCourse], [CousePhone], [CourseDuration], [CourseRequirements], [CourseMatriculationMin], [CoursePsychometricMin], [CourseDescription], [CourseName], [Diploma], [isInHomePage]) VALUES (@CategoryCourse, @AreaCourse, @SubAreaCourse, @SchoolIdCourse, @CousePhone, @CourseDuration, @CourseRequirements, @CourseMatriculationMin, @CoursePsychometricMin, @CourseDescription, @CourseName, @Diploma, @isInHomePage);
SELECT CourseId, CategoryCourse, AreaCourse, SubAreaCourse, SchoolIdCourse, CousePhone, CourseDuration, CourseRequirements, CourseMatriculationMin, CoursePsychometricMin, CourseDescription, CourseName, Diploma, isInHomePage FROM TCourses WHERE (CourseId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolIdCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolIdCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CousePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CousePhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseDuration", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDuration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseRequirements", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseRequirements", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseMatriculationMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseMatriculationMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoursePsychometricMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoursePsychometricMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Diploma", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Diploma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isInHomePage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isInHomePage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TCourses] SET [CategoryCourse] = @CategoryCourse, [AreaCourse] = @A" +
                "reaCourse, [SubAreaCourse] = @SubAreaCourse, [SchoolIdCourse] = @SchoolIdCourse," +
                " [CousePhone] = @CousePhone, [CourseDuration] = @CourseDuration, [CourseRequirem" +
                "ents] = @CourseRequirements, [CourseMatriculationMin] = @CourseMatriculationMin," +
                " [CoursePsychometricMin] = @CoursePsychometricMin, [CourseDescription] = @Course" +
                "Description, [CourseName] = @CourseName, [Diploma] = @Diploma, [isInHomePage] = " +
                "@isInHomePage WHERE (([CourseId] = @Original_CourseId) AND ([CategoryCourse] = @" +
                "Original_CategoryCourse) AND ([AreaCourse] = @Original_AreaCourse) AND ((@IsNull" +
                "_SubAreaCourse = 1 AND [SubAreaCourse] IS NULL) OR ([SubAreaCourse] = @Original_" +
                "SubAreaCourse)) AND ([SchoolIdCourse] = @Original_SchoolIdCourse) AND ((@IsNull_" +
                "CousePhone = 1 AND [CousePhone] IS NULL) OR ([CousePhone] = @Original_CousePhone" +
                ")) AND ((@IsNull_CourseDuration = 1 AND [CourseDuration] IS NULL) OR ([CourseDur" +
                "ation] = @Original_CourseDuration)) AND ((@IsNull_CourseRequirements = 1 AND [Co" +
                "urseRequirements] IS NULL) OR ([CourseRequirements] = @Original_CourseRequiremen" +
                "ts)) AND ((@IsNull_CourseMatriculationMin = 1 AND [CourseMatriculationMin] IS NU" +
                "LL) OR ([CourseMatriculationMin] = @Original_CourseMatriculationMin)) AND ((@IsN" +
                "ull_CoursePsychometricMin = 1 AND [CoursePsychometricMin] IS NULL) OR ([CoursePs" +
                "ychometricMin] = @Original_CoursePsychometricMin)) AND ([CourseName] = @Original" +
                "_CourseName) AND ((@IsNull_Diploma = 1 AND [Diploma] IS NULL) OR ([Diploma] = @O" +
                "riginal_Diploma)) AND ([isInHomePage] = @Original_isInHomePage));\r\nSELECT Course" +
                "Id, CategoryCourse, AreaCourse, SubAreaCourse, SchoolIdCourse, CousePhone, Cours" +
                "eDuration, CourseRequirements, CourseMatriculationMin, CoursePsychometricMin, Co" +
                "urseDescription, CourseName, Diploma, isInHomePage FROM TCourses WHERE (CourseId" +
                " = @CourseId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolIdCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolIdCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CousePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CousePhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseDuration", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDuration", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseRequirements", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseRequirements", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseMatriculationMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseMatriculationMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoursePsychometricMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoursePsychometricMin", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseDescription", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Diploma", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Diploma", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isInHomePage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isInHomePage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolIdCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolIdCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CousePhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CousePhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CousePhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CousePhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseDuration", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDuration", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseDuration", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseDuration", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseRequirements", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseRequirements", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseRequirements", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseRequirements", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseMatriculationMin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseMatriculationMin", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseMatriculationMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseMatriculationMin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoursePsychometricMin", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoursePsychometricMin", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoursePsychometricMin", global::System.Data.SqlDbType.Real, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoursePsychometricMin", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Diploma", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Diploma", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Diploma", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Diploma", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isInHomePage", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isInHomePage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CourseId, CategoryCourse, AreaCourse, SubAreaCourse, SchoolIdCourse, Couse" +
                "Phone, CourseDuration, CourseRequirements, CourseMatriculationMin, CoursePsychom" +
                "etricMin, CourseDescription, CourseName, Diploma, isInHomePage FROM dbo.TCourses" +
                "";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TCoursesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TCoursesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TCoursesDataTable dataTable = new StudyingDataSet.TCoursesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TCoursesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TCourses");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_CourseId, long Original_CategoryCourse, long Original_AreaCourse, global::System.Nullable<long> Original_SubAreaCourse, long Original_SchoolIdCourse, string Original_CousePhone, string Original_CourseDuration, string Original_CourseRequirements, global::System.Nullable<float> Original_CourseMatriculationMin, global::System.Nullable<float> Original_CoursePsychometricMin, string Original_CourseName, string Original_Diploma, bool Original_isInHomePage) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CourseId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_CategoryCourse));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_AreaCourse));
            if ((Original_SubAreaCourse.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_SubAreaCourse.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_SchoolIdCourse));
            if ((Original_CousePhone == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_CousePhone));
            }
            if ((Original_CourseDuration == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_CourseDuration));
            }
            if ((Original_CourseRequirements == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_CourseRequirements));
            }
            if ((Original_CourseMatriculationMin.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[13].Value = ((float)(Original_CourseMatriculationMin.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_CoursePsychometricMin.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((float)(Original_CoursePsychometricMin.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_CourseName == null)) {
                throw new global::System.ArgumentNullException("Original_CourseName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_CourseName));
            }
            if ((Original_Diploma == null)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_Diploma));
            }
            this.Adapter.DeleteCommand.Parameters[19].Value = ((bool)(Original_isInHomePage));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long CategoryCourse, long AreaCourse, global::System.Nullable<long> SubAreaCourse, long SchoolIdCourse, string CousePhone, string CourseDuration, string CourseRequirements, global::System.Nullable<float> CourseMatriculationMin, global::System.Nullable<float> CoursePsychometricMin, string CourseDescription, string CourseName, string Diploma, bool isInHomePage) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(CategoryCourse));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(AreaCourse));
            if ((SubAreaCourse.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((long)(SubAreaCourse.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(SchoolIdCourse));
            if ((CousePhone == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(CousePhone));
            }
            if ((CourseDuration == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CourseDuration));
            }
            if ((CourseRequirements == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(CourseRequirements));
            }
            if ((CourseMatriculationMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((float)(CourseMatriculationMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((CoursePsychometricMin.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((float)(CoursePsychometricMin.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CourseDescription == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(CourseDescription));
            }
            if ((CourseName == null)) {
                throw new global::System.ArgumentNullException("CourseName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(CourseName));
            }
            if ((Diploma == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(Diploma));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((bool)(isInHomePage));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long CategoryCourse, 
                    long AreaCourse, 
                    global::System.Nullable<long> SubAreaCourse, 
                    long SchoolIdCourse, 
                    string CousePhone, 
                    string CourseDuration, 
                    string CourseRequirements, 
                    global::System.Nullable<float> CourseMatriculationMin, 
                    global::System.Nullable<float> CoursePsychometricMin, 
                    string CourseDescription, 
                    string CourseName, 
                    string Diploma, 
                    bool isInHomePage, 
                    long Original_CourseId, 
                    long Original_CategoryCourse, 
                    long Original_AreaCourse, 
                    global::System.Nullable<long> Original_SubAreaCourse, 
                    long Original_SchoolIdCourse, 
                    string Original_CousePhone, 
                    string Original_CourseDuration, 
                    string Original_CourseRequirements, 
                    global::System.Nullable<float> Original_CourseMatriculationMin, 
                    global::System.Nullable<float> Original_CoursePsychometricMin, 
                    string Original_CourseName, 
                    string Original_Diploma, 
                    bool Original_isInHomePage, 
                    long CourseId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(CategoryCourse));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(AreaCourse));
            if ((SubAreaCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(SubAreaCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(SchoolIdCourse));
            if ((CousePhone == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(CousePhone));
            }
            if ((CourseDuration == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CourseDuration));
            }
            if ((CourseRequirements == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(CourseRequirements));
            }
            if ((CourseMatriculationMin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((float)(CourseMatriculationMin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((CoursePsychometricMin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((float)(CoursePsychometricMin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((CourseDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(CourseDescription));
            }
            if ((CourseName == null)) {
                throw new global::System.ArgumentNullException("CourseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(CourseName));
            }
            if ((Diploma == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Diploma));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((bool)(isInHomePage));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_CourseId));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((long)(Original_CategoryCourse));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((long)(Original_AreaCourse));
            if ((Original_SubAreaCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_SubAreaCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_SchoolIdCourse));
            if ((Original_CousePhone == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_CousePhone));
            }
            if ((Original_CourseDuration == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_CourseDuration));
            }
            if ((Original_CourseRequirements == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_CourseRequirements));
            }
            if ((Original_CourseMatriculationMin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((float)(Original_CourseMatriculationMin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_CoursePsychometricMin.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((float)(Original_CoursePsychometricMin.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_CourseName == null)) {
                throw new global::System.ArgumentNullException("Original_CourseName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_CourseName));
            }
            if ((Original_Diploma == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_Diploma));
            }
            this.Adapter.UpdateCommand.Parameters[32].Value = ((bool)(Original_isInHomePage));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(CourseId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long CategoryCourse, 
                    long AreaCourse, 
                    global::System.Nullable<long> SubAreaCourse, 
                    long SchoolIdCourse, 
                    string CousePhone, 
                    string CourseDuration, 
                    string CourseRequirements, 
                    global::System.Nullable<float> CourseMatriculationMin, 
                    global::System.Nullable<float> CoursePsychometricMin, 
                    string CourseDescription, 
                    string CourseName, 
                    string Diploma, 
                    bool isInHomePage, 
                    long Original_CourseId, 
                    long Original_CategoryCourse, 
                    long Original_AreaCourse, 
                    global::System.Nullable<long> Original_SubAreaCourse, 
                    long Original_SchoolIdCourse, 
                    string Original_CousePhone, 
                    string Original_CourseDuration, 
                    string Original_CourseRequirements, 
                    global::System.Nullable<float> Original_CourseMatriculationMin, 
                    global::System.Nullable<float> Original_CoursePsychometricMin, 
                    string Original_CourseName, 
                    string Original_Diploma, 
                    bool Original_isInHomePage) {
            return this.Update(CategoryCourse, AreaCourse, SubAreaCourse, SchoolIdCourse, CousePhone, CourseDuration, CourseRequirements, CourseMatriculationMin, CoursePsychometricMin, CourseDescription, CourseName, Diploma, isInHomePage, Original_CourseId, Original_CategoryCourse, Original_AreaCourse, Original_SubAreaCourse, Original_SchoolIdCourse, Original_CousePhone, Original_CourseDuration, Original_CourseRequirements, Original_CourseMatriculationMin, Original_CoursePsychometricMin, Original_CourseName, Original_Diploma, Original_isInHomePage, Original_CourseId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TEstablishmentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TEstablishmentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TEstablishments";
            tableMapping.ColumnMappings.Add("SchoolId", "SchoolId");
            tableMapping.ColumnMappings.Add("RegionId", "RegionId");
            tableMapping.ColumnMappings.Add("SchoolAddress", "SchoolAddress");
            tableMapping.ColumnMappings.Add("SchoolMail_1", "SchoolMail_1");
            tableMapping.ColumnMappings.Add("SchoolMail_2", "SchoolMail_2");
            tableMapping.ColumnMappings.Add("SchoolInternetSite", "SchoolInternetSite");
            tableMapping.ColumnMappings.Add("SchoolName", "SchoolName");
            tableMapping.ColumnMappings.Add("SchoolLogoImageFile", "SchoolLogoImageFile");
            tableMapping.ColumnMappings.Add("MainSchoolId", "MainSchoolId");
            tableMapping.ColumnMappings.Add("SmallComment", "SmallComment");
            tableMapping.ColumnMappings.Add("BigComment", "BigComment");
            tableMapping.ColumnMappings.Add("StudentsNumber", "StudentsNumber");
            tableMapping.ColumnMappings.Add("orderField", "orderField");
            tableMapping.ColumnMappings.Add("smallLogo", "smallLogo");
            tableMapping.ColumnMappings.Add("lastReviewTitle", "lastReviewTitle");
            tableMapping.ColumnMappings.Add("lastReviewText", "lastReviewText");
            tableMapping.ColumnMappings.Add("SchoolTitle", "SchoolTitle");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TEstablishments] WHERE (([SchoolId] = @Original_SchoolId) AND ([RegionId] = @Original_RegionId) AND ((@IsNull_SchoolAddress = 1 AND [SchoolAddress] IS NULL) OR ([SchoolAddress] = @Original_SchoolAddress)) AND ((@IsNull_SchoolMail_1 = 1 AND [SchoolMail_1] IS NULL) OR ([SchoolMail_1] = @Original_SchoolMail_1)) AND ((@IsNull_SchoolMail_2 = 1 AND [SchoolMail_2] IS NULL) OR ([SchoolMail_2] = @Original_SchoolMail_2)) AND ((@IsNull_SchoolInternetSite = 1 AND [SchoolInternetSite] IS NULL) OR ([SchoolInternetSite] = @Original_SchoolInternetSite)) AND ([SchoolName] = @Original_SchoolName) AND ((@IsNull_SchoolLogoImageFile = 1 AND [SchoolLogoImageFile] IS NULL) OR ([SchoolLogoImageFile] = @Original_SchoolLogoImageFile)) AND ((@IsNull_MainSchoolId = 1 AND [MainSchoolId] IS NULL) OR ([MainSchoolId] = @Original_MainSchoolId)) AND ([StudentsNumber] = @Original_StudentsNumber) AND ([orderField] = @Original_orderField) AND ([smallLogo] = @Original_smallLogo) AND ((@IsNull_lastReviewTitle = 1 AND [lastReviewTitle] IS NULL) OR ([lastReviewTitle] = @Original_lastReviewTitle)) AND ([SchoolTitle] = @Original_SchoolTitle))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolMail_1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolMail_1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolMail_2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolMail_2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolInternetSite", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolInternetSite", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolInternetSite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolInternetSite", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolLogoImageFile", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolLogoImageFile", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolLogoImageFile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolLogoImageFile", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MainSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainSchoolId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MainSchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainSchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudentsNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudentsNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_orderField", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orderField", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_smallLogo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "smallLogo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_lastReviewTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lastReviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TEstablishments] ([RegionId], [SchoolAddress], [SchoolMail_1], [SchoolMail_2], [SchoolInternetSite], [SchoolName], [SchoolLogoImageFile], [MainSchoolId], [SmallComment], [BigComment], [StudentsNumber], [orderField], [smallLogo], [lastReviewTitle], [lastReviewText], [SchoolTitle]) VALUES (@RegionId, @SchoolAddress, @SchoolMail_1, @SchoolMail_2, @SchoolInternetSite, @SchoolName, @SchoolLogoImageFile, @MainSchoolId, @SmallComment, @BigComment, @StudentsNumber, @orderField, @smallLogo, @lastReviewTitle, @lastReviewText, @SchoolTitle);
SELECT SchoolId, RegionId, SchoolAddress, SchoolMail_1, SchoolMail_2, SchoolInternetSite, SchoolName, SchoolLogoImageFile, MainSchoolId, SmallComment, BigComment, StudentsNumber, orderField, smallLogo, lastReviewTitle, lastReviewText, SchoolTitle FROM TEstablishments WHERE (SchoolId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolMail_1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolMail_2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolInternetSite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolInternetSite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolLogoImageFile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolLogoImageFile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MainSchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainSchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SmallComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SmallComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BigComment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BigComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudentsNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudentsNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orderField", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orderField", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@smallLogo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "smallLogo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastReviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastReviewText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TEstablishments] SET [RegionId] = @RegionId, [SchoolAddress] = @Sch" +
                "oolAddress, [SchoolMail_1] = @SchoolMail_1, [SchoolMail_2] = @SchoolMail_2, [Sch" +
                "oolInternetSite] = @SchoolInternetSite, [SchoolName] = @SchoolName, [SchoolLogoI" +
                "mageFile] = @SchoolLogoImageFile, [MainSchoolId] = @MainSchoolId, [SmallComment]" +
                " = @SmallComment, [BigComment] = @BigComment, [StudentsNumber] = @StudentsNumber" +
                ", [orderField] = @orderField, [smallLogo] = @smallLogo, [lastReviewTitle] = @las" +
                "tReviewTitle, [lastReviewText] = @lastReviewText, [SchoolTitle] = @SchoolTitle W" +
                "HERE (([SchoolId] = @Original_SchoolId) AND ([RegionId] = @Original_RegionId) AN" +
                "D ((@IsNull_SchoolAddress = 1 AND [SchoolAddress] IS NULL) OR ([SchoolAddress] =" +
                " @Original_SchoolAddress)) AND ((@IsNull_SchoolMail_1 = 1 AND [SchoolMail_1] IS " +
                "NULL) OR ([SchoolMail_1] = @Original_SchoolMail_1)) AND ((@IsNull_SchoolMail_2 =" +
                " 1 AND [SchoolMail_2] IS NULL) OR ([SchoolMail_2] = @Original_SchoolMail_2)) AND" +
                " ((@IsNull_SchoolInternetSite = 1 AND [SchoolInternetSite] IS NULL) OR ([SchoolI" +
                "nternetSite] = @Original_SchoolInternetSite)) AND ([SchoolName] = @Original_Scho" +
                "olName) AND ((@IsNull_SchoolLogoImageFile = 1 AND [SchoolLogoImageFile] IS NULL)" +
                " OR ([SchoolLogoImageFile] = @Original_SchoolLogoImageFile)) AND ((@IsNull_MainS" +
                "choolId = 1 AND [MainSchoolId] IS NULL) OR ([MainSchoolId] = @Original_MainSchoo" +
                "lId)) AND ([StudentsNumber] = @Original_StudentsNumber) AND ([orderField] = @Ori" +
                "ginal_orderField) AND ([smallLogo] = @Original_smallLogo) AND ((@IsNull_lastRevi" +
                "ewTitle = 1 AND [lastReviewTitle] IS NULL) OR ([lastReviewTitle] = @Original_las" +
                "tReviewTitle)) AND ([SchoolTitle] = @Original_SchoolTitle));\r\nSELECT SchoolId, R" +
                "egionId, SchoolAddress, SchoolMail_1, SchoolMail_2, SchoolInternetSite, SchoolNa" +
                "me, SchoolLogoImageFile, MainSchoolId, SmallComment, BigComment, StudentsNumber," +
                " orderField, smallLogo, lastReviewTitle, lastReviewText, SchoolTitle FROM TEstab" +
                "lishments WHERE (SchoolId = @SchoolId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolMail_1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_1", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolMail_2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolInternetSite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolInternetSite", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolLogoImageFile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolLogoImageFile", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MainSchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainSchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SmallComment", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SmallComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BigComment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BigComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StudentsNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudentsNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orderField", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orderField", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@smallLogo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "smallLogo", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastReviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastReviewText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolMail_1", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_1", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolMail_1", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_1", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolMail_2", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_2", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolMail_2", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolMail_2", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolInternetSite", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolInternetSite", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolInternetSite", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolInternetSite", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SchoolLogoImageFile", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolLogoImageFile", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolLogoImageFile", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolLogoImageFile", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MainSchoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainSchoolId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MainSchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainSchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StudentsNumber", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StudentsNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_orderField", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "orderField", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_smallLogo", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "smallLogo", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_lastReviewTitle", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewTitle", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_lastReviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "lastReviewTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT SchoolId, RegionId, SchoolAddress, SchoolMail_1, SchoolMail_2, SchoolInternetSite, SchoolName, SchoolLogoImageFile, MainSchoolId, SmallComment, BigComment, StudentsNumber, orderField, smallLogo, lastReviewTitle, lastReviewText, SchoolTitle FROM dbo.TEstablishments";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TEstablishmentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TEstablishmentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TEstablishmentsDataTable dataTable = new StudyingDataSet.TEstablishmentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TEstablishmentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TEstablishments");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SchoolId, long Original_RegionId, string Original_SchoolAddress, string Original_SchoolMail_1, string Original_SchoolMail_2, string Original_SchoolInternetSite, string Original_SchoolName, string Original_SchoolLogoImageFile, global::System.Nullable<long> Original_MainSchoolId, int Original_StudentsNumber, int Original_orderField, string Original_smallLogo, string Original_lastReviewTitle, string Original_SchoolTitle) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SchoolId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_RegionId));
            if ((Original_SchoolAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_SchoolAddress));
            }
            if ((Original_SchoolMail_1 == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_SchoolMail_1));
            }
            if ((Original_SchoolMail_2 == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_SchoolMail_2));
            }
            if ((Original_SchoolInternetSite == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_SchoolInternetSite));
            }
            if ((Original_SchoolName == null)) {
                throw new global::System.ArgumentNullException("Original_SchoolName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_SchoolName));
            }
            if ((Original_SchoolLogoImageFile == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_SchoolLogoImageFile));
            }
            if ((Original_MainSchoolId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_MainSchoolId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_StudentsNumber));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_orderField));
            if ((Original_smallLogo == null)) {
                throw new global::System.ArgumentNullException("Original_smallLogo");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((string)(Original_smallLogo));
            }
            if ((Original_lastReviewTitle == null)) {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[19].Value = ((string)(Original_lastReviewTitle));
            }
            if ((Original_SchoolTitle == null)) {
                throw new global::System.ArgumentNullException("Original_SchoolTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[20].Value = ((string)(Original_SchoolTitle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    long RegionId, 
                    string SchoolAddress, 
                    string SchoolMail_1, 
                    string SchoolMail_2, 
                    string SchoolInternetSite, 
                    string SchoolName, 
                    string SchoolLogoImageFile, 
                    global::System.Nullable<long> MainSchoolId, 
                    string SmallComment, 
                    string BigComment, 
                    int StudentsNumber, 
                    int orderField, 
                    string smallLogo, 
                    string lastReviewTitle, 
                    string lastReviewText, 
                    string SchoolTitle) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(RegionId));
            if ((SchoolAddress == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SchoolAddress));
            }
            if ((SchoolMail_1 == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(SchoolMail_1));
            }
            if ((SchoolMail_2 == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SchoolMail_2));
            }
            if ((SchoolInternetSite == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SchoolInternetSite));
            }
            if ((SchoolName == null)) {
                throw new global::System.ArgumentNullException("SchoolName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(SchoolName));
            }
            if ((SchoolLogoImageFile == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(SchoolLogoImageFile));
            }
            if ((MainSchoolId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(MainSchoolId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SmallComment == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(SmallComment));
            }
            if ((BigComment == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(BigComment));
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(StudentsNumber));
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(orderField));
            if ((smallLogo == null)) {
                throw new global::System.ArgumentNullException("smallLogo");
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = ((string)(smallLogo));
            }
            if ((lastReviewTitle == null)) {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((string)(lastReviewTitle));
            }
            if ((lastReviewText == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(lastReviewText));
            }
            if ((SchoolTitle == null)) {
                throw new global::System.ArgumentNullException("SchoolTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(SchoolTitle));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long RegionId, 
                    string SchoolAddress, 
                    string SchoolMail_1, 
                    string SchoolMail_2, 
                    string SchoolInternetSite, 
                    string SchoolName, 
                    string SchoolLogoImageFile, 
                    global::System.Nullable<long> MainSchoolId, 
                    string SmallComment, 
                    string BigComment, 
                    int StudentsNumber, 
                    int orderField, 
                    string smallLogo, 
                    string lastReviewTitle, 
                    string lastReviewText, 
                    string SchoolTitle, 
                    long Original_SchoolId, 
                    long Original_RegionId, 
                    string Original_SchoolAddress, 
                    string Original_SchoolMail_1, 
                    string Original_SchoolMail_2, 
                    string Original_SchoolInternetSite, 
                    string Original_SchoolName, 
                    string Original_SchoolLogoImageFile, 
                    global::System.Nullable<long> Original_MainSchoolId, 
                    int Original_StudentsNumber, 
                    int Original_orderField, 
                    string Original_smallLogo, 
                    string Original_lastReviewTitle, 
                    string Original_SchoolTitle, 
                    long SchoolId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(RegionId));
            if ((SchoolAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SchoolAddress));
            }
            if ((SchoolMail_1 == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(SchoolMail_1));
            }
            if ((SchoolMail_2 == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SchoolMail_2));
            }
            if ((SchoolInternetSite == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SchoolInternetSite));
            }
            if ((SchoolName == null)) {
                throw new global::System.ArgumentNullException("SchoolName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(SchoolName));
            }
            if ((SchoolLogoImageFile == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(SchoolLogoImageFile));
            }
            if ((MainSchoolId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(MainSchoolId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((SmallComment == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(SmallComment));
            }
            if ((BigComment == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(BigComment));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(StudentsNumber));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(orderField));
            if ((smallLogo == null)) {
                throw new global::System.ArgumentNullException("smallLogo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(smallLogo));
            }
            if ((lastReviewTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(lastReviewTitle));
            }
            if ((lastReviewText == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(lastReviewText));
            }
            if ((SchoolTitle == null)) {
                throw new global::System.ArgumentNullException("SchoolTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(SchoolTitle));
            }
            this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_SchoolId));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((long)(Original_RegionId));
            if ((Original_SchoolAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_SchoolAddress));
            }
            if ((Original_SchoolMail_1 == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_SchoolMail_1));
            }
            if ((Original_SchoolMail_2 == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_SchoolMail_2));
            }
            if ((Original_SchoolInternetSite == null)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_SchoolInternetSite));
            }
            if ((Original_SchoolName == null)) {
                throw new global::System.ArgumentNullException("Original_SchoolName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_SchoolName));
            }
            if ((Original_SchoolLogoImageFile == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_SchoolLogoImageFile));
            }
            if ((Original_MainSchoolId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(Original_MainSchoolId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Original_StudentsNumber));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(Original_orderField));
            if ((Original_smallLogo == null)) {
                throw new global::System.ArgumentNullException("Original_smallLogo");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_smallLogo));
            }
            if ((Original_lastReviewTitle == null)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_lastReviewTitle));
            }
            if ((Original_SchoolTitle == null)) {
                throw new global::System.ArgumentNullException("Original_SchoolTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[36].Value = ((string)(Original_SchoolTitle));
            }
            this.Adapter.UpdateCommand.Parameters[37].Value = ((long)(SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long RegionId, 
                    string SchoolAddress, 
                    string SchoolMail_1, 
                    string SchoolMail_2, 
                    string SchoolInternetSite, 
                    string SchoolName, 
                    string SchoolLogoImageFile, 
                    global::System.Nullable<long> MainSchoolId, 
                    string SmallComment, 
                    string BigComment, 
                    int StudentsNumber, 
                    int orderField, 
                    string smallLogo, 
                    string lastReviewTitle, 
                    string lastReviewText, 
                    string SchoolTitle, 
                    long Original_SchoolId, 
                    long Original_RegionId, 
                    string Original_SchoolAddress, 
                    string Original_SchoolMail_1, 
                    string Original_SchoolMail_2, 
                    string Original_SchoolInternetSite, 
                    string Original_SchoolName, 
                    string Original_SchoolLogoImageFile, 
                    global::System.Nullable<long> Original_MainSchoolId, 
                    int Original_StudentsNumber, 
                    int Original_orderField, 
                    string Original_smallLogo, 
                    string Original_lastReviewTitle, 
                    string Original_SchoolTitle) {
            return this.Update(RegionId, SchoolAddress, SchoolMail_1, SchoolMail_2, SchoolInternetSite, SchoolName, SchoolLogoImageFile, MainSchoolId, SmallComment, BigComment, StudentsNumber, orderField, smallLogo, lastReviewTitle, lastReviewText, SchoolTitle, Original_SchoolId, Original_RegionId, Original_SchoolAddress, Original_SchoolMail_1, Original_SchoolMail_2, Original_SchoolInternetSite, Original_SchoolName, Original_SchoolLogoImageFile, Original_MainSchoolId, Original_StudentsNumber, Original_orderField, Original_smallLogo, Original_lastReviewTitle, Original_SchoolTitle, Original_SchoolId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TLecturersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TLecturersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TLecturers";
            tableMapping.ColumnMappings.Add("LecturerId", "LecturerId");
            tableMapping.ColumnMappings.Add("LecturerName", "LecturerName");
            tableMapping.ColumnMappings.Add("LecturerPhotoFileName", "LecturerPhotoFileName");
            tableMapping.ColumnMappings.Add("LecturerComment", "LecturerComment");
            tableMapping.ColumnMappings.Add("LecturerEstablishmentId", "LecturerEstablishmentId");
            tableMapping.ColumnMappings.Add("LecturerCertification", "LecturerCertification");
            tableMapping.ColumnMappings.Add("LecturerCategoryCourse", "LecturerCategoryCourse");
            tableMapping.ColumnMappings.Add("LecturerAreaCourse", "LecturerAreaCourse");
            tableMapping.ColumnMappings.Add("LecturerSubAreaCourse", "LecturerSubAreaCourse");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TLecturers] WHERE (([LecturerId] = @Original_LecturerId) AND ([LecturerName] = @Original_LecturerName) AND ((@IsNull_LecturerPhotoFileName = 1 AND [LecturerPhotoFileName] IS NULL) OR ([LecturerPhotoFileName] = @Original_LecturerPhotoFileName)) AND ([LecturerEstablishmentId] = @Original_LecturerEstablishmentId) AND ((@IsNull_LecturerCertification = 1 AND [LecturerCertification] IS NULL) OR ([LecturerCertification] = @Original_LecturerCertification)) AND ((@IsNull_LecturerCategoryCourse = 1 AND [LecturerCategoryCourse] IS NULL) OR ([LecturerCategoryCourse] = @Original_LecturerCategoryCourse)) AND ((@IsNull_LecturerAreaCourse = 1 AND [LecturerAreaCourse] IS NULL) OR ([LecturerAreaCourse] = @Original_LecturerAreaCourse)) AND ((@IsNull_LecturerSubAreaCourse = 1 AND [LecturerSubAreaCourse] IS NULL) OR ([LecturerSubAreaCourse] = @Original_LecturerSubAreaCourse)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerPhotoFileName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerPhotoFileName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerPhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerPhotoFileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerEstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerEstablishmentId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerCertification", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCertification", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerCertification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCertification", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerCategoryCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCategoryCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerCategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCategoryCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerAreaCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerAreaCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerAreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerSubAreaCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerSubAreaCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerSubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerSubAreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TLecturers] ([LecturerName], [LecturerPhotoFileName], [LecturerComment], [LecturerEstablishmentId], [LecturerCertification], [LecturerCategoryCourse], [LecturerAreaCourse], [LecturerSubAreaCourse]) VALUES (@LecturerName, @LecturerPhotoFileName, @LecturerComment, @LecturerEstablishmentId, @LecturerCertification, @LecturerCategoryCourse, @LecturerAreaCourse, @LecturerSubAreaCourse);
SELECT LecturerId, LecturerName, LecturerPhotoFileName, LecturerComment, LecturerEstablishmentId, LecturerCertification, LecturerCategoryCourse, LecturerAreaCourse, LecturerSubAreaCourse FROM TLecturers WHERE (LecturerId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerPhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerPhotoFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerComment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerEstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerEstablishmentId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerCertification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCertification", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerCategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCategoryCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerAreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerSubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerSubAreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TLecturers] SET [LecturerName] = @LecturerName, [LecturerPhotoFileName] = @LecturerPhotoFileName, [LecturerComment] = @LecturerComment, [LecturerEstablishmentId] = @LecturerEstablishmentId, [LecturerCertification] = @LecturerCertification, [LecturerCategoryCourse] = @LecturerCategoryCourse, [LecturerAreaCourse] = @LecturerAreaCourse, [LecturerSubAreaCourse] = @LecturerSubAreaCourse WHERE (([LecturerId] = @Original_LecturerId) AND ([LecturerName] = @Original_LecturerName) AND ((@IsNull_LecturerPhotoFileName = 1 AND [LecturerPhotoFileName] IS NULL) OR ([LecturerPhotoFileName] = @Original_LecturerPhotoFileName)) AND ([LecturerEstablishmentId] = @Original_LecturerEstablishmentId) AND ((@IsNull_LecturerCertification = 1 AND [LecturerCertification] IS NULL) OR ([LecturerCertification] = @Original_LecturerCertification)) AND ((@IsNull_LecturerCategoryCourse = 1 AND [LecturerCategoryCourse] IS NULL) OR ([LecturerCategoryCourse] = @Original_LecturerCategoryCourse)) AND ((@IsNull_LecturerAreaCourse = 1 AND [LecturerAreaCourse] IS NULL) OR ([LecturerAreaCourse] = @Original_LecturerAreaCourse)) AND ((@IsNull_LecturerSubAreaCourse = 1 AND [LecturerSubAreaCourse] IS NULL) OR ([LecturerSubAreaCourse] = @Original_LecturerSubAreaCourse)));
SELECT LecturerId, LecturerName, LecturerPhotoFileName, LecturerComment, LecturerEstablishmentId, LecturerCertification, LecturerCategoryCourse, LecturerAreaCourse, LecturerSubAreaCourse FROM TLecturers WHERE (LecturerId = @LecturerId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerPhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerPhotoFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerComment", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerComment", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerEstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerEstablishmentId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerCertification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCertification", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerCategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCategoryCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerAreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerSubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerSubAreaCourse", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerPhotoFileName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerPhotoFileName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerPhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerPhotoFileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerEstablishmentId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerEstablishmentId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerCertification", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCertification", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerCertification", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCertification", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerCategoryCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCategoryCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerCategoryCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerCategoryCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerAreaCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerAreaCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerAreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_LecturerSubAreaCourse", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerSubAreaCourse", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerSubAreaCourse", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerSubAreaCourse", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LecturerId, LecturerName, LecturerPhotoFileName, LecturerComment, Lecturer" +
                "EstablishmentId, LecturerCertification, LecturerCategoryCourse, LecturerAreaCour" +
                "se, LecturerSubAreaCourse FROM dbo.TLecturers";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TLecturersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TLecturersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TLecturersDataTable dataTable = new StudyingDataSet.TLecturersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TLecturersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TLecturers");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_LecturerId, string Original_LecturerName, string Original_LecturerPhotoFileName, long Original_LecturerEstablishmentId, string Original_LecturerCertification, global::System.Nullable<long> Original_LecturerCategoryCourse, global::System.Nullable<long> Original_LecturerAreaCourse, global::System.Nullable<long> Original_LecturerSubAreaCourse) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_LecturerId));
            if ((Original_LecturerName == null)) {
                throw new global::System.ArgumentNullException("Original_LecturerName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LecturerName));
            }
            if ((Original_LecturerPhotoFileName == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_LecturerPhotoFileName));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((long)(Original_LecturerEstablishmentId));
            if ((Original_LecturerCertification == null)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_LecturerCertification));
            }
            if ((Original_LecturerCategoryCourse.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((long)(Original_LecturerCategoryCourse.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_LecturerAreaCourse.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_LecturerAreaCourse.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_LecturerSubAreaCourse.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_LecturerSubAreaCourse.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string LecturerName, string LecturerPhotoFileName, string LecturerComment, long LecturerEstablishmentId, string LecturerCertification, global::System.Nullable<long> LecturerCategoryCourse, global::System.Nullable<long> LecturerAreaCourse, global::System.Nullable<long> LecturerSubAreaCourse) {
            if ((LecturerName == null)) {
                throw new global::System.ArgumentNullException("LecturerName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(LecturerName));
            }
            if ((LecturerPhotoFileName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LecturerPhotoFileName));
            }
            if ((LecturerComment == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LecturerComment));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((long)(LecturerEstablishmentId));
            if ((LecturerCertification == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(LecturerCertification));
            }
            if ((LecturerCategoryCourse.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((long)(LecturerCategoryCourse.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((LecturerAreaCourse.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((long)(LecturerAreaCourse.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LecturerSubAreaCourse.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((long)(LecturerSubAreaCourse.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LecturerName, 
                    string LecturerPhotoFileName, 
                    string LecturerComment, 
                    long LecturerEstablishmentId, 
                    string LecturerCertification, 
                    global::System.Nullable<long> LecturerCategoryCourse, 
                    global::System.Nullable<long> LecturerAreaCourse, 
                    global::System.Nullable<long> LecturerSubAreaCourse, 
                    long Original_LecturerId, 
                    string Original_LecturerName, 
                    string Original_LecturerPhotoFileName, 
                    long Original_LecturerEstablishmentId, 
                    string Original_LecturerCertification, 
                    global::System.Nullable<long> Original_LecturerCategoryCourse, 
                    global::System.Nullable<long> Original_LecturerAreaCourse, 
                    global::System.Nullable<long> Original_LecturerSubAreaCourse, 
                    long LecturerId) {
            if ((LecturerName == null)) {
                throw new global::System.ArgumentNullException("LecturerName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(LecturerName));
            }
            if ((LecturerPhotoFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LecturerPhotoFileName));
            }
            if ((LecturerComment == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LecturerComment));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(LecturerEstablishmentId));
            if ((LecturerCertification == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(LecturerCertification));
            }
            if ((LecturerCategoryCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(LecturerCategoryCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((LecturerAreaCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(LecturerAreaCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((LecturerSubAreaCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(LecturerSubAreaCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_LecturerId));
            if ((Original_LecturerName == null)) {
                throw new global::System.ArgumentNullException("Original_LecturerName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_LecturerName));
            }
            if ((Original_LecturerPhotoFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_LecturerPhotoFileName));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_LecturerEstablishmentId));
            if ((Original_LecturerCertification == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_LecturerCertification));
            }
            if ((Original_LecturerCategoryCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((long)(Original_LecturerCategoryCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_LecturerAreaCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_LecturerAreaCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_LecturerSubAreaCourse.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((long)(Original_LecturerSubAreaCourse.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((long)(LecturerId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string LecturerName, 
                    string LecturerPhotoFileName, 
                    string LecturerComment, 
                    long LecturerEstablishmentId, 
                    string LecturerCertification, 
                    global::System.Nullable<long> LecturerCategoryCourse, 
                    global::System.Nullable<long> LecturerAreaCourse, 
                    global::System.Nullable<long> LecturerSubAreaCourse, 
                    long Original_LecturerId, 
                    string Original_LecturerName, 
                    string Original_LecturerPhotoFileName, 
                    long Original_LecturerEstablishmentId, 
                    string Original_LecturerCertification, 
                    global::System.Nullable<long> Original_LecturerCategoryCourse, 
                    global::System.Nullable<long> Original_LecturerAreaCourse, 
                    global::System.Nullable<long> Original_LecturerSubAreaCourse) {
            return this.Update(LecturerName, LecturerPhotoFileName, LecturerComment, LecturerEstablishmentId, LecturerCertification, LecturerCategoryCourse, LecturerAreaCourse, LecturerSubAreaCourse, Original_LecturerId, Original_LecturerName, Original_LecturerPhotoFileName, Original_LecturerEstablishmentId, Original_LecturerCertification, Original_LecturerCategoryCourse, Original_LecturerAreaCourse, Original_LecturerSubAreaCourse, Original_LecturerId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TMessagesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TMessagesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TMessages";
            tableMapping.ColumnMappings.Add("MessageId", "MessageId");
            tableMapping.ColumnMappings.Add("AuthorName", "AuthorName");
            tableMapping.ColumnMappings.Add("AuthorLastName", "AuthorLastName");
            tableMapping.ColumnMappings.Add("RegionId", "RegionId");
            tableMapping.ColumnMappings.Add("AuthorAddress", "AuthorAddress");
            tableMapping.ColumnMappings.Add("AuthorPhone", "AuthorPhone");
            tableMapping.ColumnMappings.Add("AuthorCellPhone", "AuthorCellPhone");
            tableMapping.ColumnMappings.Add("AuthorMail", "AuthorMail");
            tableMapping.ColumnMappings.Add("AuthorBirthDate", "AuthorBirthDate");
            tableMapping.ColumnMappings.Add("MessageDate", "MessageDate");
            tableMapping.ColumnMappings.Add("CourseId", "CourseId");
            tableMapping.ColumnMappings.Add("SchoolId", "SchoolId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TMessages] WHERE (([MessageId] = @Original_MessageId) AND ((@IsNull_AuthorName = 1 AND [AuthorName] IS NULL) OR ([AuthorName] = @Original_AuthorName)) AND ((@IsNull_AuthorLastName = 1 AND [AuthorLastName] IS NULL) OR ([AuthorLastName] = @Original_AuthorLastName)) AND ((@IsNull_RegionId = 1 AND [RegionId] IS NULL) OR ([RegionId] = @Original_RegionId)) AND ((@IsNull_AuthorAddress = 1 AND [AuthorAddress] IS NULL) OR ([AuthorAddress] = @Original_AuthorAddress)) AND ((@IsNull_AuthorPhone = 1 AND [AuthorPhone] IS NULL) OR ([AuthorPhone] = @Original_AuthorPhone)) AND ((@IsNull_AuthorCellPhone = 1 AND [AuthorCellPhone] IS NULL) OR ([AuthorCellPhone] = @Original_AuthorCellPhone)) AND ((@IsNull_AuthorMail = 1 AND [AuthorMail] IS NULL) OR ([AuthorMail] = @Original_AuthorMail)) AND ((@IsNull_AuthorBirthDate = 1 AND [AuthorBirthDate] IS NULL) OR ([AuthorBirthDate] = @Original_AuthorBirthDate)) AND ((@IsNull_MessageDate = 1 AND [MessageDate] IS NULL) OR ([MessageDate] = @Original_MessageDate)) AND ((@IsNull_CourseId = 1 AND [CourseId] IS NULL) OR ([CourseId] = @Original_CourseId)) AND ([SchoolId] = @Original_SchoolId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorLastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorLastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorLastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RegionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorPhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorPhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorCellPhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorCellPhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorCellPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorCellPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorMail", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorMail", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorBirthDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorBirthDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorBirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorBirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MessageDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TMessages] ([MessageId], [AuthorName], [AuthorLastName], [RegionId], [AuthorAddress], [AuthorPhone], [AuthorCellPhone], [AuthorMail], [AuthorBirthDate], [MessageDate], [CourseId], [SchoolId]) VALUES (@MessageId, @AuthorName, @AuthorLastName, @RegionId, @AuthorAddress, @AuthorPhone, @AuthorCellPhone, @AuthorMail, @AuthorBirthDate, @MessageDate, @CourseId, @SchoolId);
SELECT MessageId, AuthorName, AuthorLastName, RegionId, AuthorAddress, AuthorPhone, AuthorCellPhone, AuthorMail, AuthorBirthDate, MessageDate, CourseId, SchoolId FROM TMessages WHERE (MessageId = @MessageId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorLastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorCellPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorCellPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorBirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorBirthDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TMessages] SET [MessageId] = @MessageId, [AuthorName] = @AuthorName" +
                ", [AuthorLastName] = @AuthorLastName, [RegionId] = @RegionId, [AuthorAddress] = " +
                "@AuthorAddress, [AuthorPhone] = @AuthorPhone, [AuthorCellPhone] = @AuthorCellPho" +
                "ne, [AuthorMail] = @AuthorMail, [AuthorBirthDate] = @AuthorBirthDate, [MessageDa" +
                "te] = @MessageDate, [CourseId] = @CourseId, [SchoolId] = @SchoolId WHERE (([Mess" +
                "ageId] = @Original_MessageId) AND ((@IsNull_AuthorName = 1 AND [AuthorName] IS N" +
                "ULL) OR ([AuthorName] = @Original_AuthorName)) AND ((@IsNull_AuthorLastName = 1 " +
                "AND [AuthorLastName] IS NULL) OR ([AuthorLastName] = @Original_AuthorLastName)) " +
                "AND ((@IsNull_RegionId = 1 AND [RegionId] IS NULL) OR ([RegionId] = @Original_Re" +
                "gionId)) AND ((@IsNull_AuthorAddress = 1 AND [AuthorAddress] IS NULL) OR ([Autho" +
                "rAddress] = @Original_AuthorAddress)) AND ((@IsNull_AuthorPhone = 1 AND [AuthorP" +
                "hone] IS NULL) OR ([AuthorPhone] = @Original_AuthorPhone)) AND ((@IsNull_AuthorC" +
                "ellPhone = 1 AND [AuthorCellPhone] IS NULL) OR ([AuthorCellPhone] = @Original_Au" +
                "thorCellPhone)) AND ((@IsNull_AuthorMail = 1 AND [AuthorMail] IS NULL) OR ([Auth" +
                "orMail] = @Original_AuthorMail)) AND ((@IsNull_AuthorBirthDate = 1 AND [AuthorBi" +
                "rthDate] IS NULL) OR ([AuthorBirthDate] = @Original_AuthorBirthDate)) AND ((@IsN" +
                "ull_MessageDate = 1 AND [MessageDate] IS NULL) OR ([MessageDate] = @Original_Mes" +
                "sageDate)) AND ((@IsNull_CourseId = 1 AND [CourseId] IS NULL) OR ([CourseId] = @" +
                "Original_CourseId)) AND ([SchoolId] = @Original_SchoolId));\r\nSELECT MessageId, A" +
                "uthorName, AuthorLastName, RegionId, AuthorAddress, AuthorPhone, AuthorCellPhone" +
                ", AuthorMail, AuthorBirthDate, MessageDate, CourseId, SchoolId FROM TMessages WH" +
                "ERE (MessageId = @MessageId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorLastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorAddress", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorCellPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorCellPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuthorBirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorBirthDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorLastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorLastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorLastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RegionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorAddress", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorAddress", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorAddress", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorAddress", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorPhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorPhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorCellPhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorCellPhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorCellPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorCellPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorMail", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorMail", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AuthorBirthDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorBirthDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AuthorBirthDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuthorBirthDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MessageDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CourseId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MessageId, AuthorName, AuthorLastName, RegionId, AuthorAddress, AuthorPhon" +
                "e, AuthorCellPhone, AuthorMail, AuthorBirthDate, MessageDate, CourseId, SchoolId" +
                " FROM dbo.TMessages";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TMessagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TMessagesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TMessagesDataTable dataTable = new StudyingDataSet.TMessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TMessagesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TMessages");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_MessageId, string Original_AuthorName, string Original_AuthorLastName, global::System.Nullable<long> Original_RegionId, string Original_AuthorAddress, string Original_AuthorPhone, string Original_AuthorCellPhone, string Original_AuthorMail, global::System.Nullable<global::System.DateTime> Original_AuthorBirthDate, global::System.Nullable<global::System.DateTime> Original_MessageDate, global::System.Nullable<long> Original_CourseId, long Original_SchoolId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_MessageId));
            if ((Original_AuthorName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_AuthorName));
            }
            if ((Original_AuthorLastName == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_AuthorLastName));
            }
            if ((Original_RegionId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((long)(Original_RegionId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_AuthorAddress == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_AuthorAddress));
            }
            if ((Original_AuthorPhone == null)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_AuthorPhone));
            }
            if ((Original_AuthorCellPhone == null)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_AuthorCellPhone));
            }
            if ((Original_AuthorMail == null)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_AuthorMail));
            }
            if ((Original_AuthorBirthDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((System.DateTime)(Original_AuthorBirthDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_MessageDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_MessageDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_CourseId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((long)(Original_CourseId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[21].Value = ((long)(Original_SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long MessageId, string AuthorName, string AuthorLastName, global::System.Nullable<long> RegionId, string AuthorAddress, string AuthorPhone, string AuthorCellPhone, string AuthorMail, global::System.Nullable<global::System.DateTime> AuthorBirthDate, global::System.Nullable<global::System.DateTime> MessageDate, global::System.Nullable<long> CourseId, long SchoolId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(MessageId));
            if ((AuthorName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AuthorName));
            }
            if ((AuthorLastName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AuthorLastName));
            }
            if ((RegionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(RegionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AuthorAddress == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AuthorAddress));
            }
            if ((AuthorPhone == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AuthorPhone));
            }
            if ((AuthorCellPhone == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(AuthorCellPhone));
            }
            if ((AuthorMail == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(AuthorMail));
            }
            if ((AuthorBirthDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(AuthorBirthDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MessageDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((System.DateTime)(MessageDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((CourseId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(CourseId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[11].Value = ((long)(SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long MessageId, 
                    string AuthorName, 
                    string AuthorLastName, 
                    global::System.Nullable<long> RegionId, 
                    string AuthorAddress, 
                    string AuthorPhone, 
                    string AuthorCellPhone, 
                    string AuthorMail, 
                    global::System.Nullable<global::System.DateTime> AuthorBirthDate, 
                    global::System.Nullable<global::System.DateTime> MessageDate, 
                    global::System.Nullable<long> CourseId, 
                    long SchoolId, 
                    long Original_MessageId, 
                    string Original_AuthorName, 
                    string Original_AuthorLastName, 
                    global::System.Nullable<long> Original_RegionId, 
                    string Original_AuthorAddress, 
                    string Original_AuthorPhone, 
                    string Original_AuthorCellPhone, 
                    string Original_AuthorMail, 
                    global::System.Nullable<global::System.DateTime> Original_AuthorBirthDate, 
                    global::System.Nullable<global::System.DateTime> Original_MessageDate, 
                    global::System.Nullable<long> Original_CourseId, 
                    long Original_SchoolId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(MessageId));
            if ((AuthorName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AuthorName));
            }
            if ((AuthorLastName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AuthorLastName));
            }
            if ((RegionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(RegionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((AuthorAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AuthorAddress));
            }
            if ((AuthorPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(AuthorPhone));
            }
            if ((AuthorCellPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(AuthorCellPhone));
            }
            if ((AuthorMail == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(AuthorMail));
            }
            if ((AuthorBirthDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(AuthorBirthDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((MessageDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(MessageDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((CourseId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(CourseId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(SchoolId));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(Original_MessageId));
            if ((Original_AuthorName == null)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_AuthorName));
            }
            if ((Original_AuthorLastName == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_AuthorLastName));
            }
            if ((Original_RegionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((long)(Original_RegionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_AuthorAddress == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_AuthorAddress));
            }
            if ((Original_AuthorPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_AuthorPhone));
            }
            if ((Original_AuthorCellPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_AuthorCellPhone));
            }
            if ((Original_AuthorMail == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_AuthorMail));
            }
            if ((Original_AuthorBirthDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_AuthorBirthDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            if ((Original_MessageDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((System.DateTime)(Original_MessageDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            if ((Original_CourseId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[32].Value = ((long)(Original_CourseId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[31].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[32].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[33].Value = ((long)(Original_SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string AuthorName, 
                    string AuthorLastName, 
                    global::System.Nullable<long> RegionId, 
                    string AuthorAddress, 
                    string AuthorPhone, 
                    string AuthorCellPhone, 
                    string AuthorMail, 
                    global::System.Nullable<global::System.DateTime> AuthorBirthDate, 
                    global::System.Nullable<global::System.DateTime> MessageDate, 
                    global::System.Nullable<long> CourseId, 
                    long SchoolId, 
                    long Original_MessageId, 
                    string Original_AuthorName, 
                    string Original_AuthorLastName, 
                    global::System.Nullable<long> Original_RegionId, 
                    string Original_AuthorAddress, 
                    string Original_AuthorPhone, 
                    string Original_AuthorCellPhone, 
                    string Original_AuthorMail, 
                    global::System.Nullable<global::System.DateTime> Original_AuthorBirthDate, 
                    global::System.Nullable<global::System.DateTime> Original_MessageDate, 
                    global::System.Nullable<long> Original_CourseId, 
                    long Original_SchoolId) {
            return this.Update(Original_MessageId, AuthorName, AuthorLastName, RegionId, AuthorAddress, AuthorPhone, AuthorCellPhone, AuthorMail, AuthorBirthDate, MessageDate, CourseId, SchoolId, Original_MessageId, Original_AuthorName, Original_AuthorLastName, Original_RegionId, Original_AuthorAddress, Original_AuthorPhone, Original_AuthorCellPhone, Original_AuthorMail, Original_AuthorBirthDate, Original_MessageDate, Original_CourseId, Original_SchoolId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TMessagesForSchoolTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TMessagesForSchoolTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TMessagesForSchool";
            tableMapping.ColumnMappings.Add("MessageId", "MessageId");
            tableMapping.ColumnMappings.Add("MessageDate", "MessageDate");
            tableMapping.ColumnMappings.Add("UserNameLastName", "UserNameLastName");
            tableMapping.ColumnMappings.Add("UserMail", "UserMail");
            tableMapping.ColumnMappings.Add("UserCity", "UserCity");
            tableMapping.ColumnMappings.Add("UserStreet", "UserStreet");
            tableMapping.ColumnMappings.Add("UserPhone", "UserPhone");
            tableMapping.ColumnMappings.Add("SchoolId", "SchoolId");
            tableMapping.ColumnMappings.Add("MessageText", "MessageText");
            tableMapping.ColumnMappings.Add("areaId", "areaId");
            tableMapping.ColumnMappings.Add("subAreaId", "subAreaId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TMessagesForSchool] WHERE (([MessageId] = @Original_MessageId) AND ([MessageDate] = @Original_MessageDate) AND ((@IsNull_UserNameLastName = 1 AND [UserNameLastName] IS NULL) OR ([UserNameLastName] = @Original_UserNameLastName)) AND ((@IsNull_UserMail = 1 AND [UserMail] IS NULL) OR ([UserMail] = @Original_UserMail)) AND ((@IsNull_UserCity = 1 AND [UserCity] IS NULL) OR ([UserCity] = @Original_UserCity)) AND ((@IsNull_UserStreet = 1 AND [UserStreet] IS NULL) OR ([UserStreet] = @Original_UserStreet)) AND ((@IsNull_UserPhone = 1 AND [UserPhone] IS NULL) OR ([UserPhone] = @Original_UserPhone)) AND ([SchoolId] = @Original_SchoolId) AND ((@IsNull_areaId = 1 AND [areaId] IS NULL) OR ([areaId] = @Original_areaId)) AND ((@IsNull_subAreaId = 1 AND [subAreaId] IS NULL) OR ([subAreaId] = @Original_subAreaId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserNameLastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserNameLastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserNameLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserNameLastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserMail", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserMail", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserStreet", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserStreet", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserStreet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserPhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserPhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_areaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_areaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_subAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TMessagesForSchool] ([MessageDate], [UserNameLastName], [UserMail], [UserCity], [UserStreet], [UserPhone], [SchoolId], [MessageText], [areaId], [subAreaId]) VALUES (@MessageDate, @UserNameLastName, @UserMail, @UserCity, @UserStreet, @UserPhone, @SchoolId, @MessageText, @areaId, @subAreaId);
SELECT MessageId, MessageDate, UserNameLastName, UserMail, UserCity, UserStreet, UserPhone, SchoolId, MessageText, areaId, subAreaId FROM TMessagesForSchool WHERE (MessageId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserNameLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserNameLastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserStreet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@areaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TMessagesForSchool] SET [MessageDate] = @MessageDate, [UserNameLastName] = @UserNameLastName, [UserMail] = @UserMail, [UserCity] = @UserCity, [UserStreet] = @UserStreet, [UserPhone] = @UserPhone, [SchoolId] = @SchoolId, [MessageText] = @MessageText, [areaId] = @areaId, [subAreaId] = @subAreaId WHERE (([MessageId] = @Original_MessageId) AND ([MessageDate] = @Original_MessageDate) AND ((@IsNull_UserNameLastName = 1 AND [UserNameLastName] IS NULL) OR ([UserNameLastName] = @Original_UserNameLastName)) AND ((@IsNull_UserMail = 1 AND [UserMail] IS NULL) OR ([UserMail] = @Original_UserMail)) AND ((@IsNull_UserCity = 1 AND [UserCity] IS NULL) OR ([UserCity] = @Original_UserCity)) AND ((@IsNull_UserStreet = 1 AND [UserStreet] IS NULL) OR ([UserStreet] = @Original_UserStreet)) AND ((@IsNull_UserPhone = 1 AND [UserPhone] IS NULL) OR ([UserPhone] = @Original_UserPhone)) AND ([SchoolId] = @Original_SchoolId) AND ((@IsNull_areaId = 1 AND [areaId] IS NULL) OR ([areaId] = @Original_areaId)) AND ((@IsNull_subAreaId = 1 AND [subAreaId] IS NULL) OR ([subAreaId] = @Original_subAreaId)));
SELECT MessageId, MessageDate, UserNameLastName, UserMail, UserCity, UserStreet, UserPhone, SchoolId, MessageText, areaId, subAreaId FROM TMessagesForSchool WHERE (MessageId = @MessageId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserNameLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserNameLastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserStreet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UserPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@areaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserNameLastName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserNameLastName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserNameLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserNameLastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserMail", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserMail", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserCity", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCity", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserCity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserStreet", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserStreet", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserStreet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_UserPhone", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserPhone", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_UserPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UserPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_areaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_areaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "areaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_subAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MessageId, MessageDate, UserNameLastName, UserMail, UserCity, UserStreet, " +
                "UserPhone, SchoolId, MessageText, areaId, subAreaId FROM dbo.TMessagesForSchool";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TMessagesForSchoolDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TMessagesForSchoolDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TMessagesForSchoolDataTable dataTable = new StudyingDataSet.TMessagesForSchoolDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TMessagesForSchoolDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TMessagesForSchool");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_MessageId, System.DateTime Original_MessageDate, string Original_UserNameLastName, string Original_UserMail, string Original_UserCity, string Original_UserStreet, string Original_UserPhone, long Original_SchoolId, global::System.Nullable<int> Original_areaId, global::System.Nullable<int> Original_subAreaId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_MessageId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_MessageDate));
            if ((Original_UserNameLastName == null)) {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_UserNameLastName));
            }
            if ((Original_UserMail == null)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_UserMail));
            }
            if ((Original_UserCity == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_UserCity));
            }
            if ((Original_UserStreet == null)) {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_UserStreet));
            }
            if ((Original_UserPhone == null)) {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_UserPhone));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_SchoolId));
            if ((Original_areaId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_areaId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_subAreaId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_subAreaId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime MessageDate, string UserNameLastName, string UserMail, string UserCity, string UserStreet, string UserPhone, long SchoolId, string MessageText, global::System.Nullable<int> areaId, global::System.Nullable<int> subAreaId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(MessageDate));
            if ((UserNameLastName == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(UserNameLastName));
            }
            if ((UserMail == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(UserMail));
            }
            if ((UserCity == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(UserCity));
            }
            if ((UserStreet == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(UserStreet));
            }
            if ((UserPhone == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(UserPhone));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((long)(SchoolId));
            if ((MessageText == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(MessageText));
            }
            if ((areaId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(areaId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((subAreaId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(subAreaId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime MessageDate, 
                    string UserNameLastName, 
                    string UserMail, 
                    string UserCity, 
                    string UserStreet, 
                    string UserPhone, 
                    long SchoolId, 
                    string MessageText, 
                    global::System.Nullable<int> areaId, 
                    global::System.Nullable<int> subAreaId, 
                    long Original_MessageId, 
                    System.DateTime Original_MessageDate, 
                    string Original_UserNameLastName, 
                    string Original_UserMail, 
                    string Original_UserCity, 
                    string Original_UserStreet, 
                    string Original_UserPhone, 
                    long Original_SchoolId, 
                    global::System.Nullable<int> Original_areaId, 
                    global::System.Nullable<int> Original_subAreaId, 
                    long MessageId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((System.DateTime)(MessageDate));
            if ((UserNameLastName == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(UserNameLastName));
            }
            if ((UserMail == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(UserMail));
            }
            if ((UserCity == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(UserCity));
            }
            if ((UserStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(UserStreet));
            }
            if ((UserPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(UserPhone));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(SchoolId));
            if ((MessageText == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(MessageText));
            }
            if ((areaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(areaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((subAreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(subAreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_MessageId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_MessageDate));
            if ((Original_UserNameLastName == null)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_UserNameLastName));
            }
            if ((Original_UserMail == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_UserMail));
            }
            if ((Original_UserCity == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_UserCity));
            }
            if ((Original_UserStreet == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_UserStreet));
            }
            if ((Original_UserPhone == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_UserPhone));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((long)(Original_SchoolId));
            if ((Original_areaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_areaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((Original_subAreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_subAreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(MessageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    System.DateTime MessageDate, 
                    string UserNameLastName, 
                    string UserMail, 
                    string UserCity, 
                    string UserStreet, 
                    string UserPhone, 
                    long SchoolId, 
                    string MessageText, 
                    global::System.Nullable<int> areaId, 
                    global::System.Nullable<int> subAreaId, 
                    long Original_MessageId, 
                    System.DateTime Original_MessageDate, 
                    string Original_UserNameLastName, 
                    string Original_UserMail, 
                    string Original_UserCity, 
                    string Original_UserStreet, 
                    string Original_UserPhone, 
                    long Original_SchoolId, 
                    global::System.Nullable<int> Original_areaId, 
                    global::System.Nullable<int> Original_subAreaId) {
            return this.Update(MessageDate, UserNameLastName, UserMail, UserCity, UserStreet, UserPhone, SchoolId, MessageText, areaId, subAreaId, Original_MessageId, Original_MessageDate, Original_UserNameLastName, Original_UserMail, Original_UserCity, Original_UserStreet, Original_UserPhone, Original_SchoolId, Original_areaId, Original_subAreaId, Original_MessageId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TPhonesListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TPhonesListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TPhonesList";
            tableMapping.ColumnMappings.Add("PhoneId", "PhoneId");
            tableMapping.ColumnMappings.Add("PhoneNumber", "PhoneNumber");
            tableMapping.ColumnMappings.Add("MainFlag", "MainFlag");
            tableMapping.ColumnMappings.Add("SchoolId", "SchoolId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TPhonesList] WHERE (([PhoneId] = @Original_PhoneId) AND ([Phon" +
                "eNumber] = @Original_PhoneNumber) AND ([MainFlag] = @Original_MainFlag) AND ([Sc" +
                "hoolId] = @Original_SchoolId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MainFlag", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainFlag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TPhonesList] ([PhoneNumber], [MainFlag], [SchoolId]) VALUES (@" +
                "PhoneNumber, @MainFlag, @SchoolId);\r\nSELECT PhoneId, PhoneNumber, MainFlag, Scho" +
                "olId FROM TPhonesList WHERE (PhoneId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MainFlag", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TPhonesList] SET [PhoneNumber] = @PhoneNumber, [MainFlag] = @MainFlag, [SchoolId] = @SchoolId WHERE (([PhoneId] = @Original_PhoneId) AND ([PhoneNumber] = @Original_PhoneNumber) AND ([MainFlag] = @Original_MainFlag) AND ([SchoolId] = @Original_SchoolId));
SELECT PhoneId, PhoneNumber, MainFlag, SchoolId FROM TPhonesList WHERE (PhoneId = @PhoneId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MainFlag", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainFlag", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhoneNumber", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneNumber", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MainFlag", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainFlag", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhoneId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PhoneId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PhoneId, PhoneNumber, MainFlag, SchoolId FROM dbo.TPhonesList";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TPhonesListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TPhonesListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TPhonesListDataTable dataTable = new StudyingDataSet.TPhonesListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TPhonesListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TPhonesList");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_PhoneId, string Original_PhoneNumber, bool Original_MainFlag, long Original_SchoolId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_PhoneId));
            if ((Original_PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("Original_PhoneNumber");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_PhoneNumber));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_MainFlag));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PhoneNumber, bool MainFlag, long SchoolId) {
            if ((PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("PhoneNumber");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PhoneNumber));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((bool)(MainFlag));
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PhoneNumber, bool MainFlag, long SchoolId, long Original_PhoneId, string Original_PhoneNumber, bool Original_MainFlag, long Original_SchoolId, long PhoneId) {
            if ((PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("PhoneNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PhoneNumber));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((bool)(MainFlag));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(SchoolId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_PhoneId));
            if ((Original_PhoneNumber == null)) {
                throw new global::System.ArgumentNullException("Original_PhoneNumber");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_PhoneNumber));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Original_MainFlag));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_SchoolId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(PhoneId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PhoneNumber, bool MainFlag, long SchoolId, long Original_PhoneId, string Original_PhoneNumber, bool Original_MainFlag, long Original_SchoolId) {
            return this.Update(PhoneNumber, MainFlag, SchoolId, Original_PhoneId, Original_PhoneNumber, Original_MainFlag, Original_SchoolId, Original_PhoneId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TPhotoGalleryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TPhotoGalleryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TPhotoGallery";
            tableMapping.ColumnMappings.Add("PhotoId", "PhotoId");
            tableMapping.ColumnMappings.Add("PhotoFileName", "PhotoFileName");
            tableMapping.ColumnMappings.Add("FileExtension", "FileExtension");
            tableMapping.ColumnMappings.Add("GallerySchoolId", "GallerySchoolId");
            tableMapping.ColumnMappings.Add("CommentPhoto", "CommentPhoto");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TPhotoGallery] WHERE (([PhotoId] = @Original_PhotoId) AND ((@IsNull_PhotoFileName = 1 AND [PhotoFileName] IS NULL) OR ([PhotoFileName] = @Original_PhotoFileName)) AND ((@IsNull_FileExtension = 1 AND [FileExtension] IS NULL) OR ([FileExtension] = @Original_FileExtension)) AND ([GallerySchoolId] = @Original_GallerySchoolId) AND ((@IsNull_CommentPhoto = 1 AND [CommentPhoto] IS NULL) OR ([CommentPhoto] = @Original_CommentPhoto)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhotoId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PhotoFileName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoFileName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoFileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FileExtension", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileExtension", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileExtension", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileExtension", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GallerySchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GallerySchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CommentPhoto", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentPhoto", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CommentPhoto", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentPhoto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TPhotoGallery] ([PhotoFileName], [FileExtension], [GallerySchoolId], [CommentPhoto]) VALUES (@PhotoFileName, @FileExtension, @GallerySchoolId, @CommentPhoto);
SELECT PhotoId, PhotoFileName, FileExtension, GallerySchoolId, CommentPhoto FROM TPhotoGallery WHERE (PhotoId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileExtension", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileExtension", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GallerySchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GallerySchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommentPhoto", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentPhoto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TPhotoGallery] SET [PhotoFileName] = @PhotoFileName, [FileExtension] = @FileExtension, [GallerySchoolId] = @GallerySchoolId, [CommentPhoto] = @CommentPhoto WHERE (([PhotoId] = @Original_PhotoId) AND ((@IsNull_PhotoFileName = 1 AND [PhotoFileName] IS NULL) OR ([PhotoFileName] = @Original_PhotoFileName)) AND ((@IsNull_FileExtension = 1 AND [FileExtension] IS NULL) OR ([FileExtension] = @Original_FileExtension)) AND ([GallerySchoolId] = @Original_GallerySchoolId) AND ((@IsNull_CommentPhoto = 1 AND [CommentPhoto] IS NULL) OR ([CommentPhoto] = @Original_CommentPhoto)));
SELECT PhotoId, PhotoFileName, FileExtension, GallerySchoolId, CommentPhoto FROM TPhotoGallery WHERE (PhotoId = @PhotoId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoFileName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FileExtension", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileExtension", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GallerySchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GallerySchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CommentPhoto", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentPhoto", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhotoId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_PhotoFileName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoFileName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PhotoFileName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoFileName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FileExtension", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileExtension", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FileExtension", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FileExtension", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GallerySchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GallerySchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CommentPhoto", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentPhoto", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CommentPhoto", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CommentPhoto", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhotoId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "PhotoId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT PhotoId, PhotoFileName, FileExtension, GallerySchoolId, CommentPhoto FROM " +
                "dbo.TPhotoGallery";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TPhotoGalleryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TPhotoGalleryDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TPhotoGalleryDataTable dataTable = new StudyingDataSet.TPhotoGalleryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TPhotoGalleryDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TPhotoGallery");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_PhotoId, string Original_PhotoFileName, string Original_FileExtension, long Original_GallerySchoolId, string Original_CommentPhoto) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_PhotoId));
            if ((Original_PhotoFileName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_PhotoFileName));
            }
            if ((Original_FileExtension == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_FileExtension));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((long)(Original_GallerySchoolId));
            if ((Original_CommentPhoto == null)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_CommentPhoto));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string PhotoFileName, string FileExtension, long GallerySchoolId, string CommentPhoto) {
            if ((PhotoFileName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(PhotoFileName));
            }
            if ((FileExtension == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FileExtension));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(GallerySchoolId));
            if ((CommentPhoto == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CommentPhoto));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PhotoFileName, string FileExtension, long GallerySchoolId, string CommentPhoto, long Original_PhotoId, string Original_PhotoFileName, string Original_FileExtension, long Original_GallerySchoolId, string Original_CommentPhoto, long PhotoId) {
            if ((PhotoFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(PhotoFileName));
            }
            if ((FileExtension == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FileExtension));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(GallerySchoolId));
            if ((CommentPhoto == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CommentPhoto));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((long)(Original_PhotoId));
            if ((Original_PhotoFileName == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_PhotoFileName));
            }
            if ((Original_FileExtension == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_FileExtension));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(Original_GallerySchoolId));
            if ((Original_CommentPhoto == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_CommentPhoto));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(PhotoId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string PhotoFileName, string FileExtension, long GallerySchoolId, string CommentPhoto, long Original_PhotoId, string Original_PhotoFileName, string Original_FileExtension, long Original_GallerySchoolId, string Original_CommentPhoto) {
            return this.Update(PhotoFileName, FileExtension, GallerySchoolId, CommentPhoto, Original_PhotoId, Original_PhotoFileName, Original_FileExtension, Original_GallerySchoolId, Original_CommentPhoto, Original_PhotoId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TRegionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TRegionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TRegions";
            tableMapping.ColumnMappings.Add("RegionId", "RegionId");
            tableMapping.ColumnMappings.Add("RegionName", "RegionName");
            tableMapping.ColumnMappings.Add("MainRegionId", "MainRegionId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TRegions] WHERE (([RegionId] = @Original_RegionId) AND ([Regio" +
                "nName] = @Original_RegionName) AND ([MainRegionId] = @Original_MainRegionId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MainRegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainRegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TRegions] ([RegionId], [RegionName], [MainRegionId]) VALUES (@" +
                "RegionId, @RegionName, @MainRegionId);\r\nSELECT RegionId, RegionName, MainRegionI" +
                "d FROM TRegions WHERE (RegionId = @RegionId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MainRegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainRegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TRegions] SET [RegionId] = @RegionId, [RegionName] = @RegionName, [MainRegionId] = @MainRegionId WHERE (([RegionId] = @Original_RegionId) AND ([RegionName] = @Original_RegionName) AND ([MainRegionId] = @Original_MainRegionId));
SELECT RegionId, RegionName, MainRegionId FROM TRegions WHERE (RegionId = @RegionId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MainRegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainRegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MainRegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MainRegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT RegionId, RegionName, MainRegionId FROM dbo.TRegions";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TRegionsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TRegionsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TRegionsDataTable dataTable = new StudyingDataSet.TRegionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TRegionsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TRegions");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_RegionId, string Original_RegionName, long Original_MainRegionId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_RegionId));
            if ((Original_RegionName == null)) {
                throw new global::System.ArgumentNullException("Original_RegionName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_RegionName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_MainRegionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long RegionId, string RegionName, long MainRegionId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(RegionId));
            if ((RegionName == null)) {
                throw new global::System.ArgumentNullException("RegionName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(RegionName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(MainRegionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long RegionId, string RegionName, long MainRegionId, long Original_RegionId, string Original_RegionName, long Original_MainRegionId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(RegionId));
            if ((RegionName == null)) {
                throw new global::System.ArgumentNullException("RegionName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(RegionName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(MainRegionId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_RegionId));
            if ((Original_RegionName == null)) {
                throw new global::System.ArgumentNullException("Original_RegionName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_RegionName));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(Original_MainRegionId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string RegionName, long MainRegionId, long Original_RegionId, string Original_RegionName, long Original_MainRegionId) {
            return this.Update(Original_RegionId, RegionName, MainRegionId, Original_RegionId, Original_RegionName, Original_MainRegionId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TReviewsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TReviewsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TReviews";
            tableMapping.ColumnMappings.Add("reviewId", "reviewId");
            tableMapping.ColumnMappings.Add("reviewTitle", "reviewTitle");
            tableMapping.ColumnMappings.Add("reviewText", "reviewText");
            tableMapping.ColumnMappings.Add("schoolId", "schoolId");
            tableMapping.ColumnMappings.Add("reviewImage", "reviewImage");
            tableMapping.ColumnMappings.Add("studentType", "studentType");
            tableMapping.ColumnMappings.Add("graduatedDate", "graduatedDate");
            tableMapping.ColumnMappings.Add("insertDate", "insertDate");
            tableMapping.ColumnMappings.Add("userName", "userName");
            tableMapping.ColumnMappings.Add("userIP", "userIP");
            tableMapping.ColumnMappings.Add("isPublished", "isPublished");
            tableMapping.ColumnMappings.Add("categoryId", "categoryId");
            tableMapping.ColumnMappings.Add("fieldId", "fieldId");
            tableMapping.ColumnMappings.Add("subFieldId", "subFieldId");
            tableMapping.ColumnMappings.Add("courseId", "courseId");
            tableMapping.ColumnMappings.Add("userEmail", "userEmail");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TReviews] WHERE (([reviewId] = @Original_reviewId) AND ([reviewTitle] = @Original_reviewTitle) AND ([schoolId] = @Original_schoolId) AND ([reviewImage] = @Original_reviewImage) AND ([studentType] = @Original_studentType) AND ([graduatedDate] = @Original_graduatedDate) AND ([insertDate] = @Original_insertDate) AND ([userName] = @Original_userName) AND ([userIP] = @Original_userIP) AND ((@IsNull_isPublished = 1 AND [isPublished] IS NULL) OR ([isPublished] = @Original_isPublished)) AND ([categoryId] = @Original_categoryId) AND ([fieldId] = @Original_fieldId) AND ([subFieldId] = @Original_subFieldId) AND ([courseId] = @Original_courseId) AND ([userEmail] = @Original_userEmail))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reviewId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_schoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "schoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reviewImage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewImage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_studentType", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "studentType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_graduatedDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "graduatedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_insertDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insertDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_userName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_userIP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userIP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_isPublished", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPublished", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isPublished", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPublished", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_categoryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "categoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_fieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fieldId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subFieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subFieldId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_courseId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "courseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_userEmail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userEmail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TReviews] ([reviewTitle], [reviewText], [schoolId], [reviewImage], [studentType], [graduatedDate], [insertDate], [userName], [userIP], [isPublished], [categoryId], [fieldId], [subFieldId], [courseId], [userEmail]) VALUES (@reviewTitle, @reviewText, @schoolId, @reviewImage, @studentType, @graduatedDate, @insertDate, @userName, @userIP, @isPublished, @categoryId, @fieldId, @subFieldId, @courseId, @userEmail);
SELECT reviewId, reviewTitle, reviewText, schoolId, reviewImage, studentType, graduatedDate, insertDate, userName, userIP, isPublished, categoryId, fieldId, subFieldId, courseId, userEmail FROM TReviews WHERE (reviewId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@schoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "schoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewImage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewImage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@studentType", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "studentType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@graduatedDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "graduatedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@insertDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insertDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userIP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userIP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPublished", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPublished", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@categoryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "categoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fieldId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subFieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subFieldId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@courseId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "courseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userEmail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userEmail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TReviews] SET [reviewTitle] = @reviewTitle, [reviewText] = @reviewText, [schoolId] = @schoolId, [reviewImage] = @reviewImage, [studentType] = @studentType, [graduatedDate] = @graduatedDate, [insertDate] = @insertDate, [userName] = @userName, [userIP] = @userIP, [isPublished] = @isPublished, [categoryId] = @categoryId, [fieldId] = @fieldId, [subFieldId] = @subFieldId, [courseId] = @courseId, [userEmail] = @userEmail WHERE (([reviewId] = @Original_reviewId) AND ([reviewTitle] = @Original_reviewTitle) AND ([schoolId] = @Original_schoolId) AND ([reviewImage] = @Original_reviewImage) AND ([studentType] = @Original_studentType) AND ([graduatedDate] = @Original_graduatedDate) AND ([insertDate] = @Original_insertDate) AND ([userName] = @Original_userName) AND ([userIP] = @Original_userIP) AND ((@IsNull_isPublished = 1 AND [isPublished] IS NULL) OR ([isPublished] = @Original_isPublished)) AND ([categoryId] = @Original_categoryId) AND ([fieldId] = @Original_fieldId) AND ([subFieldId] = @Original_subFieldId) AND ([courseId] = @Original_courseId) AND ([userEmail] = @Original_userEmail));
SELECT reviewId, reviewTitle, reviewText, schoolId, reviewImage, studentType, graduatedDate, insertDate, userName, userIP, isPublished, categoryId, fieldId, subFieldId, courseId, userEmail FROM TReviews WHERE (reviewId = @reviewId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewText", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@schoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "schoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewImage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewImage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@studentType", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "studentType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@graduatedDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "graduatedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@insertDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insertDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userIP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userIP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isPublished", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPublished", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@categoryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "categoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fieldId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subFieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subFieldId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@courseId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "courseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userEmail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userEmail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reviewId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reviewTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_schoolId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "schoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_reviewImage", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "reviewImage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_studentType", global::System.Data.SqlDbType.TinyInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "studentType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_graduatedDate", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "graduatedDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_insertDate", global::System.Data.SqlDbType.SmallDateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "insertDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_userName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_userIP", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userIP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_isPublished", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPublished", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_isPublished", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "isPublished", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_categoryId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "categoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_fieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "fieldId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subFieldId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subFieldId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_courseId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "courseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_userEmail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "userEmail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reviewId", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "reviewId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT reviewId, reviewTitle, reviewText, schoolId, reviewImage, studentType, gra" +
                "duatedDate, insertDate, userName, userIP, isPublished, categoryId, fieldId, subF" +
                "ieldId, courseId, userEmail FROM dbo.TReviews";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TReviewsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TReviewsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TReviewsDataTable dataTable = new StudyingDataSet.TReviewsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TReviewsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TReviews");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_reviewId, string Original_reviewTitle, int Original_schoolId, string Original_reviewImage, byte Original_studentType, string Original_graduatedDate, System.DateTime Original_insertDate, string Original_userName, string Original_userIP, global::System.Nullable<bool> Original_isPublished, int Original_categoryId, int Original_fieldId, int Original_subFieldId, int Original_courseId, string Original_userEmail) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_reviewId));
            if ((Original_reviewTitle == null)) {
                throw new global::System.ArgumentNullException("Original_reviewTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_reviewTitle));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_schoolId));
            if ((Original_reviewImage == null)) {
                throw new global::System.ArgumentNullException("Original_reviewImage");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_reviewImage));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((byte)(Original_studentType));
            if ((Original_graduatedDate == null)) {
                throw new global::System.ArgumentNullException("Original_graduatedDate");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_graduatedDate));
            }
            this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_insertDate));
            if ((Original_userName == null)) {
                throw new global::System.ArgumentNullException("Original_userName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_userName));
            }
            if ((Original_userIP == null)) {
                throw new global::System.ArgumentNullException("Original_userIP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_userIP));
            }
            if ((Original_isPublished.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((bool)(Original_isPublished.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(Original_categoryId));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_fieldId));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(Original_subFieldId));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_courseId));
            if ((Original_userEmail == null)) {
                throw new global::System.ArgumentNullException("Original_userEmail");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_userEmail));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string reviewTitle, string reviewText, int schoolId, string reviewImage, byte studentType, string graduatedDate, System.DateTime insertDate, string userName, string userIP, global::System.Nullable<bool> isPublished, int categoryId, int fieldId, int subFieldId, int courseId, string userEmail) {
            if ((reviewTitle == null)) {
                throw new global::System.ArgumentNullException("reviewTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(reviewTitle));
            }
            if ((reviewText == null)) {
                throw new global::System.ArgumentNullException("reviewText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(reviewText));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(schoolId));
            if ((reviewImage == null)) {
                throw new global::System.ArgumentNullException("reviewImage");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(reviewImage));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((byte)(studentType));
            if ((graduatedDate == null)) {
                throw new global::System.ArgumentNullException("graduatedDate");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(graduatedDate));
            }
            this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(insertDate));
            if ((userName == null)) {
                throw new global::System.ArgumentNullException("userName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(userName));
            }
            if ((userIP == null)) {
                throw new global::System.ArgumentNullException("userIP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(userIP));
            }
            if ((isPublished.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((bool)(isPublished.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[10].Value = ((int)(categoryId));
            this.Adapter.InsertCommand.Parameters[11].Value = ((int)(fieldId));
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(subFieldId));
            this.Adapter.InsertCommand.Parameters[13].Value = ((int)(courseId));
            if ((userEmail == null)) {
                throw new global::System.ArgumentNullException("userEmail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(userEmail));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string reviewTitle, 
                    string reviewText, 
                    int schoolId, 
                    string reviewImage, 
                    byte studentType, 
                    string graduatedDate, 
                    System.DateTime insertDate, 
                    string userName, 
                    string userIP, 
                    global::System.Nullable<bool> isPublished, 
                    int categoryId, 
                    int fieldId, 
                    int subFieldId, 
                    int courseId, 
                    string userEmail, 
                    int Original_reviewId, 
                    string Original_reviewTitle, 
                    int Original_schoolId, 
                    string Original_reviewImage, 
                    byte Original_studentType, 
                    string Original_graduatedDate, 
                    System.DateTime Original_insertDate, 
                    string Original_userName, 
                    string Original_userIP, 
                    global::System.Nullable<bool> Original_isPublished, 
                    int Original_categoryId, 
                    int Original_fieldId, 
                    int Original_subFieldId, 
                    int Original_courseId, 
                    string Original_userEmail, 
                    int reviewId) {
            if ((reviewTitle == null)) {
                throw new global::System.ArgumentNullException("reviewTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(reviewTitle));
            }
            if ((reviewText == null)) {
                throw new global::System.ArgumentNullException("reviewText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(reviewText));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(schoolId));
            if ((reviewImage == null)) {
                throw new global::System.ArgumentNullException("reviewImage");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(reviewImage));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((byte)(studentType));
            if ((graduatedDate == null)) {
                throw new global::System.ArgumentNullException("graduatedDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(graduatedDate));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(insertDate));
            if ((userName == null)) {
                throw new global::System.ArgumentNullException("userName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(userName));
            }
            if ((userIP == null)) {
                throw new global::System.ArgumentNullException("userIP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(userIP));
            }
            if ((isPublished.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((bool)(isPublished.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(categoryId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(fieldId));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(subFieldId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(courseId));
            if ((userEmail == null)) {
                throw new global::System.ArgumentNullException("userEmail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(userEmail));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_reviewId));
            if ((Original_reviewTitle == null)) {
                throw new global::System.ArgumentNullException("Original_reviewTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_reviewTitle));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_schoolId));
            if ((Original_reviewImage == null)) {
                throw new global::System.ArgumentNullException("Original_reviewImage");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_reviewImage));
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((byte)(Original_studentType));
            if ((Original_graduatedDate == null)) {
                throw new global::System.ArgumentNullException("Original_graduatedDate");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_graduatedDate));
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((System.DateTime)(Original_insertDate));
            if ((Original_userName == null)) {
                throw new global::System.ArgumentNullException("Original_userName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_userName));
            }
            if ((Original_userIP == null)) {
                throw new global::System.ArgumentNullException("Original_userIP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_userIP));
            }
            if ((Original_isPublished.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((bool)(Original_isPublished.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_categoryId));
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_fieldId));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(Original_subFieldId));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_courseId));
            if ((Original_userEmail == null)) {
                throw new global::System.ArgumentNullException("Original_userEmail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_userEmail));
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(reviewId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string reviewTitle, 
                    string reviewText, 
                    int schoolId, 
                    string reviewImage, 
                    byte studentType, 
                    string graduatedDate, 
                    System.DateTime insertDate, 
                    string userName, 
                    string userIP, 
                    global::System.Nullable<bool> isPublished, 
                    int categoryId, 
                    int fieldId, 
                    int subFieldId, 
                    int courseId, 
                    string userEmail, 
                    int Original_reviewId, 
                    string Original_reviewTitle, 
                    int Original_schoolId, 
                    string Original_reviewImage, 
                    byte Original_studentType, 
                    string Original_graduatedDate, 
                    System.DateTime Original_insertDate, 
                    string Original_userName, 
                    string Original_userIP, 
                    global::System.Nullable<bool> Original_isPublished, 
                    int Original_categoryId, 
                    int Original_fieldId, 
                    int Original_subFieldId, 
                    int Original_courseId, 
                    string Original_userEmail) {
            return this.Update(reviewTitle, reviewText, schoolId, reviewImage, studentType, graduatedDate, insertDate, userName, userIP, isPublished, categoryId, fieldId, subFieldId, courseId, userEmail, Original_reviewId, Original_reviewTitle, Original_schoolId, Original_reviewImage, Original_studentType, Original_graduatedDate, Original_insertDate, Original_userName, Original_userIP, Original_isPublished, Original_categoryId, Original_fieldId, Original_subFieldId, Original_courseId, Original_userEmail, Original_reviewId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TScholarshipsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TScholarshipsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TScholarships";
            tableMapping.ColumnMappings.Add("ScholarshipId", "ScholarshipId");
            tableMapping.ColumnMappings.Add("ScholarshipName", "ScholarshipName");
            tableMapping.ColumnMappings.Add("ScholarshipText", "ScholarshipText");
            tableMapping.ColumnMappings.Add("SchoolId", "SchoolId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TScholarships] WHERE (([ScholarshipId] = @Original_Scholarship" +
                "Id) AND ((@IsNull_ScholarshipName = 1 AND [ScholarshipName] IS NULL) OR ([Schola" +
                "rshipName] = @Original_ScholarshipName)) AND ([SchoolId] = @Original_SchoolId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScholarshipId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ScholarshipName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScholarshipName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TScholarships] ([ScholarshipName], [ScholarshipText], [SchoolId]) VALUES (@ScholarshipName, @ScholarshipText, @SchoolId);
SELECT ScholarshipId, ScholarshipName, ScholarshipText, SchoolId FROM TScholarships WHERE (ScholarshipId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScholarshipName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScholarshipText", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TScholarships] SET [ScholarshipName] = @ScholarshipName, [ScholarshipText] = @ScholarshipText, [SchoolId] = @SchoolId WHERE (([ScholarshipId] = @Original_ScholarshipId) AND ((@IsNull_ScholarshipName = 1 AND [ScholarshipName] IS NULL) OR ([ScholarshipName] = @Original_ScholarshipName)) AND ([SchoolId] = @Original_SchoolId));
SELECT ScholarshipId, ScholarshipName, ScholarshipText, SchoolId FROM TScholarships WHERE (ScholarshipId = @ScholarshipId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScholarshipName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScholarshipText", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipText", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScholarshipId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ScholarshipName", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipName", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ScholarshipName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SchoolId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SchoolId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ScholarshipId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "ScholarshipId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ScholarshipId, ScholarshipName, ScholarshipText, SchoolId FROM dbo.TSchola" +
                "rships";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TScholarshipsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TScholarshipsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TScholarshipsDataTable dataTable = new StudyingDataSet.TScholarshipsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TScholarshipsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TScholarships");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_ScholarshipId, string Original_ScholarshipName, long Original_SchoolId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_ScholarshipId));
            if ((Original_ScholarshipName == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ScholarshipName));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((long)(Original_SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ScholarshipName, string ScholarshipText, long SchoolId) {
            if ((ScholarshipName == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ScholarshipName));
            }
            if ((ScholarshipText == null)) {
                throw new global::System.ArgumentNullException("ScholarshipText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ScholarshipText));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(SchoolId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ScholarshipName, string ScholarshipText, long SchoolId, long Original_ScholarshipId, string Original_ScholarshipName, long Original_SchoolId, long ScholarshipId) {
            if ((ScholarshipName == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ScholarshipName));
            }
            if ((ScholarshipText == null)) {
                throw new global::System.ArgumentNullException("ScholarshipText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ScholarshipText));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(SchoolId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_ScholarshipId));
            if ((Original_ScholarshipName == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_ScholarshipName));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((long)(Original_SchoolId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((long)(ScholarshipId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ScholarshipName, string ScholarshipText, long SchoolId, long Original_ScholarshipId, string Original_ScholarshipName, long Original_SchoolId) {
            return this.Update(ScholarshipName, ScholarshipText, SchoolId, Original_ScholarshipId, Original_ScholarshipName, Original_SchoolId, Original_ScholarshipId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TSubAreasCoursesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TSubAreasCoursesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TSubAreasCourses";
            tableMapping.ColumnMappings.Add("SubAreaCoursesId", "SubAreaCoursesId");
            tableMapping.ColumnMappings.Add("SubAreaCoursesName", "SubAreaCoursesName");
            tableMapping.ColumnMappings.Add("AreaCoursesId", "AreaCoursesId");
            tableMapping.ColumnMappings.Add("FlagPopular", "FlagPopular");
            tableMapping.ColumnMappings.Add("metaDesc", "metaDesc");
            tableMapping.ColumnMappings.Add("metaKeywords", "metaKeywords");
            tableMapping.ColumnMappings.Add("subAreaTitle", "subAreaTitle");
            tableMapping.ColumnMappings.Add("leadSlogan", "leadSlogan");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TSubAreasCourses] WHERE (([SubAreaCoursesId] = @Original_SubAreaCoursesId) AND ([SubAreaCoursesName] = @Original_SubAreaCoursesName) AND ([AreaCoursesId] = @Original_AreaCoursesId) AND ([FlagPopular] = @Original_FlagPopular) AND ([metaDesc] = @Original_metaDesc) AND ([metaKeywords] = @Original_metaKeywords) AND ([subAreaTitle] = @Original_subAreaTitle) AND ((@IsNull_leadSlogan = 1 AND [leadSlogan] IS NULL) OR ([leadSlogan] = @Original_leadSlogan)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCoursesName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCoursesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagPopular", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPopular", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subAreaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_leadSlogan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TSubAreasCourses] ([SubAreaCoursesId], [SubAreaCoursesName], [AreaCoursesId], [FlagPopular], [metaDesc], [metaKeywords], [subAreaTitle], [leadSlogan]) VALUES (@SubAreaCoursesId, @SubAreaCoursesName, @AreaCoursesId, @FlagPopular, @metaDesc, @metaKeywords, @subAreaTitle, @leadSlogan);
SELECT SubAreaCoursesId, SubAreaCoursesName, AreaCoursesId, FlagPopular, metaDesc, metaKeywords, subAreaTitle, leadSlogan FROM TSubAreasCourses WHERE (SubAreaCoursesId = @SubAreaCoursesId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCoursesName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCoursesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagPopular", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPopular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subAreaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TSubAreasCourses] SET [SubAreaCoursesId] = @SubAreaCoursesId, [SubAreaCoursesName] = @SubAreaCoursesName, [AreaCoursesId] = @AreaCoursesId, [FlagPopular] = @FlagPopular, [metaDesc] = @metaDesc, [metaKeywords] = @metaKeywords, [subAreaTitle] = @subAreaTitle, [leadSlogan] = @leadSlogan WHERE (([SubAreaCoursesId] = @Original_SubAreaCoursesId) AND ([SubAreaCoursesName] = @Original_SubAreaCoursesName) AND ([AreaCoursesId] = @Original_AreaCoursesId) AND ([FlagPopular] = @Original_FlagPopular) AND ([metaDesc] = @Original_metaDesc) AND ([metaKeywords] = @Original_metaKeywords) AND ([subAreaTitle] = @Original_subAreaTitle) AND ((@IsNull_leadSlogan = 1 AND [leadSlogan] IS NULL) OR ([leadSlogan] = @Original_leadSlogan)));
SELECT SubAreaCoursesId, SubAreaCoursesName, AreaCoursesId, FlagPopular, metaDesc, metaKeywords, subAreaTitle, leadSlogan FROM TSubAreasCourses WHERE (SubAreaCoursesId = @SubAreaCoursesId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaCoursesName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCoursesId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FlagPopular", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPopular", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subAreaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaTitle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaCoursesName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaCoursesName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaCoursesId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaCoursesId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FlagPopular", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FlagPopular", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaDesc", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaDesc", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_metaKeywords", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "metaKeywords", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_subAreaTitle", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "subAreaTitle", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_leadSlogan", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_leadSlogan", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "leadSlogan", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SubAreaCoursesId, SubAreaCoursesName, AreaCoursesId, FlagPopular, metaDesc" +
                ", metaKeywords, subAreaTitle, leadSlogan FROM dbo.TSubAreasCourses";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TSubAreasCoursesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TSubAreasCoursesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TSubAreasCoursesDataTable dataTable = new StudyingDataSet.TSubAreasCoursesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TSubAreasCoursesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TSubAreasCourses");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_SubAreaCoursesId, string Original_SubAreaCoursesName, long Original_AreaCoursesId, bool Original_FlagPopular, string Original_metaDesc, string Original_metaKeywords, string Original_subAreaTitle, string Original_leadSlogan) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_SubAreaCoursesId));
            if ((Original_SubAreaCoursesName == null)) {
                throw new global::System.ArgumentNullException("Original_SubAreaCoursesName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_SubAreaCoursesName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((long)(Original_AreaCoursesId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((bool)(Original_FlagPopular));
            if ((Original_metaDesc == null)) {
                throw new global::System.ArgumentNullException("Original_metaDesc");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_metaDesc));
            }
            if ((Original_metaKeywords == null)) {
                throw new global::System.ArgumentNullException("Original_metaKeywords");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_metaKeywords));
            }
            if ((Original_subAreaTitle == null)) {
                throw new global::System.ArgumentNullException("Original_subAreaTitle");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_subAreaTitle));
            }
            if ((Original_leadSlogan == null)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_leadSlogan));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long SubAreaCoursesId, string SubAreaCoursesName, long AreaCoursesId, bool FlagPopular, string metaDesc, string metaKeywords, string subAreaTitle, string leadSlogan) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(SubAreaCoursesId));
            if ((SubAreaCoursesName == null)) {
                throw new global::System.ArgumentNullException("SubAreaCoursesName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(SubAreaCoursesName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(AreaCoursesId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((bool)(FlagPopular));
            if ((metaDesc == null)) {
                throw new global::System.ArgumentNullException("metaDesc");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(metaDesc));
            }
            if ((metaKeywords == null)) {
                throw new global::System.ArgumentNullException("metaKeywords");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(metaKeywords));
            }
            if ((subAreaTitle == null)) {
                throw new global::System.ArgumentNullException("subAreaTitle");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(subAreaTitle));
            }
            if ((leadSlogan == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(leadSlogan));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    long SubAreaCoursesId, 
                    string SubAreaCoursesName, 
                    long AreaCoursesId, 
                    bool FlagPopular, 
                    string metaDesc, 
                    string metaKeywords, 
                    string subAreaTitle, 
                    string leadSlogan, 
                    long Original_SubAreaCoursesId, 
                    string Original_SubAreaCoursesName, 
                    long Original_AreaCoursesId, 
                    bool Original_FlagPopular, 
                    string Original_metaDesc, 
                    string Original_metaKeywords, 
                    string Original_subAreaTitle, 
                    string Original_leadSlogan) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(SubAreaCoursesId));
            if ((SubAreaCoursesName == null)) {
                throw new global::System.ArgumentNullException("SubAreaCoursesName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(SubAreaCoursesName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(AreaCoursesId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((bool)(FlagPopular));
            if ((metaDesc == null)) {
                throw new global::System.ArgumentNullException("metaDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(metaDesc));
            }
            if ((metaKeywords == null)) {
                throw new global::System.ArgumentNullException("metaKeywords");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(metaKeywords));
            }
            if ((subAreaTitle == null)) {
                throw new global::System.ArgumentNullException("subAreaTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(subAreaTitle));
            }
            if ((leadSlogan == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(leadSlogan));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(Original_SubAreaCoursesId));
            if ((Original_SubAreaCoursesName == null)) {
                throw new global::System.ArgumentNullException("Original_SubAreaCoursesName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_SubAreaCoursesName));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(Original_AreaCoursesId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(Original_FlagPopular));
            if ((Original_metaDesc == null)) {
                throw new global::System.ArgumentNullException("Original_metaDesc");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_metaDesc));
            }
            if ((Original_metaKeywords == null)) {
                throw new global::System.ArgumentNullException("Original_metaKeywords");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_metaKeywords));
            }
            if ((Original_subAreaTitle == null)) {
                throw new global::System.ArgumentNullException("Original_subAreaTitle");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_subAreaTitle));
            }
            if ((Original_leadSlogan == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_leadSlogan));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string SubAreaCoursesName, long AreaCoursesId, bool FlagPopular, string metaDesc, string metaKeywords, string subAreaTitle, string leadSlogan, long Original_SubAreaCoursesId, string Original_SubAreaCoursesName, long Original_AreaCoursesId, bool Original_FlagPopular, string Original_metaDesc, string Original_metaKeywords, string Original_subAreaTitle, string Original_leadSlogan) {
            return this.Update(Original_SubAreaCoursesId, SubAreaCoursesName, AreaCoursesId, FlagPopular, metaDesc, metaKeywords, subAreaTitle, leadSlogan, Original_SubAreaCoursesId, Original_SubAreaCoursesName, Original_AreaCoursesId, Original_FlagPopular, Original_metaDesc, Original_metaKeywords, Original_subAreaTitle, Original_leadSlogan);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TTypeCoursesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TTypeCoursesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TTypeCourses";
            tableMapping.ColumnMappings.Add("CourseTypeId", "CourseTypeId");
            tableMapping.ColumnMappings.Add("CourseTypeName", "CourseTypeName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TTypeCourses] WHERE (([CourseTypeId] = @Original_CourseTypeId)" +
                " AND ([CourseTypeName] = @Original_CourseTypeName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseTypeId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseTypeName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TTypeCourses] ([CourseTypeName]) VALUES (@CourseTypeName);\r\nSE" +
                "LECT CourseTypeId, CourseTypeName FROM TTypeCourses WHERE (CourseTypeId = SCOPE_" +
                "IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseTypeName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TTypeCourses] SET [CourseTypeName] = @CourseTypeName WHERE (([CourseTypeId] = @Original_CourseTypeId) AND ([CourseTypeName] = @Original_CourseTypeName));
SELECT CourseTypeId, CourseTypeName FROM TTypeCourses WHERE (CourseTypeId = @CourseTypeId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseTypeName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseTypeId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseTypeName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseTypeId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CourseTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT CourseTypeId, CourseTypeName FROM dbo.TTypeCourses";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TTypeCoursesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TTypeCoursesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TTypeCoursesDataTable dataTable = new StudyingDataSet.TTypeCoursesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TTypeCoursesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TTypeCourses");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_CourseTypeId, string Original_CourseTypeName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_CourseTypeId));
            if ((Original_CourseTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_CourseTypeName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CourseTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string CourseTypeName) {
            if ((CourseTypeName == null)) {
                throw new global::System.ArgumentNullException("CourseTypeName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(CourseTypeName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CourseTypeName, long Original_CourseTypeId, string Original_CourseTypeName, long CourseTypeId) {
            if ((CourseTypeName == null)) {
                throw new global::System.ArgumentNullException("CourseTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(CourseTypeName));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(Original_CourseTypeId));
            if ((Original_CourseTypeName == null)) {
                throw new global::System.ArgumentNullException("Original_CourseTypeName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_CourseTypeName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(CourseTypeId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string CourseTypeName, long Original_CourseTypeId, string Original_CourseTypeName) {
            return this.Update(CourseTypeName, Original_CourseTypeId, Original_CourseTypeName, Original_CourseTypeId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TVisitorsMailsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TVisitorsMailsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TVisitorsMails";
            tableMapping.ColumnMappings.Add("VisitorId", "VisitorId");
            tableMapping.ColumnMappings.Add("VisitorMail", "VisitorMail");
            tableMapping.ColumnMappings.Add("VisitDate", "VisitDate");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TVisitorsMails] WHERE (([VisitorId] = @Original_VisitorId) AND" +
                " ([VisitorMail] = @Original_VisitorMail) AND ([VisitDate] = @Original_VisitDate)" +
                ")";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TVisitorsMails] ([VisitorMail], [VisitDate]) VALUES (@VisitorM" +
                "ail, @VisitDate);\r\nSELECT VisitorId, VisitorMail, VisitDate FROM TVisitorsMails " +
                "WHERE (VisitorId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TVisitorsMails] SET [VisitorMail] = @VisitorMail, [VisitDate] = @VisitDate WHERE (([VisitorId] = @Original_VisitorId) AND ([VisitorMail] = @Original_VisitorMail) AND ([VisitDate] = @Original_VisitDate));
SELECT VisitorId, VisitorMail, VisitDate FROM TVisitorsMails WHERE (VisitorId = @VisitorId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT VisitorId, VisitorMail, VisitDate FROM dbo.TVisitorsMails";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TVisitorsMailsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TVisitorsMailsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TVisitorsMailsDataTable dataTable = new StudyingDataSet.TVisitorsMailsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TVisitorsMailsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TVisitorsMails");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_VisitorId, string Original_VisitorMail, System.DateTime Original_VisitDate) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_VisitorId));
            if ((Original_VisitorMail == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorMail");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_VisitorMail));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_VisitDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string VisitorMail, System.DateTime VisitDate) {
            if ((VisitorMail == null)) {
                throw new global::System.ArgumentNullException("VisitorMail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(VisitorMail));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(VisitDate));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string VisitorMail, System.DateTime VisitDate, long Original_VisitorId, string Original_VisitorMail, System.DateTime Original_VisitDate, long VisitorId) {
            if ((VisitorMail == null)) {
                throw new global::System.ArgumentNullException("VisitorMail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(VisitorMail));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(VisitDate));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Original_VisitorId));
            if ((Original_VisitorMail == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorMail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_VisitorMail));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Original_VisitDate));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((long)(VisitorId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string VisitorMail, System.DateTime VisitDate, long Original_VisitorId, string Original_VisitorMail, System.DateTime Original_VisitDate) {
            return this.Update(VisitorMail, VisitDate, Original_VisitorId, Original_VisitorMail, Original_VisitDate, Original_VisitorId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TVisitorsMessagesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TVisitorsMessagesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TVisitorsMessages";
            tableMapping.ColumnMappings.Add("MessageId", "MessageId");
            tableMapping.ColumnMappings.Add("VisitorName", "VisitorName");
            tableMapping.ColumnMappings.Add("VisitorLastName", "VisitorLastName");
            tableMapping.ColumnMappings.Add("VisitorMail", "VisitorMail");
            tableMapping.ColumnMappings.Add("VisitorCity", "VisitorCity");
            tableMapping.ColumnMappings.Add("VisitorStreet", "VisitorStreet");
            tableMapping.ColumnMappings.Add("VisitorPhone", "VisitorPhone");
            tableMapping.ColumnMappings.Add("VisitorAge", "VisitorAge");
            tableMapping.ColumnMappings.Add("VisitorSex", "VisitorSex");
            tableMapping.ColumnMappings.Add("DateSent", "DateSent");
            tableMapping.ColumnMappings.Add("CategoryId", "CategoryId");
            tableMapping.ColumnMappings.Add("AreaId", "AreaId");
            tableMapping.ColumnMappings.Add("SubAreaId", "SubAreaId");
            tableMapping.ColumnMappings.Add("RegionId", "RegionId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TVisitorsMessages] WHERE (([MessageId] = @Original_MessageId) AND ([VisitorName] = @Original_VisitorName) AND ([VisitorLastName] = @Original_VisitorLastName) AND ([VisitorMail] = @Original_VisitorMail) AND ([VisitorCity] = @Original_VisitorCity) AND ([VisitorStreet] = @Original_VisitorStreet) AND ([VisitorPhone] = @Original_VisitorPhone) AND ([VisitorAge] = @Original_VisitorAge) AND ([VisitorSex] = @Original_VisitorSex) AND ([DateSent] = @Original_DateSent) AND ([CategoryId] = @Original_CategoryId) AND ((@IsNull_AreaId = 1 AND [AreaId] IS NULL) OR ([AreaId] = @Original_AreaId)) AND ((@IsNull_SubAreaId = 1 AND [SubAreaId] IS NULL) OR ([SubAreaId] = @Original_SubAreaId)) AND ((@IsNull_RegionId = 1 AND [RegionId] IS NULL) OR ([RegionId] = @Original_RegionId)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorLastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorCity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorStreet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorAge", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorAge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorSex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateSent", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateSent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RegionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TVisitorsMessages] ([VisitorName], [VisitorLastName], [VisitorMail], [VisitorCity], [VisitorStreet], [VisitorPhone], [VisitorAge], [VisitorSex], [DateSent], [CategoryId], [AreaId], [SubAreaId], [RegionId]) VALUES (@VisitorName, @VisitorLastName, @VisitorMail, @VisitorCity, @VisitorStreet, @VisitorPhone, @VisitorAge, @VisitorSex, @DateSent, @CategoryId, @AreaId, @SubAreaId, @RegionId);
SELECT MessageId, VisitorName, VisitorLastName, VisitorMail, VisitorCity, VisitorStreet, VisitorPhone, VisitorAge, VisitorSex, DateSent, CategoryId, AreaId, SubAreaId, RegionId FROM TVisitorsMessages WHERE (MessageId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorLastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorCity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorStreet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorAge", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorAge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorSex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateSent", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TVisitorsMessages] SET [VisitorName] = @VisitorName, [VisitorLastName] = @VisitorLastName, [VisitorMail] = @VisitorMail, [VisitorCity] = @VisitorCity, [VisitorStreet] = @VisitorStreet, [VisitorPhone] = @VisitorPhone, [VisitorAge] = @VisitorAge, [VisitorSex] = @VisitorSex, [DateSent] = @DateSent, [CategoryId] = @CategoryId, [AreaId] = @AreaId, [SubAreaId] = @SubAreaId, [RegionId] = @RegionId WHERE (([MessageId] = @Original_MessageId) AND ([VisitorName] = @Original_VisitorName) AND ([VisitorLastName] = @Original_VisitorLastName) AND ([VisitorMail] = @Original_VisitorMail) AND ([VisitorCity] = @Original_VisitorCity) AND ([VisitorStreet] = @Original_VisitorStreet) AND ([VisitorPhone] = @Original_VisitorPhone) AND ([VisitorAge] = @Original_VisitorAge) AND ([VisitorSex] = @Original_VisitorSex) AND ([DateSent] = @Original_DateSent) AND ([CategoryId] = @Original_CategoryId) AND ((@IsNull_AreaId = 1 AND [AreaId] IS NULL) OR ([AreaId] = @Original_AreaId)) AND ((@IsNull_SubAreaId = 1 AND [SubAreaId] IS NULL) OR ([SubAreaId] = @Original_SubAreaId)) AND ((@IsNull_RegionId = 1 AND [RegionId] IS NULL) OR ([RegionId] = @Original_RegionId)));
SELECT MessageId, VisitorName, VisitorLastName, VisitorMail, VisitorCity, VisitorStreet, VisitorPhone, VisitorAge, VisitorSex, DateSent, CategoryId, AreaId, SubAreaId, RegionId FROM TVisitorsMessages WHERE (MessageId = @MessageId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorLastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorCity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorStreet", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorPhone", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorAge", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorAge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@VisitorSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorSex", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateSent", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateSent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MessageId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorLastName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorLastName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorMail", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorMail", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorCity", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorCity", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorStreet", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorStreet", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorPhone", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorPhone", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorAge", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorAge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_VisitorSex", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "VisitorSex", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateSent", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateSent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CategoryId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CategoryId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_SubAreaId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubAreaId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubAreaId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_RegionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RegionId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RegionId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessageId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MessageId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MessageId, VisitorName, VisitorLastName, VisitorMail, VisitorCity, Visitor" +
                "Street, VisitorPhone, VisitorAge, VisitorSex, DateSent, CategoryId, AreaId, SubA" +
                "reaId, RegionId FROM dbo.TVisitorsMessages";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TVisitorsMessagesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TVisitorsMessagesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TVisitorsMessagesDataTable dataTable = new StudyingDataSet.TVisitorsMessagesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TVisitorsMessagesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TVisitorsMessages");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_MessageId, string Original_VisitorName, string Original_VisitorLastName, string Original_VisitorMail, string Original_VisitorCity, string Original_VisitorStreet, string Original_VisitorPhone, string Original_VisitorAge, string Original_VisitorSex, System.DateTime Original_DateSent, long Original_CategoryId, global::System.Nullable<long> Original_AreaId, global::System.Nullable<long> Original_SubAreaId, global::System.Nullable<long> Original_RegionId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_MessageId));
            if ((Original_VisitorName == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_VisitorName));
            }
            if ((Original_VisitorLastName == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorLastName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_VisitorLastName));
            }
            if ((Original_VisitorMail == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorMail");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_VisitorMail));
            }
            if ((Original_VisitorCity == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorCity");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_VisitorCity));
            }
            if ((Original_VisitorStreet == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorStreet");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_VisitorStreet));
            }
            if ((Original_VisitorPhone == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorPhone");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_VisitorPhone));
            }
            if ((Original_VisitorAge == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorAge");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_VisitorAge));
            }
            if ((Original_VisitorSex == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorSex");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_VisitorSex));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.DateTime)(Original_DateSent));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_CategoryId));
            if ((Original_AreaId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((long)(Original_AreaId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_SubAreaId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_SubAreaId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_RegionId.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((long)(Original_RegionId.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string VisitorName, string VisitorLastName, string VisitorMail, string VisitorCity, string VisitorStreet, string VisitorPhone, string VisitorAge, string VisitorSex, System.DateTime DateSent, long CategoryId, global::System.Nullable<long> AreaId, global::System.Nullable<long> SubAreaId, global::System.Nullable<long> RegionId) {
            if ((VisitorName == null)) {
                throw new global::System.ArgumentNullException("VisitorName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(VisitorName));
            }
            if ((VisitorLastName == null)) {
                throw new global::System.ArgumentNullException("VisitorLastName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(VisitorLastName));
            }
            if ((VisitorMail == null)) {
                throw new global::System.ArgumentNullException("VisitorMail");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(VisitorMail));
            }
            if ((VisitorCity == null)) {
                throw new global::System.ArgumentNullException("VisitorCity");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(VisitorCity));
            }
            if ((VisitorStreet == null)) {
                throw new global::System.ArgumentNullException("VisitorStreet");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(VisitorStreet));
            }
            if ((VisitorPhone == null)) {
                throw new global::System.ArgumentNullException("VisitorPhone");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(VisitorPhone));
            }
            if ((VisitorAge == null)) {
                throw new global::System.ArgumentNullException("VisitorAge");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(VisitorAge));
            }
            if ((VisitorSex == null)) {
                throw new global::System.ArgumentNullException("VisitorSex");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(VisitorSex));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(DateSent));
            this.Adapter.InsertCommand.Parameters[9].Value = ((long)(CategoryId));
            if ((AreaId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((long)(AreaId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SubAreaId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((long)(SubAreaId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((RegionId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((long)(RegionId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string VisitorName, 
                    string VisitorLastName, 
                    string VisitorMail, 
                    string VisitorCity, 
                    string VisitorStreet, 
                    string VisitorPhone, 
                    string VisitorAge, 
                    string VisitorSex, 
                    System.DateTime DateSent, 
                    long CategoryId, 
                    global::System.Nullable<long> AreaId, 
                    global::System.Nullable<long> SubAreaId, 
                    global::System.Nullable<long> RegionId, 
                    long Original_MessageId, 
                    string Original_VisitorName, 
                    string Original_VisitorLastName, 
                    string Original_VisitorMail, 
                    string Original_VisitorCity, 
                    string Original_VisitorStreet, 
                    string Original_VisitorPhone, 
                    string Original_VisitorAge, 
                    string Original_VisitorSex, 
                    System.DateTime Original_DateSent, 
                    long Original_CategoryId, 
                    global::System.Nullable<long> Original_AreaId, 
                    global::System.Nullable<long> Original_SubAreaId, 
                    global::System.Nullable<long> Original_RegionId, 
                    long MessageId) {
            if ((VisitorName == null)) {
                throw new global::System.ArgumentNullException("VisitorName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(VisitorName));
            }
            if ((VisitorLastName == null)) {
                throw new global::System.ArgumentNullException("VisitorLastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(VisitorLastName));
            }
            if ((VisitorMail == null)) {
                throw new global::System.ArgumentNullException("VisitorMail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(VisitorMail));
            }
            if ((VisitorCity == null)) {
                throw new global::System.ArgumentNullException("VisitorCity");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(VisitorCity));
            }
            if ((VisitorStreet == null)) {
                throw new global::System.ArgumentNullException("VisitorStreet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(VisitorStreet));
            }
            if ((VisitorPhone == null)) {
                throw new global::System.ArgumentNullException("VisitorPhone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(VisitorPhone));
            }
            if ((VisitorAge == null)) {
                throw new global::System.ArgumentNullException("VisitorAge");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(VisitorAge));
            }
            if ((VisitorSex == null)) {
                throw new global::System.ArgumentNullException("VisitorSex");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(VisitorSex));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(DateSent));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((long)(CategoryId));
            if ((AreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((long)(AreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((SubAreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((long)(SubAreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((RegionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(RegionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[13].Value = ((long)(Original_MessageId));
            if ((Original_VisitorName == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_VisitorName));
            }
            if ((Original_VisitorLastName == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorLastName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_VisitorLastName));
            }
            if ((Original_VisitorMail == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorMail");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_VisitorMail));
            }
            if ((Original_VisitorCity == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorCity");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_VisitorCity));
            }
            if ((Original_VisitorStreet == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorStreet");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_VisitorStreet));
            }
            if ((Original_VisitorPhone == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorPhone");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_VisitorPhone));
            }
            if ((Original_VisitorAge == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorAge");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_VisitorAge));
            }
            if ((Original_VisitorSex == null)) {
                throw new global::System.ArgumentNullException("Original_VisitorSex");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_VisitorSex));
            }
            this.Adapter.UpdateCommand.Parameters[22].Value = ((System.DateTime)(Original_DateSent));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((long)(Original_CategoryId));
            if ((Original_AreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(Original_AreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_SubAreaId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(Original_SubAreaId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_RegionId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(Original_RegionId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[30].Value = ((long)(MessageId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string VisitorName, 
                    string VisitorLastName, 
                    string VisitorMail, 
                    string VisitorCity, 
                    string VisitorStreet, 
                    string VisitorPhone, 
                    string VisitorAge, 
                    string VisitorSex, 
                    System.DateTime DateSent, 
                    long CategoryId, 
                    global::System.Nullable<long> AreaId, 
                    global::System.Nullable<long> SubAreaId, 
                    global::System.Nullable<long> RegionId, 
                    long Original_MessageId, 
                    string Original_VisitorName, 
                    string Original_VisitorLastName, 
                    string Original_VisitorMail, 
                    string Original_VisitorCity, 
                    string Original_VisitorStreet, 
                    string Original_VisitorPhone, 
                    string Original_VisitorAge, 
                    string Original_VisitorSex, 
                    System.DateTime Original_DateSent, 
                    long Original_CategoryId, 
                    global::System.Nullable<long> Original_AreaId, 
                    global::System.Nullable<long> Original_SubAreaId, 
                    global::System.Nullable<long> Original_RegionId) {
            return this.Update(VisitorName, VisitorLastName, VisitorMail, VisitorCity, VisitorStreet, VisitorPhone, VisitorAge, VisitorSex, DateSent, CategoryId, AreaId, SubAreaId, RegionId, Original_MessageId, Original_VisitorName, Original_VisitorLastName, Original_VisitorMail, Original_VisitorCity, Original_VisitorStreet, Original_VisitorPhone, Original_VisitorAge, Original_VisitorSex, Original_DateSent, Original_CategoryId, Original_AreaId, Original_SubAreaId, Original_RegionId, Original_MessageId);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TYoramCatsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TYoramCatsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TYoramCats";
            tableMapping.ColumnMappings.Add("theStudentSubCatId", "theStudentSubCatId");
            tableMapping.ColumnMappings.Add("yoramCatId", "yoramCatId");
            tableMapping.ColumnMappings.Add("yoramCatName", "yoramCatName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TYoramCats] WHERE (([theStudentSubCatId] = @Original_theStuden" +
                "tSubCatId) AND ([yoramCatId] = @Original_yoramCatId) AND ([yoramCatName] = @Orig" +
                "inal_yoramCatName))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_theStudentSubCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSubCatId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramCatName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TYoramCats] ([theStudentSubCatId], [yoramCatId], [yoramCatName]) VALUES (@theStudentSubCatId, @yoramCatId, @yoramCatName);
SELECT theStudentSubCatId, yoramCatId, yoramCatName FROM TYoramCats WHERE (theStudentSubCatId = @theStudentSubCatId) AND (yoramCatId = @yoramCatId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@theStudentSubCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSubCatId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramCatName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TYoramCats] SET [theStudentSubCatId] = @theStudentSubCatId, [yoramCatId] = @yoramCatId, [yoramCatName] = @yoramCatName WHERE (([theStudentSubCatId] = @Original_theStudentSubCatId) AND ([yoramCatId] = @Original_yoramCatId) AND ([yoramCatName] = @Original_yoramCatName));
SELECT theStudentSubCatId, yoramCatId, yoramCatName FROM TYoramCats WHERE (theStudentSubCatId = @theStudentSubCatId) AND (yoramCatId = @yoramCatId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@theStudentSubCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSubCatId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@yoramCatName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_theStudentSubCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "theStudentSubCatId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramCatId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_yoramCatName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "yoramCatName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT theStudentSubCatId, yoramCatId, yoramCatName FROM dbo.TYoramCats";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TYoramCatsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TYoramCatsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TYoramCatsDataTable dataTable = new StudyingDataSet.TYoramCatsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TYoramCatsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TYoramCats");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_theStudentSubCatId, int Original_yoramCatId, string Original_yoramCatName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_theStudentSubCatId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_yoramCatId));
            if ((Original_yoramCatName == null)) {
                throw new global::System.ArgumentNullException("Original_yoramCatName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_yoramCatName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int theStudentSubCatId, int yoramCatId, string yoramCatName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(theStudentSubCatId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(yoramCatId));
            if ((yoramCatName == null)) {
                throw new global::System.ArgumentNullException("yoramCatName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(yoramCatName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int theStudentSubCatId, int yoramCatId, string yoramCatName, int Original_theStudentSubCatId, int Original_yoramCatId, string Original_yoramCatName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(theStudentSubCatId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(yoramCatId));
            if ((yoramCatName == null)) {
                throw new global::System.ArgumentNullException("yoramCatName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(yoramCatName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_theStudentSubCatId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_yoramCatId));
            if ((Original_yoramCatName == null)) {
                throw new global::System.ArgumentNullException("Original_yoramCatName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_yoramCatName));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string yoramCatName, int Original_theStudentSubCatId, int Original_yoramCatId, string Original_yoramCatName) {
            return this.Update(Original_theStudentSubCatId, Original_yoramCatId, yoramCatName, Original_theStudentSubCatId, Original_yoramCatId, Original_yoramCatName);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TLecturesAndCoursesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TLecturesAndCoursesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TLecturesAndCourses";
            tableMapping.ColumnMappings.Add("LecturerId", "LecturerId");
            tableMapping.ColumnMappings.Add("CourseId", "CourseId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TLecturesAndCourses] WHERE (([LecturerId] = @Original_Lecturer" +
                "Id) AND ([CourseId] = @Original_CourseId))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TLecturesAndCourses] ([LecturerId], [CourseId]) VALUES (@Lectu" +
                "rerId, @CourseId);\r\nSELECT LecturerId, CourseId FROM TLecturesAndCourses WHERE (" +
                "CourseId = @CourseId) AND (LecturerId = @LecturerId)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TLecturesAndCourses] SET [LecturerId] = @LecturerId, [CourseId] = @CourseId WHERE (([LecturerId] = @Original_LecturerId) AND ([CourseId] = @Original_CourseId));
SELECT LecturerId, CourseId FROM TLecturesAndCourses WHERE (CourseId = @CourseId) AND (LecturerId = @LecturerId)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LecturerId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LecturerId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LecturerId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CourseId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CourseId", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Durados.Web.Mvc.Specifics.Properties.Settings.Default.tguvotConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LecturerId, CourseId FROM dbo.TLecturesAndCourses";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StudyingDataSet.TLecturesAndCoursesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StudyingDataSet.TLecturesAndCoursesDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StudyingDataSet.TLecturesAndCoursesDataTable dataTable = new StudyingDataSet.TLecturesAndCoursesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet.TLecturesAndCoursesDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(StudyingDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TLecturesAndCourses");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_LecturerId, long Original_CourseId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_LecturerId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((long)(Original_CourseId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(long LecturerId, long CourseId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((long)(LecturerId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((long)(CourseId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long LecturerId, long CourseId, long Original_LecturerId, long Original_CourseId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((long)(LecturerId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(CourseId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(Original_LecturerId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(Original_CourseId));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(long Original_LecturerId, long Original_CourseId) {
            return this.Update(Original_LecturerId, Original_CourseId, Original_LecturerId, Original_CourseId);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private TableEstablishmentsOpenDateTableAdapter _tableEstablishmentsOpenDateTableAdapter;
        
        private TYoramSchoolsTableAdapter _tYoramSchoolsTableAdapter;
        
        private TAdministratorsTableAdapter _tAdministratorsTableAdapter;
        
        private TAdvertisingEstablishmentsTableAdapter _tAdvertisingEstablishmentsTableAdapter;
        
        private TAreasCoursesTableAdapter _tAreasCoursesTableAdapter;
        
        private TArticlesTableAdapter _tArticlesTableAdapter;
        
        private TCategoriesTableAdapter _tCategoriesTableAdapter;
        
        private TCoursesTableAdapter _tCoursesTableAdapter;
        
        private TEstablishmentsTableAdapter _tEstablishmentsTableAdapter;
        
        private TLecturersTableAdapter _tLecturersTableAdapter;
        
        private TMessagesTableAdapter _tMessagesTableAdapter;
        
        private TMessagesForSchoolTableAdapter _tMessagesForSchoolTableAdapter;
        
        private TPhonesListTableAdapter _tPhonesListTableAdapter;
        
        private TPhotoGalleryTableAdapter _tPhotoGalleryTableAdapter;
        
        private TRegionsTableAdapter _tRegionsTableAdapter;
        
        private TReviewsTableAdapter _tReviewsTableAdapter;
        
        private TScholarshipsTableAdapter _tScholarshipsTableAdapter;
        
        private TSubAreasCoursesTableAdapter _tSubAreasCoursesTableAdapter;
        
        private TTypeCoursesTableAdapter _tTypeCoursesTableAdapter;
        
        private TVisitorsMailsTableAdapter _tVisitorsMailsTableAdapter;
        
        private TVisitorsMessagesTableAdapter _tVisitorsMessagesTableAdapter;
        
        private TYoramCatsTableAdapter _tYoramCatsTableAdapter;
        
        private TLecturesAndCoursesTableAdapter _tLecturesAndCoursesTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TableEstablishmentsOpenDateTableAdapter TableEstablishmentsOpenDateTableAdapter {
            get {
                return this._tableEstablishmentsOpenDateTableAdapter;
            }
            set {
                this._tableEstablishmentsOpenDateTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TYoramSchoolsTableAdapter TYoramSchoolsTableAdapter {
            get {
                return this._tYoramSchoolsTableAdapter;
            }
            set {
                this._tYoramSchoolsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TAdministratorsTableAdapter TAdministratorsTableAdapter {
            get {
                return this._tAdministratorsTableAdapter;
            }
            set {
                this._tAdministratorsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TAdvertisingEstablishmentsTableAdapter TAdvertisingEstablishmentsTableAdapter {
            get {
                return this._tAdvertisingEstablishmentsTableAdapter;
            }
            set {
                this._tAdvertisingEstablishmentsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TAreasCoursesTableAdapter TAreasCoursesTableAdapter {
            get {
                return this._tAreasCoursesTableAdapter;
            }
            set {
                this._tAreasCoursesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TArticlesTableAdapter TArticlesTableAdapter {
            get {
                return this._tArticlesTableAdapter;
            }
            set {
                this._tArticlesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCategoriesTableAdapter TCategoriesTableAdapter {
            get {
                return this._tCategoriesTableAdapter;
            }
            set {
                this._tCategoriesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TCoursesTableAdapter TCoursesTableAdapter {
            get {
                return this._tCoursesTableAdapter;
            }
            set {
                this._tCoursesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TEstablishmentsTableAdapter TEstablishmentsTableAdapter {
            get {
                return this._tEstablishmentsTableAdapter;
            }
            set {
                this._tEstablishmentsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TLecturersTableAdapter TLecturersTableAdapter {
            get {
                return this._tLecturersTableAdapter;
            }
            set {
                this._tLecturersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TMessagesTableAdapter TMessagesTableAdapter {
            get {
                return this._tMessagesTableAdapter;
            }
            set {
                this._tMessagesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TMessagesForSchoolTableAdapter TMessagesForSchoolTableAdapter {
            get {
                return this._tMessagesForSchoolTableAdapter;
            }
            set {
                this._tMessagesForSchoolTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TPhonesListTableAdapter TPhonesListTableAdapter {
            get {
                return this._tPhonesListTableAdapter;
            }
            set {
                this._tPhonesListTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TPhotoGalleryTableAdapter TPhotoGalleryTableAdapter {
            get {
                return this._tPhotoGalleryTableAdapter;
            }
            set {
                this._tPhotoGalleryTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TRegionsTableAdapter TRegionsTableAdapter {
            get {
                return this._tRegionsTableAdapter;
            }
            set {
                this._tRegionsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TReviewsTableAdapter TReviewsTableAdapter {
            get {
                return this._tReviewsTableAdapter;
            }
            set {
                this._tReviewsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TScholarshipsTableAdapter TScholarshipsTableAdapter {
            get {
                return this._tScholarshipsTableAdapter;
            }
            set {
                this._tScholarshipsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TSubAreasCoursesTableAdapter TSubAreasCoursesTableAdapter {
            get {
                return this._tSubAreasCoursesTableAdapter;
            }
            set {
                this._tSubAreasCoursesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TTypeCoursesTableAdapter TTypeCoursesTableAdapter {
            get {
                return this._tTypeCoursesTableAdapter;
            }
            set {
                this._tTypeCoursesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TVisitorsMailsTableAdapter TVisitorsMailsTableAdapter {
            get {
                return this._tVisitorsMailsTableAdapter;
            }
            set {
                this._tVisitorsMailsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TVisitorsMessagesTableAdapter TVisitorsMessagesTableAdapter {
            get {
                return this._tVisitorsMessagesTableAdapter;
            }
            set {
                this._tVisitorsMessagesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TYoramCatsTableAdapter TYoramCatsTableAdapter {
            get {
                return this._tYoramCatsTableAdapter;
            }
            set {
                this._tYoramCatsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public TLecturesAndCoursesTableAdapter TLecturesAndCoursesTableAdapter {
            get {
                return this._tLecturesAndCoursesTableAdapter;
            }
            set {
                this._tLecturesAndCoursesTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._tableEstablishmentsOpenDateTableAdapter != null) 
                            && (this._tableEstablishmentsOpenDateTableAdapter.Connection != null))) {
                    return this._tableEstablishmentsOpenDateTableAdapter.Connection;
                }
                if (((this._tYoramSchoolsTableAdapter != null) 
                            && (this._tYoramSchoolsTableAdapter.Connection != null))) {
                    return this._tYoramSchoolsTableAdapter.Connection;
                }
                if (((this._tAdministratorsTableAdapter != null) 
                            && (this._tAdministratorsTableAdapter.Connection != null))) {
                    return this._tAdministratorsTableAdapter.Connection;
                }
                if (((this._tAdvertisingEstablishmentsTableAdapter != null) 
                            && (this._tAdvertisingEstablishmentsTableAdapter.Connection != null))) {
                    return this._tAdvertisingEstablishmentsTableAdapter.Connection;
                }
                if (((this._tAreasCoursesTableAdapter != null) 
                            && (this._tAreasCoursesTableAdapter.Connection != null))) {
                    return this._tAreasCoursesTableAdapter.Connection;
                }
                if (((this._tArticlesTableAdapter != null) 
                            && (this._tArticlesTableAdapter.Connection != null))) {
                    return this._tArticlesTableAdapter.Connection;
                }
                if (((this._tCategoriesTableAdapter != null) 
                            && (this._tCategoriesTableAdapter.Connection != null))) {
                    return this._tCategoriesTableAdapter.Connection;
                }
                if (((this._tCoursesTableAdapter != null) 
                            && (this._tCoursesTableAdapter.Connection != null))) {
                    return this._tCoursesTableAdapter.Connection;
                }
                if (((this._tEstablishmentsTableAdapter != null) 
                            && (this._tEstablishmentsTableAdapter.Connection != null))) {
                    return this._tEstablishmentsTableAdapter.Connection;
                }
                if (((this._tLecturersTableAdapter != null) 
                            && (this._tLecturersTableAdapter.Connection != null))) {
                    return this._tLecturersTableAdapter.Connection;
                }
                if (((this._tMessagesTableAdapter != null) 
                            && (this._tMessagesTableAdapter.Connection != null))) {
                    return this._tMessagesTableAdapter.Connection;
                }
                if (((this._tMessagesForSchoolTableAdapter != null) 
                            && (this._tMessagesForSchoolTableAdapter.Connection != null))) {
                    return this._tMessagesForSchoolTableAdapter.Connection;
                }
                if (((this._tPhonesListTableAdapter != null) 
                            && (this._tPhonesListTableAdapter.Connection != null))) {
                    return this._tPhonesListTableAdapter.Connection;
                }
                if (((this._tPhotoGalleryTableAdapter != null) 
                            && (this._tPhotoGalleryTableAdapter.Connection != null))) {
                    return this._tPhotoGalleryTableAdapter.Connection;
                }
                if (((this._tRegionsTableAdapter != null) 
                            && (this._tRegionsTableAdapter.Connection != null))) {
                    return this._tRegionsTableAdapter.Connection;
                }
                if (((this._tReviewsTableAdapter != null) 
                            && (this._tReviewsTableAdapter.Connection != null))) {
                    return this._tReviewsTableAdapter.Connection;
                }
                if (((this._tScholarshipsTableAdapter != null) 
                            && (this._tScholarshipsTableAdapter.Connection != null))) {
                    return this._tScholarshipsTableAdapter.Connection;
                }
                if (((this._tSubAreasCoursesTableAdapter != null) 
                            && (this._tSubAreasCoursesTableAdapter.Connection != null))) {
                    return this._tSubAreasCoursesTableAdapter.Connection;
                }
                if (((this._tTypeCoursesTableAdapter != null) 
                            && (this._tTypeCoursesTableAdapter.Connection != null))) {
                    return this._tTypeCoursesTableAdapter.Connection;
                }
                if (((this._tVisitorsMailsTableAdapter != null) 
                            && (this._tVisitorsMailsTableAdapter.Connection != null))) {
                    return this._tVisitorsMailsTableAdapter.Connection;
                }
                if (((this._tVisitorsMessagesTableAdapter != null) 
                            && (this._tVisitorsMessagesTableAdapter.Connection != null))) {
                    return this._tVisitorsMessagesTableAdapter.Connection;
                }
                if (((this._tYoramCatsTableAdapter != null) 
                            && (this._tYoramCatsTableAdapter.Connection != null))) {
                    return this._tYoramCatsTableAdapter.Connection;
                }
                if (((this._tLecturesAndCoursesTableAdapter != null) 
                            && (this._tLecturesAndCoursesTableAdapter.Connection != null))) {
                    return this._tLecturesAndCoursesTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._tableEstablishmentsOpenDateTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tYoramSchoolsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tAdministratorsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tAdvertisingEstablishmentsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tAreasCoursesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tArticlesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCategoriesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tCoursesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tEstablishmentsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tLecturersTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tMessagesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tMessagesForSchoolTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tPhonesListTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tPhotoGalleryTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tRegionsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tReviewsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tScholarshipsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tSubAreasCoursesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tTypeCoursesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tVisitorsMailsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tVisitorsMessagesTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tYoramCatsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._tLecturesAndCoursesTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(StudyingDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tCategoriesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCategories.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCategoriesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tAreasCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TAreasCourses.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tAreasCoursesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tRegionsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TRegions.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tRegionsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tSubAreasCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TSubAreasCourses.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tSubAreasCoursesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tEstablishmentsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TEstablishments.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tEstablishmentsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TCourses.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tCoursesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tLecturersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TLecturers.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tLecturersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tScholarshipsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TScholarships.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tScholarshipsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tLecturesAndCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TLecturesAndCourses.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tLecturesAndCoursesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tReviewsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TReviews.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tReviewsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tTypeCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TTypeCourses.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tTypeCoursesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tVisitorsMessagesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TVisitorsMessages.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tVisitorsMessagesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tVisitorsMailsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TVisitorsMails.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tVisitorsMailsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tYoramCatsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TYoramCats.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tYoramCatsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tAdministratorsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TAdministrators.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tAdministratorsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tAdvertisingEstablishmentsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TAdvertisingEstablishments.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tAdvertisingEstablishmentsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tableEstablishmentsOpenDateTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TableEstablishmentsOpenDate.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tableEstablishmentsOpenDateTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tYoramSchoolsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TYoramSchools.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tYoramSchoolsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tArticlesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TArticles.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tArticlesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tPhonesListTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TPhonesList.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tPhonesListTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tPhotoGalleryTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TPhotoGallery.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tPhotoGalleryTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tMessagesTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TMessages.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tMessagesTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._tMessagesForSchoolTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TMessagesForSchool.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._tMessagesForSchoolTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(StudyingDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._tCategoriesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCategories.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCategoriesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tAreasCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TAreasCourses.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tAreasCoursesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tRegionsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TRegions.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tRegionsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tSubAreasCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TSubAreasCourses.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tSubAreasCoursesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tEstablishmentsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TEstablishments.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tEstablishmentsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TCourses.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tCoursesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tLecturersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TLecturers.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tLecturersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tScholarshipsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TScholarships.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tScholarshipsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tLecturesAndCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TLecturesAndCourses.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tLecturesAndCoursesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tReviewsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TReviews.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tReviewsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tTypeCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TTypeCourses.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tTypeCoursesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tVisitorsMessagesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TVisitorsMessages.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tVisitorsMessagesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tVisitorsMailsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TVisitorsMails.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tVisitorsMailsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tYoramCatsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TYoramCats.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tYoramCatsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tAdministratorsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TAdministrators.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tAdministratorsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tAdvertisingEstablishmentsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TAdvertisingEstablishments.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tAdvertisingEstablishmentsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tableEstablishmentsOpenDateTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TableEstablishmentsOpenDate.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tableEstablishmentsOpenDateTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tYoramSchoolsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TYoramSchools.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tYoramSchoolsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tArticlesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TArticles.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tArticlesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tPhonesListTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TPhonesList.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tPhonesListTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tPhotoGalleryTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TPhotoGallery.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tPhotoGalleryTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tMessagesTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TMessages.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tMessagesTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._tMessagesForSchoolTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TMessagesForSchool.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._tMessagesForSchoolTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(StudyingDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._tMessagesForSchoolTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TMessagesForSchool.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tMessagesForSchoolTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tMessagesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TMessages.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tMessagesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tPhotoGalleryTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TPhotoGallery.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tPhotoGalleryTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tPhonesListTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TPhonesList.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tPhonesListTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tArticlesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TArticles.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tArticlesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tYoramSchoolsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TYoramSchools.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tYoramSchoolsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tableEstablishmentsOpenDateTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TableEstablishmentsOpenDate.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tableEstablishmentsOpenDateTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tAdvertisingEstablishmentsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TAdvertisingEstablishments.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tAdvertisingEstablishmentsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tAdministratorsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TAdministrators.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tAdministratorsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tYoramCatsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TYoramCats.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tYoramCatsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tVisitorsMailsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TVisitorsMails.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tVisitorsMailsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tVisitorsMessagesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TVisitorsMessages.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tVisitorsMessagesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tTypeCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TTypeCourses.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tTypeCoursesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tReviewsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TReviews.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tReviewsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tLecturesAndCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TLecturesAndCourses.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tLecturesAndCoursesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tScholarshipsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TScholarships.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tScholarshipsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tLecturersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TLecturers.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tLecturersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCourses.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCoursesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tEstablishmentsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TEstablishments.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tEstablishmentsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tSubAreasCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TSubAreasCourses.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tSubAreasCoursesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tRegionsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TRegions.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tRegionsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tAreasCoursesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TAreasCourses.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tAreasCoursesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._tCategoriesTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TCategories.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._tCategoriesTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(StudyingDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._tableEstablishmentsOpenDateTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tableEstablishmentsOpenDateTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tYoramSchoolsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tYoramSchoolsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tAdministratorsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tAdministratorsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tAdvertisingEstablishmentsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tAdvertisingEstablishmentsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tAreasCoursesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tAreasCoursesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tArticlesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tArticlesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tCategoriesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tCategoriesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tCoursesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tCoursesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tEstablishmentsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tEstablishmentsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tLecturersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tLecturersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tMessagesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tMessagesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tMessagesForSchoolTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tMessagesForSchoolTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tPhonesListTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tPhonesListTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tPhotoGalleryTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tPhotoGalleryTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tRegionsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tRegionsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tReviewsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tReviewsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tScholarshipsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tScholarshipsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tSubAreasCoursesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tSubAreasCoursesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tTypeCoursesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tTypeCoursesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tVisitorsMailsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tVisitorsMailsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tVisitorsMessagesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tVisitorsMessagesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tYoramCatsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tYoramCatsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._tLecturesAndCoursesTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._tLecturesAndCoursesTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._tableEstablishmentsOpenDateTableAdapter != null)) {
                    revertConnections.Add(this._tableEstablishmentsOpenDateTableAdapter, this._tableEstablishmentsOpenDateTableAdapter.Connection);
                    this._tableEstablishmentsOpenDateTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tableEstablishmentsOpenDateTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tableEstablishmentsOpenDateTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tableEstablishmentsOpenDateTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tableEstablishmentsOpenDateTableAdapter.Adapter);
                    }
                }
                if ((this._tYoramSchoolsTableAdapter != null)) {
                    revertConnections.Add(this._tYoramSchoolsTableAdapter, this._tYoramSchoolsTableAdapter.Connection);
                    this._tYoramSchoolsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tYoramSchoolsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tYoramSchoolsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tYoramSchoolsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tYoramSchoolsTableAdapter.Adapter);
                    }
                }
                if ((this._tAdministratorsTableAdapter != null)) {
                    revertConnections.Add(this._tAdministratorsTableAdapter, this._tAdministratorsTableAdapter.Connection);
                    this._tAdministratorsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tAdministratorsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tAdministratorsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tAdministratorsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tAdministratorsTableAdapter.Adapter);
                    }
                }
                if ((this._tAdvertisingEstablishmentsTableAdapter != null)) {
                    revertConnections.Add(this._tAdvertisingEstablishmentsTableAdapter, this._tAdvertisingEstablishmentsTableAdapter.Connection);
                    this._tAdvertisingEstablishmentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tAdvertisingEstablishmentsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tAdvertisingEstablishmentsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tAdvertisingEstablishmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tAdvertisingEstablishmentsTableAdapter.Adapter);
                    }
                }
                if ((this._tAreasCoursesTableAdapter != null)) {
                    revertConnections.Add(this._tAreasCoursesTableAdapter, this._tAreasCoursesTableAdapter.Connection);
                    this._tAreasCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tAreasCoursesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tAreasCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tAreasCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tAreasCoursesTableAdapter.Adapter);
                    }
                }
                if ((this._tArticlesTableAdapter != null)) {
                    revertConnections.Add(this._tArticlesTableAdapter, this._tArticlesTableAdapter.Connection);
                    this._tArticlesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tArticlesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tArticlesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tArticlesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tArticlesTableAdapter.Adapter);
                    }
                }
                if ((this._tCategoriesTableAdapter != null)) {
                    revertConnections.Add(this._tCategoriesTableAdapter, this._tCategoriesTableAdapter.Connection);
                    this._tCategoriesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCategoriesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCategoriesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCategoriesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCategoriesTableAdapter.Adapter);
                    }
                }
                if ((this._tCoursesTableAdapter != null)) {
                    revertConnections.Add(this._tCoursesTableAdapter, this._tCoursesTableAdapter.Connection);
                    this._tCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tCoursesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tCoursesTableAdapter.Adapter);
                    }
                }
                if ((this._tEstablishmentsTableAdapter != null)) {
                    revertConnections.Add(this._tEstablishmentsTableAdapter, this._tEstablishmentsTableAdapter.Connection);
                    this._tEstablishmentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tEstablishmentsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tEstablishmentsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tEstablishmentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tEstablishmentsTableAdapter.Adapter);
                    }
                }
                if ((this._tLecturersTableAdapter != null)) {
                    revertConnections.Add(this._tLecturersTableAdapter, this._tLecturersTableAdapter.Connection);
                    this._tLecturersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tLecturersTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tLecturersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tLecturersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tLecturersTableAdapter.Adapter);
                    }
                }
                if ((this._tMessagesTableAdapter != null)) {
                    revertConnections.Add(this._tMessagesTableAdapter, this._tMessagesTableAdapter.Connection);
                    this._tMessagesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tMessagesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tMessagesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tMessagesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tMessagesTableAdapter.Adapter);
                    }
                }
                if ((this._tMessagesForSchoolTableAdapter != null)) {
                    revertConnections.Add(this._tMessagesForSchoolTableAdapter, this._tMessagesForSchoolTableAdapter.Connection);
                    this._tMessagesForSchoolTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tMessagesForSchoolTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tMessagesForSchoolTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tMessagesForSchoolTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tMessagesForSchoolTableAdapter.Adapter);
                    }
                }
                if ((this._tPhonesListTableAdapter != null)) {
                    revertConnections.Add(this._tPhonesListTableAdapter, this._tPhonesListTableAdapter.Connection);
                    this._tPhonesListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tPhonesListTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tPhonesListTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tPhonesListTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tPhonesListTableAdapter.Adapter);
                    }
                }
                if ((this._tPhotoGalleryTableAdapter != null)) {
                    revertConnections.Add(this._tPhotoGalleryTableAdapter, this._tPhotoGalleryTableAdapter.Connection);
                    this._tPhotoGalleryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tPhotoGalleryTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tPhotoGalleryTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tPhotoGalleryTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tPhotoGalleryTableAdapter.Adapter);
                    }
                }
                if ((this._tRegionsTableAdapter != null)) {
                    revertConnections.Add(this._tRegionsTableAdapter, this._tRegionsTableAdapter.Connection);
                    this._tRegionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tRegionsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tRegionsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tRegionsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tRegionsTableAdapter.Adapter);
                    }
                }
                if ((this._tReviewsTableAdapter != null)) {
                    revertConnections.Add(this._tReviewsTableAdapter, this._tReviewsTableAdapter.Connection);
                    this._tReviewsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tReviewsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tReviewsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tReviewsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tReviewsTableAdapter.Adapter);
                    }
                }
                if ((this._tScholarshipsTableAdapter != null)) {
                    revertConnections.Add(this._tScholarshipsTableAdapter, this._tScholarshipsTableAdapter.Connection);
                    this._tScholarshipsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tScholarshipsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tScholarshipsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tScholarshipsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tScholarshipsTableAdapter.Adapter);
                    }
                }
                if ((this._tSubAreasCoursesTableAdapter != null)) {
                    revertConnections.Add(this._tSubAreasCoursesTableAdapter, this._tSubAreasCoursesTableAdapter.Connection);
                    this._tSubAreasCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tSubAreasCoursesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tSubAreasCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tSubAreasCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tSubAreasCoursesTableAdapter.Adapter);
                    }
                }
                if ((this._tTypeCoursesTableAdapter != null)) {
                    revertConnections.Add(this._tTypeCoursesTableAdapter, this._tTypeCoursesTableAdapter.Connection);
                    this._tTypeCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tTypeCoursesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tTypeCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tTypeCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tTypeCoursesTableAdapter.Adapter);
                    }
                }
                if ((this._tVisitorsMailsTableAdapter != null)) {
                    revertConnections.Add(this._tVisitorsMailsTableAdapter, this._tVisitorsMailsTableAdapter.Connection);
                    this._tVisitorsMailsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tVisitorsMailsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tVisitorsMailsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tVisitorsMailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tVisitorsMailsTableAdapter.Adapter);
                    }
                }
                if ((this._tVisitorsMessagesTableAdapter != null)) {
                    revertConnections.Add(this._tVisitorsMessagesTableAdapter, this._tVisitorsMessagesTableAdapter.Connection);
                    this._tVisitorsMessagesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tVisitorsMessagesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tVisitorsMessagesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tVisitorsMessagesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tVisitorsMessagesTableAdapter.Adapter);
                    }
                }
                if ((this._tYoramCatsTableAdapter != null)) {
                    revertConnections.Add(this._tYoramCatsTableAdapter, this._tYoramCatsTableAdapter.Connection);
                    this._tYoramCatsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tYoramCatsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tYoramCatsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tYoramCatsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tYoramCatsTableAdapter.Adapter);
                    }
                }
                if ((this._tLecturesAndCoursesTableAdapter != null)) {
                    revertConnections.Add(this._tLecturesAndCoursesTableAdapter, this._tLecturesAndCoursesTableAdapter.Connection);
                    this._tLecturesAndCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._tLecturesAndCoursesTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._tLecturesAndCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._tLecturesAndCoursesTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._tLecturesAndCoursesTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._tableEstablishmentsOpenDateTableAdapter != null)) {
                    this._tableEstablishmentsOpenDateTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tableEstablishmentsOpenDateTableAdapter]));
                    this._tableEstablishmentsOpenDateTableAdapter.Transaction = null;
                }
                if ((this._tYoramSchoolsTableAdapter != null)) {
                    this._tYoramSchoolsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tYoramSchoolsTableAdapter]));
                    this._tYoramSchoolsTableAdapter.Transaction = null;
                }
                if ((this._tAdministratorsTableAdapter != null)) {
                    this._tAdministratorsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tAdministratorsTableAdapter]));
                    this._tAdministratorsTableAdapter.Transaction = null;
                }
                if ((this._tAdvertisingEstablishmentsTableAdapter != null)) {
                    this._tAdvertisingEstablishmentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tAdvertisingEstablishmentsTableAdapter]));
                    this._tAdvertisingEstablishmentsTableAdapter.Transaction = null;
                }
                if ((this._tAreasCoursesTableAdapter != null)) {
                    this._tAreasCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tAreasCoursesTableAdapter]));
                    this._tAreasCoursesTableAdapter.Transaction = null;
                }
                if ((this._tArticlesTableAdapter != null)) {
                    this._tArticlesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tArticlesTableAdapter]));
                    this._tArticlesTableAdapter.Transaction = null;
                }
                if ((this._tCategoriesTableAdapter != null)) {
                    this._tCategoriesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCategoriesTableAdapter]));
                    this._tCategoriesTableAdapter.Transaction = null;
                }
                if ((this._tCoursesTableAdapter != null)) {
                    this._tCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tCoursesTableAdapter]));
                    this._tCoursesTableAdapter.Transaction = null;
                }
                if ((this._tEstablishmentsTableAdapter != null)) {
                    this._tEstablishmentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tEstablishmentsTableAdapter]));
                    this._tEstablishmentsTableAdapter.Transaction = null;
                }
                if ((this._tLecturersTableAdapter != null)) {
                    this._tLecturersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tLecturersTableAdapter]));
                    this._tLecturersTableAdapter.Transaction = null;
                }
                if ((this._tMessagesTableAdapter != null)) {
                    this._tMessagesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tMessagesTableAdapter]));
                    this._tMessagesTableAdapter.Transaction = null;
                }
                if ((this._tMessagesForSchoolTableAdapter != null)) {
                    this._tMessagesForSchoolTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tMessagesForSchoolTableAdapter]));
                    this._tMessagesForSchoolTableAdapter.Transaction = null;
                }
                if ((this._tPhonesListTableAdapter != null)) {
                    this._tPhonesListTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tPhonesListTableAdapter]));
                    this._tPhonesListTableAdapter.Transaction = null;
                }
                if ((this._tPhotoGalleryTableAdapter != null)) {
                    this._tPhotoGalleryTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tPhotoGalleryTableAdapter]));
                    this._tPhotoGalleryTableAdapter.Transaction = null;
                }
                if ((this._tRegionsTableAdapter != null)) {
                    this._tRegionsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tRegionsTableAdapter]));
                    this._tRegionsTableAdapter.Transaction = null;
                }
                if ((this._tReviewsTableAdapter != null)) {
                    this._tReviewsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tReviewsTableAdapter]));
                    this._tReviewsTableAdapter.Transaction = null;
                }
                if ((this._tScholarshipsTableAdapter != null)) {
                    this._tScholarshipsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tScholarshipsTableAdapter]));
                    this._tScholarshipsTableAdapter.Transaction = null;
                }
                if ((this._tSubAreasCoursesTableAdapter != null)) {
                    this._tSubAreasCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tSubAreasCoursesTableAdapter]));
                    this._tSubAreasCoursesTableAdapter.Transaction = null;
                }
                if ((this._tTypeCoursesTableAdapter != null)) {
                    this._tTypeCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tTypeCoursesTableAdapter]));
                    this._tTypeCoursesTableAdapter.Transaction = null;
                }
                if ((this._tVisitorsMailsTableAdapter != null)) {
                    this._tVisitorsMailsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tVisitorsMailsTableAdapter]));
                    this._tVisitorsMailsTableAdapter.Transaction = null;
                }
                if ((this._tVisitorsMessagesTableAdapter != null)) {
                    this._tVisitorsMessagesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tVisitorsMessagesTableAdapter]));
                    this._tVisitorsMessagesTableAdapter.Transaction = null;
                }
                if ((this._tYoramCatsTableAdapter != null)) {
                    this._tYoramCatsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tYoramCatsTableAdapter]));
                    this._tYoramCatsTableAdapter.Transaction = null;
                }
                if ((this._tLecturesAndCoursesTableAdapter != null)) {
                    this._tLecturesAndCoursesTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._tLecturesAndCoursesTableAdapter]));
                    this._tLecturesAndCoursesTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591